%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.7.3
-module(validator_pb).

-export([encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/3, merge_msgs/4]).
-export([verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([descriptor/0, descriptor/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

%% enumerated types

-export_type([]).

%% message types
-type routing() ::
    % = 1, 32 bits
    #{
        oui => non_neg_integer(),
        % = 2
        owner => iodata(),
        % = 3
        addresses => [iodata()],
        % = 4
        filters => [iodata()],
        % = 5
        subnet => [iodata()]
    }.

-type routing_response() ::
    % = 1
    #{
        routings => [routing()],
        % = 2, 32 bits
        height => non_neg_integer(),
        % = 3
        signature => iodata()
    }.

-type routing_request() ::
    % = 1, 32 bits
    #{height => non_neg_integer()}.

-export_type(['routing'/0, 'routing_response'/0, 'routing_request'/0]).

-spec encode_msg(routing() | routing_response() | routing_request(), atom()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []).

-spec encode_msg(routing() | routing_response() | routing_request(), atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
        true -> verify_msg(Msg, MsgName, Opts);
        false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        routing ->
            encode_msg_routing(id(Msg, TrUserData), TrUserData);
        routing_response ->
            encode_msg_routing_response(
                id(Msg, TrUserData),
                TrUserData
            );
        routing_request ->
            encode_msg_routing_request(
                id(Msg, TrUserData),
                TrUserData
            )
    end.

encode_msg_routing(Msg, TrUserData) ->
    encode_msg_routing(Msg, <<>>, TrUserData).

encode_msg_routing(#{} = M, Bin, TrUserData) ->
    B1 =
        case M of
            #{oui := F1} ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if
                        TrF1 =:= 0 -> Bin;
                        true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
                    end
                end;
            _ ->
                Bin
        end,
    B2 =
        case M of
            #{owner := F2} ->
                begin
                    TrF2 = id(F2, TrUserData),
                    case iolist_size(TrF2) of
                        0 -> B1;
                        _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
                    end
                end;
            _ ->
                B1
        end,
    B3 =
        case M of
            #{addresses := F3} ->
                TrF3 = id(F3, TrUserData),
                if
                    TrF3 == [] -> B2;
                    true -> e_field_routing_addresses(TrF3, B2, TrUserData)
                end;
            _ ->
                B2
        end,
    B4 =
        case M of
            #{filters := F4} ->
                TrF4 = id(F4, TrUserData),
                if
                    TrF4 == [] -> B3;
                    true -> e_field_routing_filters(TrF4, B3, TrUserData)
                end;
            _ ->
                B3
        end,
    case M of
        #{subnet := F5} ->
            TrF5 = id(F5, TrUserData),
            if
                TrF5 == [] -> B4;
                true -> e_field_routing_subnet(TrF5, B4, TrUserData)
            end;
        _ ->
            B4
    end.

encode_msg_routing_response(Msg, TrUserData) ->
    encode_msg_routing_response(Msg, <<>>, TrUserData).

encode_msg_routing_response(#{} = M, Bin, TrUserData) ->
    B1 =
        case M of
            #{routings := F1} ->
                TrF1 = id(F1, TrUserData),
                if
                    TrF1 == [] -> Bin;
                    true -> e_field_routing_response_routings(TrF1, Bin, TrUserData)
                end;
            _ ->
                Bin
        end,
    B2 =
        case M of
            #{height := F2} ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if
                        TrF2 =:= 0 -> B1;
                        true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
                    end
                end;
            _ ->
                B1
        end,
    case M of
        #{signature := F3} ->
            begin
                TrF3 = id(F3, TrUserData),
                case iolist_size(TrF3) of
                    0 -> B2;
                    _ -> e_type_bytes(TrF3, <<B2/binary, 26>>, TrUserData)
                end
            end;
        _ ->
            B2
    end.

encode_msg_routing_request(Msg, TrUserData) ->
    encode_msg_routing_request(Msg, <<>>, TrUserData).

encode_msg_routing_request(#{} = M, Bin, TrUserData) ->
    case M of
        #{height := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                if
                    TrF1 =:= 0 -> Bin;
                    true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
                end
            end;
        _ ->
            Bin
    end.

e_field_routing_addresses(
    [Elem | Rest],
    Bin,
    TrUserData
) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_type_bytes(
        id(Elem, TrUserData),
        Bin2,
        TrUserData
    ),
    e_field_routing_addresses(Rest, Bin3, TrUserData);
e_field_routing_addresses([], Bin, _TrUserData) ->
    Bin.

e_field_routing_filters(
    [Elem | Rest],
    Bin,
    TrUserData
) ->
    Bin2 = <<Bin/binary, 34>>,
    Bin3 = e_type_bytes(
        id(Elem, TrUserData),
        Bin2,
        TrUserData
    ),
    e_field_routing_filters(Rest, Bin3, TrUserData);
e_field_routing_filters([], Bin, _TrUserData) ->
    Bin.

e_field_routing_subnet(
    [Elem | Rest],
    Bin,
    TrUserData
) ->
    Bin2 = <<Bin/binary, 42>>,
    Bin3 = e_type_bytes(
        id(Elem, TrUserData),
        Bin2,
        TrUserData
    ),
    e_field_routing_subnet(Rest, Bin3, TrUserData);
e_field_routing_subnet([], Bin, _TrUserData) ->
    Bin.

e_mfield_routing_response_routings(
    Msg,
    Bin,
    TrUserData
) ->
    SubBin = encode_msg_routing(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_routing_response_routings(
    [Elem | Rest],
    Bin,
    TrUserData
) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_routing_response_routings(
        id(
            Elem,
            TrUserData
        ),
        Bin2,
        TrUserData
    ),
    e_field_routing_response_routings(
        Rest,
        Bin3,
        TrUserData
    );
e_field_routing_response_routings(
    [],
    Bin,
    _TrUserData
) ->
    Bin.

-compile({nowarn_unused_function, e_type_sint/3}).

e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function, e_type_int32/3}).

e_type_int32(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function, e_type_int64/3}).

e_type_int64(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function, e_type_bool/3}).

e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) ->
    <<Bin/binary, 0>>.

-compile({nowarn_unused_function, e_type_string/3}).

e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function, e_type_bytes/3}).

e_type_bytes(Bytes, Bin, _TrUserData) when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData) when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function, e_type_fixed32/3}).

e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function, e_type_sfixed32/3}).

e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function, e_type_fixed64/3}).

e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function, e_type_sfixed64/3}).

e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function, e_type_float/3}).

e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function, e_type_double/3}).

e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function, e_varint/3}).

e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function, e_varint/2}).

e_varint(N, Bin) when N =< 127 ->
    <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try
        decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch
        Class:Reason:StackTrace ->
            error({gpb_error, {decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try
        decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch
        Class:Reason ->
            StackTrace = erlang:get_stacktrace(),
            error({gpb_error, {decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit(routing, Bin, TrUserData) ->
    id(decode_msg_routing(Bin, TrUserData), TrUserData);
decode_msg_2_doit(routing_response, Bin, TrUserData) ->
    id(
        decode_msg_routing_response(Bin, TrUserData),
        TrUserData
    );
decode_msg_2_doit(routing_request, Bin, TrUserData) ->
    id(
        decode_msg_routing_request(Bin, TrUserData),
        TrUserData
    ).

decode_msg_routing(Bin, TrUserData) ->
    dfp_read_field_def_routing(
        Bin,
        0,
        0,
        id(0, TrUserData),
        id(<<>>, TrUserData),
        id([], TrUserData),
        id([], TrUserData),
        id([], TrUserData),
        TrUserData
    ).

dfp_read_field_def_routing(
    <<8, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    d_field_routing_oui(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
dfp_read_field_def_routing(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    d_field_routing_owner(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
dfp_read_field_def_routing(
    <<26, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    d_field_routing_addresses(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
dfp_read_field_def_routing(
    <<34, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    d_field_routing_filters(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
dfp_read_field_def_routing(
    <<42, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    d_field_routing_subnet(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
dfp_read_field_def_routing(
    <<>>,
    0,
    0,
    F@_1,
    F@_2,
    R1,
    R2,
    R3,
    TrUserData
) ->
    #{
        oui => F@_1,
        owner => F@_2,
        addresses => lists_reverse(R1, TrUserData),
        filters => lists_reverse(R2, TrUserData),
        subnet => lists_reverse(R3, TrUserData)
    };
dfp_read_field_def_routing(
    Other,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    dg_read_field_def_routing(
        Other,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

dg_read_field_def_routing(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 32 - 7 ->
    dg_read_field_def_routing(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
dg_read_field_def_routing(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            d_field_routing_oui(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        18 ->
            d_field_routing_owner(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        26 ->
            d_field_routing_addresses(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        34 ->
            d_field_routing_filters(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        42 ->
            d_field_routing_subnet(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_routing(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    );
                1 ->
                    skip_64_routing(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    );
                2 ->
                    skip_length_delimited_routing(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    );
                3 ->
                    skip_group_routing(
                        Rest,
                        Key bsr 3,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    );
                5 ->
                    skip_32_routing(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    )
            end
    end;
dg_read_field_def_routing(
    <<>>,
    0,
    0,
    F@_1,
    F@_2,
    R1,
    R2,
    R3,
    TrUserData
) ->
    #{
        oui => F@_1,
        owner => F@_2,
        addresses => lists_reverse(R1, TrUserData),
        filters => lists_reverse(R2, TrUserData),
        subnet => lists_reverse(R3, TrUserData)
    }.

d_field_routing_oui(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    d_field_routing_oui(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
d_field_routing_oui(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_routing(
        RestF,
        0,
        0,
        NewFValue,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

d_field_routing_owner(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    d_field_routing_owner(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
d_field_routing_owner(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    _,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        {id(binary:copy(Bytes), TrUserData), Rest2}
    end,
    dfp_read_field_def_routing(
        RestF,
        0,
        0,
        F@_1,
        NewFValue,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

d_field_routing_addresses(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    d_field_routing_addresses(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
d_field_routing_addresses(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    Prev,
    F@_4,
    F@_5,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        {id(binary:copy(Bytes), TrUserData), Rest2}
    end,
    dfp_read_field_def_routing(
        RestF,
        0,
        0,
        F@_1,
        F@_2,
        cons(NewFValue, Prev, TrUserData),
        F@_4,
        F@_5,
        TrUserData
    ).

d_field_routing_filters(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    d_field_routing_filters(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
d_field_routing_filters(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    Prev,
    F@_5,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        {id(binary:copy(Bytes), TrUserData), Rest2}
    end,
    dfp_read_field_def_routing(
        RestF,
        0,
        0,
        F@_1,
        F@_2,
        F@_3,
        cons(NewFValue, Prev, TrUserData),
        F@_5,
        TrUserData
    ).

d_field_routing_subnet(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    d_field_routing_subnet(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
d_field_routing_subnet(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        {id(binary:copy(Bytes), TrUserData), Rest2}
    end,
    dfp_read_field_def_routing(
        RestF,
        0,
        0,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        cons(NewFValue, Prev, TrUserData),
        TrUserData
    ).

skip_varint_routing(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    skip_varint_routing(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
skip_varint_routing(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    dfp_read_field_def_routing(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

skip_length_delimited_routing(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    skip_length_delimited_routing(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
skip_length_delimited_routing(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_routing(
        Rest2,
        0,
        0,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

skip_group_routing(
    Bin,
    FNum,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_routing(
        Rest,
        0,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

skip_32_routing(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    dfp_read_field_def_routing(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

skip_64_routing(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    dfp_read_field_def_routing(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    ).

decode_msg_routing_response(Bin, TrUserData) ->
    dfp_read_field_def_routing_response(
        Bin,
        0,
        0,
        id([], TrUserData),
        id(0, TrUserData),
        id(<<>>, TrUserData),
        TrUserData
    ).

dfp_read_field_def_routing_response(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    d_field_routing_response_routings(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
dfp_read_field_def_routing_response(
    <<16, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    d_field_routing_response_height(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
dfp_read_field_def_routing_response(
    <<26, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    d_field_routing_response_signature(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
dfp_read_field_def_routing_response(
    <<>>,
    0,
    0,
    R1,
    F@_2,
    F@_3,
    TrUserData
) ->
    S1 = #{height => F@_2, signature => F@_3},
    if
        R1 == '$undef' -> S1;
        true -> S1#{routings => lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_routing_response(
    Other,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    dg_read_field_def_routing_response(
        Other,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

dg_read_field_def_routing_response(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 32 - 7 ->
    dg_read_field_def_routing_response(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
dg_read_field_def_routing_response(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_routing_response_routings(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                TrUserData
            );
        16 ->
            d_field_routing_response_height(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                TrUserData
            );
        26 ->
            d_field_routing_response_signature(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_routing_response(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                1 ->
                    skip_64_routing_response(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                2 ->
                    skip_length_delimited_routing_response(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                3 ->
                    skip_group_routing_response(
                        Rest,
                        Key bsr 3,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                5 ->
                    skip_32_routing_response(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    )
            end
    end;
dg_read_field_def_routing_response(
    <<>>,
    0,
    0,
    R1,
    F@_2,
    F@_3,
    TrUserData
) ->
    S1 = #{height => F@_2, signature => F@_3},
    if
        R1 == '$undef' -> S1;
        true -> S1#{routings => lists_reverse(R1, TrUserData)}
    end.

d_field_routing_response_routings(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    d_field_routing_response_routings(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
d_field_routing_response_routings(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    Prev,
    F@_2,
    F@_3,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id(decode_msg_routing(Bs, TrUserData), TrUserData), Rest2}
    end,
    dfp_read_field_def_routing_response(
        RestF,
        0,
        0,
        cons(NewFValue, Prev, TrUserData),
        F@_2,
        F@_3,
        TrUserData
    ).

d_field_routing_response_height(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    d_field_routing_response_height(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
d_field_routing_response_height(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    _,
    F@_3,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_routing_response(
        RestF,
        0,
        0,
        F@_1,
        NewFValue,
        F@_3,
        TrUserData
    ).

d_field_routing_response_signature(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    d_field_routing_response_signature(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
d_field_routing_response_signature(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        {id(binary:copy(Bytes), TrUserData), Rest2}
    end,
    dfp_read_field_def_routing_response(
        RestF,
        0,
        0,
        F@_1,
        F@_2,
        NewFValue,
        TrUserData
    ).

skip_varint_routing_response(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    skip_varint_routing_response(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
skip_varint_routing_response(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    dfp_read_field_def_routing_response(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

skip_length_delimited_routing_response(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    skip_length_delimited_routing_response(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
skip_length_delimited_routing_response(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_routing_response(
        Rest2,
        0,
        0,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

skip_group_routing_response(
    Bin,
    FNum,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_routing_response(
        Rest,
        0,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

skip_32_routing_response(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    dfp_read_field_def_routing_response(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

skip_64_routing_response(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    dfp_read_field_def_routing_response(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

decode_msg_routing_request(Bin, TrUserData) ->
    dfp_read_field_def_routing_request(
        Bin,
        0,
        0,
        id(0, TrUserData),
        TrUserData
    ).

dfp_read_field_def_routing_request(
    <<8, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    TrUserData
) ->
    d_field_routing_request_height(
        Rest,
        Z1,
        Z2,
        F@_1,
        TrUserData
    );
dfp_read_field_def_routing_request(
    <<>>,
    0,
    0,
    F@_1,
    _
) ->
    #{height => F@_1};
dfp_read_field_def_routing_request(
    Other,
    Z1,
    Z2,
    F@_1,
    TrUserData
) ->
    dg_read_field_def_routing_request(
        Other,
        Z1,
        Z2,
        F@_1,
        TrUserData
    ).

dg_read_field_def_routing_request(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    TrUserData
) when N < 32 - 7 ->
    dg_read_field_def_routing_request(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        TrUserData
    );
dg_read_field_def_routing_request(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            d_field_routing_request_height(
                Rest,
                0,
                0,
                F@_1,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_routing_request(
                        Rest,
                        0,
                        0,
                        F@_1,
                        TrUserData
                    );
                1 ->
                    skip_64_routing_request(Rest, 0, 0, F@_1, TrUserData);
                2 ->
                    skip_length_delimited_routing_request(
                        Rest,
                        0,
                        0,
                        F@_1,
                        TrUserData
                    );
                3 ->
                    skip_group_routing_request(
                        Rest,
                        Key bsr 3,
                        0,
                        F@_1,
                        TrUserData
                    );
                5 ->
                    skip_32_routing_request(Rest, 0, 0, F@_1, TrUserData)
            end
    end;
dg_read_field_def_routing_request(
    <<>>,
    0,
    0,
    F@_1,
    _
) ->
    #{height => F@_1}.

d_field_routing_request_height(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    TrUserData
) when N < 57 ->
    d_field_routing_request_height(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        TrUserData
    );
d_field_routing_request_height(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_routing_request(
        RestF,
        0,
        0,
        NewFValue,
        TrUserData
    ).

skip_varint_routing_request(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    TrUserData
) ->
    skip_varint_routing_request(
        Rest,
        Z1,
        Z2,
        F@_1,
        TrUserData
    );
skip_varint_routing_request(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    TrUserData
) ->
    dfp_read_field_def_routing_request(
        Rest,
        Z1,
        Z2,
        F@_1,
        TrUserData
    ).

skip_length_delimited_routing_request(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    TrUserData
) when N < 57 ->
    skip_length_delimited_routing_request(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        TrUserData
    );
skip_length_delimited_routing_request(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_routing_request(
        Rest2,
        0,
        0,
        F@_1,
        TrUserData
    ).

skip_group_routing_request(
    Bin,
    FNum,
    Z2,
    F@_1,
    TrUserData
) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_routing_request(
        Rest,
        0,
        Z2,
        F@_1,
        TrUserData
    ).

skip_32_routing_request(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    TrUserData
) ->
    dfp_read_field_def_routing_request(
        Rest,
        Z1,
        Z2,
        F@_1,
        TrUserData
    ).

skip_64_routing_request(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    TrUserData
) ->
    dfp_read_field_def_routing_request(
        Rest,
        Z1,
        Z2,
        F@_1,
        TrUserData
    ).

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum) when N < (32 - 7) ->
    read_gr_b(Tl, N + 7, X bsl N + Acc, NumBytes, TagLen + 1, FieldNum);
read_gr_b(
    <<0:1, X:7, Tl/binary>>,
    N,
    Acc,
    NumBytes,
    TagLen,
    FieldNum
) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        % 4 = group_end
        {FieldNum, 4} ->
            {NumBytes, TagLen1};
        % 0 = varint
        {_, 0} ->
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        % 1 = bits64
        {_, 1} ->
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        % 2 = length_delimited
        {_, 2} ->
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        % 3 = group_start
        {_, 3} ->
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        % 4 = group_end
        {_, 4} ->
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        % 5 = bits32
        {_, 5} ->
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum) when N < (64 - 7) ->
    read_gr_vi(Tl, N + 7, NumBytes + 1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes + 1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) when N < (64 - 7) ->
    read_gr_ld(Tl, N + 7, X bsl N + Acc, NumBytes + 1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        routing -> merge_msg_routing(Prev, New, TrUserData);
        routing_response -> merge_msg_routing_response(Prev, New, TrUserData);
        routing_request -> merge_msg_routing_request(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function, merge_msg_routing/3}).

merge_msg_routing(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 =
        case {PMsg, NMsg} of
            {_, #{oui := NFoui}} -> S1#{oui => NFoui};
            {#{oui := PFoui}, _} -> S1#{oui => PFoui};
            _ -> S1
        end,
    S3 =
        case {PMsg, NMsg} of
            {_, #{owner := NFowner}} -> S2#{owner => NFowner};
            {#{owner := PFowner}, _} -> S2#{owner => PFowner};
            _ -> S2
        end,
    S4 =
        case {PMsg, NMsg} of
            {#{addresses := PFaddresses}, #{addresses := NFaddresses}} ->
                S3#{
                    addresses =>
                        'erlang_++'(PFaddresses, NFaddresses, TrUserData)
                };
            {_, #{addresses := NFaddresses}} ->
                S3#{addresses => NFaddresses};
            {#{addresses := PFaddresses}, _} ->
                S3#{addresses => PFaddresses};
            {_, _} ->
                S3
        end,
    S5 =
        case {PMsg, NMsg} of
            {#{filters := PFfilters}, #{filters := NFfilters}} ->
                S4#{
                    filters =>
                        'erlang_++'(PFfilters, NFfilters, TrUserData)
                };
            {_, #{filters := NFfilters}} ->
                S4#{filters => NFfilters};
            {#{filters := PFfilters}, _} ->
                S4#{filters => PFfilters};
            {_, _} ->
                S4
        end,
    case {PMsg, NMsg} of
        {#{subnet := PFsubnet}, #{subnet := NFsubnet}} ->
            S5#{
                subnet =>
                    'erlang_++'(PFsubnet, NFsubnet, TrUserData)
            };
        {_, #{subnet := NFsubnet}} ->
            S5#{subnet => NFsubnet};
        {#{subnet := PFsubnet}, _} ->
            S5#{subnet => PFsubnet};
        {_, _} ->
            S5
    end.

-compile({nowarn_unused_function, merge_msg_routing_response/3}).

merge_msg_routing_response(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 =
        case {PMsg, NMsg} of
            {#{routings := PFroutings}, #{routings := NFroutings}} ->
                S1#{
                    routings =>
                        'erlang_++'(PFroutings, NFroutings, TrUserData)
                };
            {_, #{routings := NFroutings}} ->
                S1#{routings => NFroutings};
            {#{routings := PFroutings}, _} ->
                S1#{routings => PFroutings};
            {_, _} ->
                S1
        end,
    S3 =
        case {PMsg, NMsg} of
            {_, #{height := NFheight}} -> S2#{height => NFheight};
            {#{height := PFheight}, _} -> S2#{height => PFheight};
            _ -> S2
        end,
    case {PMsg, NMsg} of
        {_, #{signature := NFsignature}} ->
            S3#{signature => NFsignature};
        {#{signature := PFsignature}, _} ->
            S3#{signature => PFsignature};
        _ ->
            S3
    end.

-compile({nowarn_unused_function, merge_msg_routing_request/3}).

merge_msg_routing_request(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{height := NFheight}} -> S1#{height => NFheight};
        {#{height := PFheight}, _} -> S1#{height => PFheight};
        _ -> S1
    end.

verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        routing -> v_msg_routing(Msg, [MsgName], TrUserData);
        routing_response -> v_msg_routing_response(Msg, [MsgName], TrUserData);
        routing_request -> v_msg_routing_request(Msg, [MsgName], TrUserData);
        _ -> mk_type_error(not_a_known_message, Msg, [])
    end.

-compile({nowarn_unused_function, v_msg_routing/3}).

-dialyzer({nowarn_function, v_msg_routing/3}).

v_msg_routing(#{} = M, Path, TrUserData) ->
    case M of
        #{oui := F1} ->
            v_type_uint32(F1, [oui | Path], TrUserData);
        _ ->
            ok
    end,
    case M of
        #{owner := F2} ->
            v_type_bytes(F2, [owner | Path], TrUserData);
        _ ->
            ok
    end,
    case M of
        #{addresses := F3} ->
            if
                is_list(F3) ->
                    _ = [
                        v_type_bytes(Elem, [addresses | Path], TrUserData)
                        || Elem <- F3
                    ],
                    ok;
                true ->
                    mk_type_error(
                        {invalid_list_of, bytes},
                        F3,
                        [addresses | Path]
                    )
            end;
        _ ->
            ok
    end,
    case M of
        #{filters := F4} ->
            if
                is_list(F4) ->
                    _ = [
                        v_type_bytes(Elem, [filters | Path], TrUserData)
                        || Elem <- F4
                    ],
                    ok;
                true ->
                    mk_type_error(
                        {invalid_list_of, bytes},
                        F4,
                        [filters | Path]
                    )
            end;
        _ ->
            ok
    end,
    case M of
        #{subnet := F5} ->
            if
                is_list(F5) ->
                    _ = [
                        v_type_bytes(Elem, [subnet | Path], TrUserData)
                        || Elem <- F5
                    ],
                    ok;
                true ->
                    mk_type_error(
                        {invalid_list_of, bytes},
                        F5,
                        [subnet | Path]
                    )
            end;
        _ ->
            ok
    end,
    lists:foreach(
        fun
            (oui) -> ok;
            (owner) -> ok;
            (addresses) -> ok;
            (filters) -> ok;
            (subnet) -> ok;
            (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
        end,
        maps:keys(M)
    ),
    ok;
v_msg_routing(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error(
        {missing_fields, [] -- maps:keys(M), routing},
        M,
        Path
    );
v_msg_routing(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, routing}, X, Path).

-compile({nowarn_unused_function, v_msg_routing_response/3}).

-dialyzer({nowarn_function, v_msg_routing_response/3}).

v_msg_routing_response(#{} = M, Path, TrUserData) ->
    case M of
        #{routings := F1} ->
            if
                is_list(F1) ->
                    _ = [
                        v_msg_routing(Elem, [routings | Path], TrUserData)
                        || Elem <- F1
                    ],
                    ok;
                true ->
                    mk_type_error(
                        {invalid_list_of, {msg, routing}},
                        F1,
                        [routings | Path]
                    )
            end;
        _ ->
            ok
    end,
    case M of
        #{height := F2} ->
            v_type_uint32(F2, [height | Path], TrUserData);
        _ ->
            ok
    end,
    case M of
        #{signature := F3} ->
            v_type_bytes(F3, [signature | Path], TrUserData);
        _ ->
            ok
    end,
    lists:foreach(
        fun
            (routings) -> ok;
            (height) -> ok;
            (signature) -> ok;
            (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
        end,
        maps:keys(M)
    ),
    ok;
v_msg_routing_response(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error(
        {missing_fields, [] -- maps:keys(M), routing_response},
        M,
        Path
    );
v_msg_routing_response(X, Path, _TrUserData) ->
    mk_type_error(
        {expected_msg, routing_response},
        X,
        Path
    ).

-compile({nowarn_unused_function, v_msg_routing_request/3}).

-dialyzer({nowarn_function, v_msg_routing_request/3}).

v_msg_routing_request(#{} = M, Path, TrUserData) ->
    case M of
        #{height := F1} ->
            v_type_uint64(F1, [height | Path], TrUserData);
        _ ->
            ok
    end,
    lists:foreach(
        fun
            (height) -> ok;
            (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
        end,
        maps:keys(M)
    ),
    ok;
v_msg_routing_request(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error(
        {missing_fields, [] -- maps:keys(M), routing_request},
        M,
        Path
    );
v_msg_routing_request(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, routing_request}, X, Path).

-compile({nowarn_unused_function, v_type_uint32/3}).

-dialyzer({nowarn_function, v_type_uint32/3}).

v_type_uint32(N, _Path, _TrUserData) when 0 =< N, N =< 4294967295 ->
    ok;
v_type_uint32(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error(
        {value_out_of_range, uint32, unsigned, 32},
        N,
        Path
    );
v_type_uint32(X, Path, _TrUserData) ->
    mk_type_error(
        {bad_integer, uint32, unsigned, 32},
        X,
        Path
    ).

-compile({nowarn_unused_function, v_type_uint64/3}).

-dialyzer({nowarn_function, v_type_uint64/3}).

v_type_uint64(N, _Path, _TrUserData) when 0 =< N, N =< 18446744073709551615 ->
    ok;
v_type_uint64(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error(
        {value_out_of_range, uint64, unsigned, 64},
        N,
        Path
    );
v_type_uint64(X, Path, _TrUserData) ->
    mk_type_error(
        {bad_integer, uint64, unsigned, 64},
        X,
        Path
    ).

-compile({nowarn_unused_function, v_type_bytes/3}).

-dialyzer({nowarn_function, v_type_bytes/3}).

v_type_bytes(B, _Path, _TrUserData) when is_binary(B) ->
    ok;
v_type_bytes(B, _Path, _TrUserData) when is_list(B) ->
    ok;
v_type_bytes(X, Path, _TrUserData) ->
    mk_type_error(bad_binary_value, X, Path).

-compile({nowarn_unused_function, mk_type_error/3}).

-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error, {Error, [{value, ValueSeen}, {path, Path2}]}}).

-compile({nowarn_unused_function, prettify_path/1}).

-dialyzer({nowarn_function, prettify_path/1}).

prettify_path([]) ->
    top_level;
prettify_path(PathR) ->
    list_to_atom(
        lists:append(
            lists:join(
                ".",
                lists:map(
                    fun atom_to_list/1,
                    lists:reverse(PathR)
                )
            )
        )
    ).

-compile({nowarn_unused_function, id/2}).
-compile({inline, id/2}).

id(X, _TrUserData) -> X.

-compile({nowarn_unused_function, v_ok/3}).
-compile({inline, v_ok/3}).

v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function, m_overwrite/3}).
-compile({inline, m_overwrite/3}).

m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function, cons/3}).
-compile({inline, cons/3}).

cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function, lists_reverse/2}).
-compile({inline, lists_reverse/2}).

'lists_reverse'(L, _TrUserData) -> lists:reverse(L).

-compile({nowarn_unused_function, 'erlang_++'/3}).
-compile({inline, 'erlang_++'/3}).

'erlang_++'(A, B, _TrUserData) -> A ++ B.

get_msg_defs() ->
    [
        {{msg, routing}, [
            #{
                name => oui,
                fnum => 1,
                rnum => 2,
                type => uint32,
                occurrence => optional,
                opts => []
            },
            #{
                name => owner,
                fnum => 2,
                rnum => 3,
                type => bytes,
                occurrence => optional,
                opts => []
            },
            #{
                name => addresses,
                fnum => 3,
                rnum => 4,
                type => bytes,
                occurrence => repeated,
                opts => []
            },
            #{
                name => filters,
                fnum => 4,
                rnum => 5,
                type => bytes,
                occurrence => repeated,
                opts => []
            },
            #{
                name => subnet,
                fnum => 5,
                rnum => 6,
                type => bytes,
                occurrence => repeated,
                opts => []
            }
        ]},
        {{msg, routing_response}, [
            #{
                name => routings,
                fnum => 1,
                rnum => 2,
                type => {msg, routing},
                occurrence => repeated,
                opts => []
            },
            #{
                name => height,
                fnum => 2,
                rnum => 3,
                type => uint32,
                occurrence => optional,
                opts => []
            },
            #{
                name => signature,
                fnum => 3,
                rnum => 4,
                type => bytes,
                occurrence => optional,
                opts => []
            }
        ]},
        {{msg, routing_request}, [
            #{
                name => height,
                fnum => 1,
                rnum => 2,
                type => uint64,
                occurrence => optional,
                opts => []
            }
        ]}
    ].

get_msg_names() ->
    [routing, routing_response, routing_request].

get_group_names() -> [].

get_msg_or_group_names() ->
    [routing, routing_response, routing_request].

get_enum_names() -> [].

fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
        Fs when is_list(Fs) -> Fs;
        error -> erlang:error({no_such_msg, MsgName})
    end.

-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).

find_msg_def(routing) ->
    [
        #{
            name => oui,
            fnum => 1,
            rnum => 2,
            type => uint32,
            occurrence => optional,
            opts => []
        },
        #{
            name => owner,
            fnum => 2,
            rnum => 3,
            type => bytes,
            occurrence => optional,
            opts => []
        },
        #{
            name => addresses,
            fnum => 3,
            rnum => 4,
            type => bytes,
            occurrence => repeated,
            opts => []
        },
        #{
            name => filters,
            fnum => 4,
            rnum => 5,
            type => bytes,
            occurrence => repeated,
            opts => []
        },
        #{
            name => subnet,
            fnum => 5,
            rnum => 6,
            type => bytes,
            occurrence => repeated,
            opts => []
        }
    ];
find_msg_def(routing_response) ->
    [
        #{
            name => routings,
            fnum => 1,
            rnum => 2,
            type => {msg, routing},
            occurrence => repeated,
            opts => []
        },
        #{
            name => height,
            fnum => 2,
            rnum => 3,
            type => uint32,
            occurrence => optional,
            opts => []
        },
        #{
            name => signature,
            fnum => 3,
            rnum => 4,
            type => bytes,
            occurrence => optional,
            opts => []
        }
    ];
find_msg_def(routing_request) ->
    [
        #{
            name => height,
            fnum => 1,
            rnum => 2,
            type => uint64,
            occurrence => optional,
            opts => []
        }
    ];
find_msg_def(_) ->
    error.

find_enum_def(_) -> error.

-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).

-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).

get_service_names() -> ['helium.validator'].

get_service_def('helium.validator') ->
    {{service, 'helium.validator'}, [
        #{
            name => routing,
            input => routing_request,
            output => routing_response,
            input_stream => false,
            output_stream => true,
            opts => []
        }
    ]};
get_service_def(_) ->
    error.

get_rpc_names('helium.validator') -> [routing];
get_rpc_names(_) -> error.

find_rpc_def('helium.validator', RpcName) ->
    'find_rpc_def_helium.validator'(RpcName);
find_rpc_def(_, _) ->
    error.

'find_rpc_def_helium.validator'(routing) ->
    #{
        name => routing,
        input => routing_request,
        output => routing_response,
        input_stream => false,
        output_stream => true,
        opts => []
    };
'find_rpc_def_helium.validator'(_) ->
    error.

fetch_rpc_def(ServiceName, RpcName) ->
    case find_rpc_def(ServiceName, RpcName) of
        Def when is_map(Def) -> Def;
        error -> erlang:error({no_such_rpc, ServiceName, RpcName})
    end.

%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
fqbin_to_service_name(<<"helium.validator">>) -> 'helium.validator';
fqbin_to_service_name(X) -> error({gpb_error, {badservice, X}}).

%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
service_name_to_fqbin('helium.validator') -> <<"helium.validator">>;
service_name_to_fqbin(X) -> error({gpb_error, {badservice, X}}).

%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
fqbins_to_service_and_rpc_name(<<"helium.validator">>, <<"routing">>) ->
    {'helium.validator', routing};
fqbins_to_service_and_rpc_name(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).

%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
service_and_rpc_name_to_fqbins(
    'helium.validator',
    routing
) ->
    {<<"helium.validator">>, <<"routing">>};
service_and_rpc_name_to_fqbins(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).

fqbin_to_msg_name(<<"helium.Routing">>) -> routing;
fqbin_to_msg_name(<<"helium.RoutingResponse">>) -> routing_response;
fqbin_to_msg_name(<<"helium.RoutingRequest">>) -> routing_request;
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).

msg_name_to_fqbin(routing) -> <<"helium.Routing">>;
msg_name_to_fqbin(routing_response) -> <<"helium.RoutingResponse">>;
msg_name_to_fqbin(routing_request) -> <<"helium.RoutingRequest">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).

-spec fqbin_to_enum_name(_) -> no_return().
fqbin_to_enum_name(E) ->
    error({gpb_error, {badenum, E}}).

-spec enum_name_to_fqbin(_) -> no_return().
enum_name_to_fqbin(E) ->
    error({gpb_error, {badenum, E}}).

get_package_name() -> helium.

%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> true.

source_basename() -> "validator.proto".

%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() -> ["validator.proto"].

%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["validator"].

get_msg_containment("validator") ->
    [routing, routing_request, routing_response];
get_msg_containment(P) ->
    error({gpb_error, {badproto, P}}).

get_pkg_containment("validator") -> helium;
get_pkg_containment(P) -> error({gpb_error, {badproto, P}}).

get_service_containment("validator") ->
    ['helium.validator'];
get_service_containment(P) ->
    error({gpb_error, {badproto, P}}).

get_rpc_containment("validator") ->
    [{'helium.validator', routing}];
get_rpc_containment(P) ->
    error({gpb_error, {badproto, P}}).

get_enum_containment("validator") -> [];
get_enum_containment(P) -> error({gpb_error, {badproto, P}}).

get_proto_by_msg_name_as_fqbin(<<"helium.RoutingRequest">>) -> "validator";
get_proto_by_msg_name_as_fqbin(<<"helium.RoutingResponse">>) -> "validator";
get_proto_by_msg_name_as_fqbin(<<"helium.Routing">>) -> "validator";
get_proto_by_msg_name_as_fqbin(E) -> error({gpb_error, {badmsg, E}}).

get_proto_by_service_name_as_fqbin(<<"helium.validator">>) ->
    "validator";
get_proto_by_service_name_as_fqbin(E) ->
    error({gpb_error, {badservice, E}}).

-spec get_proto_by_enum_name_as_fqbin(_) -> no_return().
get_proto_by_enum_name_as_fqbin(E) ->
    error({gpb_error, {badenum, E}}).

get_protos_by_pkg_name_as_fqbin(<<"helium">>) ->
    ["validator"];
get_protos_by_pkg_name_as_fqbin(E) ->
    error({gpb_error, {badpkg, E}}).

descriptor() ->
    <<10, 203, 2, 10, 22, 104, 101, 108, 105, 117, 109, 47, 118, 97, 108, 105, 100, 97, 116, 111,
        114, 46, 112, 114, 111, 116, 111, 18, 6, 104, 101, 108, 105, 117, 109, 34, 89, 10, 7, 82,
        111, 117, 116, 105, 110, 103, 18, 11, 10, 3, 111, 117, 105, 24, 1, 32, 1, 40, 13, 18, 13,
        10, 5, 111, 119, 110, 101, 114, 24, 2, 32, 1, 40, 12, 18, 17, 10, 9, 97, 100, 100, 114, 101,
        115, 115, 101, 115, 24, 3, 32, 3, 40, 12, 18, 15, 10, 7, 102, 105, 108, 116, 101, 114, 115,
        24, 4, 32, 3, 40, 12, 18, 14, 10, 6, 115, 117, 98, 110, 101, 116, 24, 5, 32, 3, 40, 12, 34,
        32, 10, 14, 82, 111, 117, 116, 105, 110, 103, 82, 101, 113, 117, 101, 115, 116, 18, 14, 10,
        6, 104, 101, 105, 103, 104, 116, 24, 1, 32, 1, 40, 4, 34, 87, 10, 15, 82, 111, 117, 116,
        105, 110, 103, 82, 101, 115, 112, 111, 110, 115, 101, 18, 33, 10, 8, 114, 111, 117, 116,
        105, 110, 103, 115, 24, 1, 32, 3, 40, 11, 50, 15, 46, 104, 101, 108, 105, 117, 109, 46, 82,
        111, 117, 116, 105, 110, 103, 18, 14, 10, 6, 104, 101, 105, 103, 104, 116, 24, 2, 32, 1, 40,
        13, 18, 17, 10, 9, 115, 105, 103, 110, 97, 116, 117, 114, 101, 24, 3, 32, 1, 40, 12, 50, 75,
        10, 9, 118, 97, 108, 105, 100, 97, 116, 111, 114, 18, 62, 10, 7, 114, 111, 117, 116, 105,
        110, 103, 18, 22, 46, 104, 101, 108, 105, 117, 109, 46, 82, 111, 117, 116, 105, 110, 103,
        82, 101, 113, 117, 101, 115, 116, 26, 23, 46, 104, 101, 108, 105, 117, 109, 46, 82, 111,
        117, 116, 105, 110, 103, 82, 101, 115, 112, 111, 110, 115, 101, 40, 0, 48, 0, 98, 6, 112,
        114, 111, 116, 111, 51>>.

descriptor("validator") ->
    <<10, 22, 104, 101, 108, 105, 117, 109, 47, 118, 97, 108, 105, 100, 97, 116, 111, 114, 46, 112,
        114, 111, 116, 111, 18, 6, 104, 101, 108, 105, 117, 109, 34, 89, 10, 7, 82, 111, 117, 116,
        105, 110, 103, 18, 11, 10, 3, 111, 117, 105, 24, 1, 32, 1, 40, 13, 18, 13, 10, 5, 111, 119,
        110, 101, 114, 24, 2, 32, 1, 40, 12, 18, 17, 10, 9, 97, 100, 100, 114, 101, 115, 115, 101,
        115, 24, 3, 32, 3, 40, 12, 18, 15, 10, 7, 102, 105, 108, 116, 101, 114, 115, 24, 4, 32, 3,
        40, 12, 18, 14, 10, 6, 115, 117, 98, 110, 101, 116, 24, 5, 32, 3, 40, 12, 34, 32, 10, 14,
        82, 111, 117, 116, 105, 110, 103, 82, 101, 113, 117, 101, 115, 116, 18, 14, 10, 6, 104, 101,
        105, 103, 104, 116, 24, 1, 32, 1, 40, 4, 34, 87, 10, 15, 82, 111, 117, 116, 105, 110, 103,
        82, 101, 115, 112, 111, 110, 115, 101, 18, 33, 10, 8, 114, 111, 117, 116, 105, 110, 103,
        115, 24, 1, 32, 3, 40, 11, 50, 15, 46, 104, 101, 108, 105, 117, 109, 46, 82, 111, 117, 116,
        105, 110, 103, 18, 14, 10, 6, 104, 101, 105, 103, 104, 116, 24, 2, 32, 1, 40, 13, 18, 17,
        10, 9, 115, 105, 103, 110, 97, 116, 117, 114, 101, 24, 3, 32, 1, 40, 12, 50, 75, 10, 9, 118,
        97, 108, 105, 100, 97, 116, 111, 114, 18, 62, 10, 7, 114, 111, 117, 116, 105, 110, 103, 18,
        22, 46, 104, 101, 108, 105, 117, 109, 46, 82, 111, 117, 116, 105, 110, 103, 82, 101, 113,
        117, 101, 115, 116, 26, 23, 46, 104, 101, 108, 105, 117, 109, 46, 82, 111, 117, 116, 105,
        110, 103, 82, 101, 115, 112, 111, 110, 115, 101, 40, 0, 48, 0, 98, 6, 112, 114, 111, 116,
        111, 51>>;
descriptor(X) ->
    error({gpb_error, {badname, X}}).

gpb_version_as_string() ->
    "4.7.3".

gpb_version_as_list() ->
    [4, 7, 3].
