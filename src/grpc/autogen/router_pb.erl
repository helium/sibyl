%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.7.3
-module(router_pb).

-export([encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/3, merge_msgs/4]).
-export([verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export(['enum_symbol_by_value_helium.Region'/1, 'enum_value_by_symbol_helium.Region'/1]).
-export([
    'enum_symbol_by_value_helium.blockchain_state_channel_state_v1'/1,
    'enum_value_by_symbol_helium.blockchain_state_channel_state_v1'/1
]).

-export(['enum_symbol_by_value_packet.packet_type'/1, 'enum_value_by_symbol_packet.packet_type'/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([descriptor/0, descriptor/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

%% enumerated types
-type 'helium.Region'() ::
    'US915' | 'EU868' | 'EU433' | 'CN470' | 'CN779' | 'AU915' | 'AS923' | 'KR920' | 'IN865'.

-type 'helium.blockchain_state_channel_state_v1'() :: 'open' | 'closed'.
-type 'packet.packet_type'() :: 'longfi' | 'lorawan'.

-export_type([
    'helium.Region'/0,
    'helium.blockchain_state_channel_state_v1'/0,
    'packet.packet_type'/0
]).

%% message types
-type blockchain_state_channel_summary_v_1() ::
    % = 1
    #{
        client_pubkeybin => iodata(),
        % = 2, 32 bits
        num_packets => non_neg_integer(),
        % = 3, 32 bits
        num_dcs => non_neg_integer()
    }.

-type blockchain_state_channel_v_1() ::
    % = 1
    #{
        id => iodata(),
        % = 2
        owner => iodata(),
        % = 3, 32 bits
        credits => non_neg_integer(),
        % = 4, 32 bits
        nonce => non_neg_integer(),
        % = 5
        summaries => [blockchain_state_channel_summary_v_1()],
        % = 6
        root_hash => iodata(),
        % = 7
        skewed => iodata(),
        % = 8, enum helium.blockchain_state_channel_state_v1
        state => 'open' | 'closed' | integer(),
        % = 9, 32 bits
        expire_at_block => non_neg_integer(),
        % = 10
        signature => iodata()
    }.

-type blockchain_state_channel_response_v_1() ::
    % = 1
    #{
        accepted => boolean() | 0 | 1,
        % = 4
        downlink => packet()
    }.

-type blockchain_state_channel_packet_v_1() ::
    % = 1
    #{
        packet => packet(),
        % = 2
        hotspot => iodata(),
        % = 3
        signature => iodata(),
        % = 4, enum helium.Region
        region =>
            'US915'
            | 'EU868'
            | 'EU433'
            | 'CN470'
            | 'CN779'
            | 'AU915'
            | 'AS923'
            | 'KR920'
            | 'IN865'
            | integer()
    }.

-type blockchain_state_channel_offer_v_1() ::
    % = 1
    #{
        routing => routing_information(),
        % = 2
        packet_hash => iodata(),
        % = 3, 32 bits
        payload_size => non_neg_integer(),
        % = 4, 32 bits
        fcnt => non_neg_integer(),
        % = 5
        hotspot => iodata(),
        % = 6
        signature => iodata(),
        % = 7, enum helium.Region
        region =>
            'US915'
            | 'EU868'
            | 'EU433'
            | 'CN470'
            | 'CN779'
            | 'AU915'
            | 'AS923'
            | 'KR920'
            | 'IN865'
            | integer()
    }.

-type blockchain_state_channel_purchase_v_1() ::
    % = 1
    #{
        sc => blockchain_state_channel_v_1(),
        % = 2
        hotspot => iodata(),
        % = 3
        packet_hash => iodata(),
        % = 4, enum helium.Region
        region =>
            'US915'
            | 'EU868'
            | 'EU433'
            | 'CN470'
            | 'CN779'
            | 'AU915'
            | 'AS923'
            | 'KR920'
            | 'IN865'
            | integer()
    }.

-type blockchain_state_channel_banner_v_1() ::
    % = 1
    #{sc => blockchain_state_channel_v_1()}.

-type blockchain_state_channel_rejection_v_1() ::
    % = 1, 32 bits
    #{reject => non_neg_integer()}.

-type blockchain_state_channel_message_v_1() ::
    % oneof
    #{
        msg =>
            {response, blockchain_state_channel_response_v_1()}
            | {packet, blockchain_state_channel_packet_v_1()}
            | {offer, blockchain_state_channel_offer_v_1()}
            | {purchase, blockchain_state_channel_purchase_v_1()}
            | {banner, blockchain_state_channel_banner_v_1()}
            | {reject, blockchain_state_channel_rejection_v_1()}
    }.

-type eui() ::
    % = 1, 32 bits
    #{
        deveui => non_neg_integer(),
        % = 2, 32 bits
        appeui => non_neg_integer()
    }.

-type routing_information() ::
    % oneof
    #{data => {devaddr, non_neg_integer()} | {eui, eui()}}.

-type window() ::
    % = 1, 32 bits
    #{
        timestamp => non_neg_integer(),
        % = 2
        frequency => float() | integer() | infinity | '-infinity' | nan,
        % = 3
        datarate => iodata()
    }.

-type packet() ::
    % = 1, 32 bits
    #{
        oui => non_neg_integer(),
        % = 2, enum packet.packet_type
        type => 'longfi' | 'lorawan' | integer(),
        % = 3
        payload => iodata(),
        % = 4, 32 bits
        timestamp => non_neg_integer(),
        % = 5
        signal_strength => float() | integer() | infinity | '-infinity' | nan,
        % = 6
        frequency => float() | integer() | infinity | '-infinity' | nan,
        % = 7
        datarate => iodata(),
        % = 8
        snr => float() | integer() | infinity | '-infinity' | nan,
        % = 9
        routing => routing_information(),
        % = 10
        rx2_window => window()
    }.

-export_type([
    'blockchain_state_channel_summary_v_1'/0,
    'blockchain_state_channel_v_1'/0,
    'blockchain_state_channel_response_v_1'/0,
    'blockchain_state_channel_packet_v_1'/0,
    'blockchain_state_channel_offer_v_1'/0,
    'blockchain_state_channel_purchase_v_1'/0,
    'blockchain_state_channel_banner_v_1'/0,
    'blockchain_state_channel_rejection_v_1'/0,
    'blockchain_state_channel_message_v_1'/0,
    'eui'/0,
    'routing_information'/0,
    'window'/0,
    'packet'/0
]).

-spec encode_msg(
    blockchain_state_channel_summary_v_1()
    | blockchain_state_channel_v_1()
    | blockchain_state_channel_response_v_1()
    | blockchain_state_channel_packet_v_1()
    | blockchain_state_channel_offer_v_1()
    | blockchain_state_channel_purchase_v_1()
    | blockchain_state_channel_banner_v_1()
    | blockchain_state_channel_rejection_v_1()
    | blockchain_state_channel_message_v_1()
    | eui()
    | routing_information()
    | window()
    | packet(),
    atom()
) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []).

-spec encode_msg(
    blockchain_state_channel_summary_v_1()
    | blockchain_state_channel_v_1()
    | blockchain_state_channel_response_v_1()
    | blockchain_state_channel_packet_v_1()
    | blockchain_state_channel_offer_v_1()
    | blockchain_state_channel_purchase_v_1()
    | blockchain_state_channel_banner_v_1()
    | blockchain_state_channel_rejection_v_1()
    | blockchain_state_channel_message_v_1()
    | eui()
    | routing_information()
    | window()
    | packet(),
    atom(),
    list()
) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
        true -> verify_msg(Msg, MsgName, Opts);
        false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        blockchain_state_channel_summary_v_1 ->
            encode_msg_blockchain_state_channel_summary_v_1(
                id(
                    Msg,
                    TrUserData
                ),
                TrUserData
            );
        blockchain_state_channel_v_1 ->
            encode_msg_blockchain_state_channel_v_1(
                id(
                    Msg,
                    TrUserData
                ),
                TrUserData
            );
        blockchain_state_channel_response_v_1 ->
            encode_msg_blockchain_state_channel_response_v_1(
                id(
                    Msg,
                    TrUserData
                ),
                TrUserData
            );
        blockchain_state_channel_packet_v_1 ->
            encode_msg_blockchain_state_channel_packet_v_1(
                id(
                    Msg,
                    TrUserData
                ),
                TrUserData
            );
        blockchain_state_channel_offer_v_1 ->
            encode_msg_blockchain_state_channel_offer_v_1(
                id(
                    Msg,
                    TrUserData
                ),
                TrUserData
            );
        blockchain_state_channel_purchase_v_1 ->
            encode_msg_blockchain_state_channel_purchase_v_1(
                id(
                    Msg,
                    TrUserData
                ),
                TrUserData
            );
        blockchain_state_channel_banner_v_1 ->
            encode_msg_blockchain_state_channel_banner_v_1(
                id(
                    Msg,
                    TrUserData
                ),
                TrUserData
            );
        blockchain_state_channel_rejection_v_1 ->
            encode_msg_blockchain_state_channel_rejection_v_1(
                id(
                    Msg,
                    TrUserData
                ),
                TrUserData
            );
        blockchain_state_channel_message_v_1 ->
            encode_msg_blockchain_state_channel_message_v_1(
                id(
                    Msg,
                    TrUserData
                ),
                TrUserData
            );
        eui ->
            encode_msg_eui(id(Msg, TrUserData), TrUserData);
        routing_information ->
            encode_msg_routing_information(
                id(Msg, TrUserData),
                TrUserData
            );
        window ->
            encode_msg_window(id(Msg, TrUserData), TrUserData);
        packet ->
            encode_msg_packet(id(Msg, TrUserData), TrUserData)
    end.

encode_msg_blockchain_state_channel_summary_v_1(
    Msg,
    TrUserData
) ->
    encode_msg_blockchain_state_channel_summary_v_1(
        Msg,
        <<>>,
        TrUserData
    ).

encode_msg_blockchain_state_channel_summary_v_1(
    #{} = M,
    Bin,
    TrUserData
) ->
    B1 =
        case M of
            #{client_pubkeybin := F1} ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end;
            _ ->
                Bin
        end,
    B2 =
        case M of
            #{num_packets := F2} ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if
                        TrF2 =:= 0 -> B1;
                        true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
                    end
                end;
            _ ->
                B1
        end,
    case M of
        #{num_dcs := F3} ->
            begin
                TrF3 = id(F3, TrUserData),
                if
                    TrF3 =:= 0 -> B2;
                    true -> e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
                end
            end;
        _ ->
            B2
    end.

encode_msg_blockchain_state_channel_v_1(
    Msg,
    TrUserData
) ->
    encode_msg_blockchain_state_channel_v_1(
        Msg,
        <<>>,
        TrUserData
    ).

encode_msg_blockchain_state_channel_v_1(
    #{} = M,
    Bin,
    TrUserData
) ->
    B1 =
        case M of
            #{id := F1} ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case iolist_size(TrF1) of
                        0 -> Bin;
                        _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end;
            _ ->
                Bin
        end,
    B2 =
        case M of
            #{owner := F2} ->
                begin
                    TrF2 = id(F2, TrUserData),
                    case iolist_size(TrF2) of
                        0 -> B1;
                        _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
                    end
                end;
            _ ->
                B1
        end,
    B3 =
        case M of
            #{credits := F3} ->
                begin
                    TrF3 = id(F3, TrUserData),
                    if
                        TrF3 =:= 0 -> B2;
                        true -> e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
                    end
                end;
            _ ->
                B2
        end,
    B4 =
        case M of
            #{nonce := F4} ->
                begin
                    TrF4 = id(F4, TrUserData),
                    if
                        TrF4 =:= 0 -> B3;
                        true -> e_varint(TrF4, <<B3/binary, 32>>, TrUserData)
                    end
                end;
            _ ->
                B3
        end,
    B5 =
        case M of
            #{summaries := F5} ->
                TrF5 = id(F5, TrUserData),
                if
                    TrF5 == [] ->
                        B4;
                    true ->
                        e_field_blockchain_state_channel_v_1_summaries(
                            TrF5,
                            B4,
                            TrUserData
                        )
                end;
            _ ->
                B4
        end,
    B6 =
        case M of
            #{root_hash := F6} ->
                begin
                    TrF6 = id(F6, TrUserData),
                    case iolist_size(TrF6) of
                        0 -> B5;
                        _ -> e_type_bytes(TrF6, <<B5/binary, 50>>, TrUserData)
                    end
                end;
            _ ->
                B5
        end,
    B7 =
        case M of
            #{skewed := F7} ->
                begin
                    TrF7 = id(F7, TrUserData),
                    case iolist_size(TrF7) of
                        0 -> B6;
                        _ -> e_type_bytes(TrF7, <<B6/binary, 58>>, TrUserData)
                    end
                end;
            _ ->
                B6
        end,
    B8 =
        case M of
            #{state := F8} ->
                begin
                    TrF8 = id(F8, TrUserData),
                    if
                        TrF8 =:= open; TrF8 =:= 0 ->
                            B7;
                        true ->
                            'e_enum_helium.blockchain_state_channel_state_v1'(
                                TrF8,
                                <<B7/binary, 64>>,
                                TrUserData
                            )
                    end
                end;
            _ ->
                B7
        end,
    B9 =
        case M of
            #{expire_at_block := F9} ->
                begin
                    TrF9 = id(F9, TrUserData),
                    if
                        TrF9 =:= 0 -> B8;
                        true -> e_varint(TrF9, <<B8/binary, 72>>, TrUserData)
                    end
                end;
            _ ->
                B8
        end,
    case M of
        #{signature := F10} ->
            begin
                TrF10 = id(F10, TrUserData),
                case iolist_size(TrF10) of
                    0 -> B9;
                    _ -> e_type_bytes(TrF10, <<B9/binary, 82>>, TrUserData)
                end
            end;
        _ ->
            B9
    end.

encode_msg_blockchain_state_channel_response_v_1(
    Msg,
    TrUserData
) ->
    encode_msg_blockchain_state_channel_response_v_1(
        Msg,
        <<>>,
        TrUserData
    ).

encode_msg_blockchain_state_channel_response_v_1(
    #{} =
        M,
    Bin,
    TrUserData
) ->
    B1 =
        case M of
            #{accepted := F1} ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if
                        TrF1 =:= false -> Bin;
                        true -> e_type_bool(TrF1, <<Bin/binary, 8>>, TrUserData)
                    end
                end;
            _ ->
                Bin
        end,
    case M of
        #{downlink := F2} ->
            begin
                TrF2 = id(F2, TrUserData),
                if
                    TrF2 =:= undefined ->
                        B1;
                    true ->
                        e_mfield_blockchain_state_channel_response_v_1_downlink(
                            TrF2,
                            <<B1/binary, 34>>,
                            TrUserData
                        )
                end
            end;
        _ ->
            B1
    end.

encode_msg_blockchain_state_channel_packet_v_1(
    Msg,
    TrUserData
) ->
    encode_msg_blockchain_state_channel_packet_v_1(
        Msg,
        <<>>,
        TrUserData
    ).

encode_msg_blockchain_state_channel_packet_v_1(
    #{} = M,
    Bin,
    TrUserData
) ->
    B1 =
        case M of
            #{packet := F1} ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if
                        TrF1 =:= undefined ->
                            Bin;
                        true ->
                            e_mfield_blockchain_state_channel_packet_v_1_packet(
                                TrF1,
                                <<Bin/binary, 10>>,
                                TrUserData
                            )
                    end
                end;
            _ ->
                Bin
        end,
    B2 =
        case M of
            #{hotspot := F2} ->
                begin
                    TrF2 = id(F2, TrUserData),
                    case iolist_size(TrF2) of
                        0 -> B1;
                        _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
                    end
                end;
            _ ->
                B1
        end,
    B3 =
        case M of
            #{signature := F3} ->
                begin
                    TrF3 = id(F3, TrUserData),
                    case iolist_size(TrF3) of
                        0 -> B2;
                        _ -> e_type_bytes(TrF3, <<B2/binary, 26>>, TrUserData)
                    end
                end;
            _ ->
                B2
        end,
    case M of
        #{region := F4} ->
            begin
                TrF4 = id(F4, TrUserData),
                if
                    TrF4 =:= 'US915'; TrF4 =:= 0 ->
                        B3;
                    true ->
                        'e_enum_helium.Region'(
                            TrF4,
                            <<B3/binary, 32>>,
                            TrUserData
                        )
                end
            end;
        _ ->
            B3
    end.

encode_msg_blockchain_state_channel_offer_v_1(
    Msg,
    TrUserData
) ->
    encode_msg_blockchain_state_channel_offer_v_1(
        Msg,
        <<>>,
        TrUserData
    ).

encode_msg_blockchain_state_channel_offer_v_1(
    #{} = M,
    Bin,
    TrUserData
) ->
    B1 =
        case M of
            #{routing := F1} ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if
                        TrF1 =:= undefined ->
                            Bin;
                        true ->
                            e_mfield_blockchain_state_channel_offer_v_1_routing(
                                TrF1,
                                <<Bin/binary, 10>>,
                                TrUserData
                            )
                    end
                end;
            _ ->
                Bin
        end,
    B2 =
        case M of
            #{packet_hash := F2} ->
                begin
                    TrF2 = id(F2, TrUserData),
                    case iolist_size(TrF2) of
                        0 -> B1;
                        _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
                    end
                end;
            _ ->
                B1
        end,
    B3 =
        case M of
            #{payload_size := F3} ->
                begin
                    TrF3 = id(F3, TrUserData),
                    if
                        TrF3 =:= 0 -> B2;
                        true -> e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
                    end
                end;
            _ ->
                B2
        end,
    B4 =
        case M of
            #{fcnt := F4} ->
                begin
                    TrF4 = id(F4, TrUserData),
                    if
                        TrF4 =:= 0 -> B3;
                        true -> e_varint(TrF4, <<B3/binary, 32>>, TrUserData)
                    end
                end;
            _ ->
                B3
        end,
    B5 =
        case M of
            #{hotspot := F5} ->
                begin
                    TrF5 = id(F5, TrUserData),
                    case iolist_size(TrF5) of
                        0 -> B4;
                        _ -> e_type_bytes(TrF5, <<B4/binary, 42>>, TrUserData)
                    end
                end;
            _ ->
                B4
        end,
    B6 =
        case M of
            #{signature := F6} ->
                begin
                    TrF6 = id(F6, TrUserData),
                    case iolist_size(TrF6) of
                        0 -> B5;
                        _ -> e_type_bytes(TrF6, <<B5/binary, 50>>, TrUserData)
                    end
                end;
            _ ->
                B5
        end,
    case M of
        #{region := F7} ->
            begin
                TrF7 = id(F7, TrUserData),
                if
                    TrF7 =:= 'US915'; TrF7 =:= 0 ->
                        B6;
                    true ->
                        'e_enum_helium.Region'(
                            TrF7,
                            <<B6/binary, 56>>,
                            TrUserData
                        )
                end
            end;
        _ ->
            B6
    end.

encode_msg_blockchain_state_channel_purchase_v_1(
    Msg,
    TrUserData
) ->
    encode_msg_blockchain_state_channel_purchase_v_1(
        Msg,
        <<>>,
        TrUserData
    ).

encode_msg_blockchain_state_channel_purchase_v_1(
    #{} =
        M,
    Bin,
    TrUserData
) ->
    B1 =
        case M of
            #{sc := F1} ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if
                        TrF1 =:= undefined ->
                            Bin;
                        true ->
                            e_mfield_blockchain_state_channel_purchase_v_1_sc(
                                TrF1,
                                <<Bin/binary, 10>>,
                                TrUserData
                            )
                    end
                end;
            _ ->
                Bin
        end,
    B2 =
        case M of
            #{hotspot := F2} ->
                begin
                    TrF2 = id(F2, TrUserData),
                    case iolist_size(TrF2) of
                        0 -> B1;
                        _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
                    end
                end;
            _ ->
                B1
        end,
    B3 =
        case M of
            #{packet_hash := F3} ->
                begin
                    TrF3 = id(F3, TrUserData),
                    case iolist_size(TrF3) of
                        0 -> B2;
                        _ -> e_type_bytes(TrF3, <<B2/binary, 26>>, TrUserData)
                    end
                end;
            _ ->
                B2
        end,
    case M of
        #{region := F4} ->
            begin
                TrF4 = id(F4, TrUserData),
                if
                    TrF4 =:= 'US915'; TrF4 =:= 0 ->
                        B3;
                    true ->
                        'e_enum_helium.Region'(
                            TrF4,
                            <<B3/binary, 32>>,
                            TrUserData
                        )
                end
            end;
        _ ->
            B3
    end.

encode_msg_blockchain_state_channel_banner_v_1(
    Msg,
    TrUserData
) ->
    encode_msg_blockchain_state_channel_banner_v_1(
        Msg,
        <<>>,
        TrUserData
    ).

encode_msg_blockchain_state_channel_banner_v_1(
    #{} = M,
    Bin,
    TrUserData
) ->
    case M of
        #{sc := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                if
                    TrF1 =:= undefined ->
                        Bin;
                    true ->
                        e_mfield_blockchain_state_channel_banner_v_1_sc(
                            TrF1,
                            <<Bin/binary, 10>>,
                            TrUserData
                        )
                end
            end;
        _ ->
            Bin
    end.

encode_msg_blockchain_state_channel_rejection_v_1(
    Msg,
    TrUserData
) ->
    encode_msg_blockchain_state_channel_rejection_v_1(
        Msg,
        <<>>,
        TrUserData
    ).

encode_msg_blockchain_state_channel_rejection_v_1(
    #{} =
        M,
    Bin,
    TrUserData
) ->
    case M of
        #{reject := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                if
                    TrF1 =:= 0 -> Bin;
                    true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
                end
            end;
        _ ->
            Bin
    end.

encode_msg_blockchain_state_channel_message_v_1(
    Msg,
    TrUserData
) ->
    encode_msg_blockchain_state_channel_message_v_1(
        Msg,
        <<>>,
        TrUserData
    ).

encode_msg_blockchain_state_channel_message_v_1(
    #{} = M,
    Bin,
    TrUserData
) ->
    case M of
        #{msg := F1} ->
            case id(F1, TrUserData) of
                {response, TF1} ->
                    begin
                        TrTF1 = id(TF1, TrUserData),
                        e_mfield_blockchain_state_channel_message_v_1_response(
                            TrTF1,
                            <<Bin/binary, 18>>,
                            TrUserData
                        )
                    end;
                {packet, TF1} ->
                    begin
                        TrTF1 = id(TF1, TrUserData),
                        e_mfield_blockchain_state_channel_message_v_1_packet(
                            TrTF1,
                            <<Bin/binary, 34>>,
                            TrUserData
                        )
                    end;
                {offer, TF1} ->
                    begin
                        TrTF1 = id(TF1, TrUserData),
                        e_mfield_blockchain_state_channel_message_v_1_offer(
                            TrTF1,
                            <<Bin/binary, 42>>,
                            TrUserData
                        )
                    end;
                {purchase, TF1} ->
                    begin
                        TrTF1 = id(TF1, TrUserData),
                        e_mfield_blockchain_state_channel_message_v_1_purchase(
                            TrTF1,
                            <<Bin/binary, 50>>,
                            TrUserData
                        )
                    end;
                {banner, TF1} ->
                    begin
                        TrTF1 = id(TF1, TrUserData),
                        e_mfield_blockchain_state_channel_message_v_1_banner(
                            TrTF1,
                            <<Bin/binary, 58>>,
                            TrUserData
                        )
                    end;
                {reject, TF1} ->
                    begin
                        TrTF1 = id(TF1, TrUserData),
                        e_mfield_blockchain_state_channel_message_v_1_reject(
                            TrTF1,
                            <<Bin/binary, 66>>,
                            TrUserData
                        )
                    end
            end;
        _ ->
            Bin
    end.

encode_msg_eui(Msg, TrUserData) ->
    encode_msg_eui(Msg, <<>>, TrUserData).

encode_msg_eui(#{} = M, Bin, TrUserData) ->
    B1 =
        case M of
            #{deveui := F1} ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if
                        TrF1 =:= 0 -> Bin;
                        true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
                    end
                end;
            _ ->
                Bin
        end,
    case M of
        #{appeui := F2} ->
            begin
                TrF2 = id(F2, TrUserData),
                if
                    TrF2 =:= 0 -> B1;
                    true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
                end
            end;
        _ ->
            B1
    end.

encode_msg_routing_information(Msg, TrUserData) ->
    encode_msg_routing_information(Msg, <<>>, TrUserData).

encode_msg_routing_information(
    #{} = M,
    Bin,
    TrUserData
) ->
    case M of
        #{data := F1} ->
            case id(F1, TrUserData) of
                {devaddr, TF1} ->
                    begin
                        TrTF1 = id(TF1, TrUserData),
                        e_varint(TrTF1, <<Bin/binary, 8>>, TrUserData)
                    end;
                {eui, TF1} ->
                    begin
                        TrTF1 = id(TF1, TrUserData),
                        e_mfield_routing_information_eui(
                            TrTF1,
                            <<Bin/binary, 18>>,
                            TrUserData
                        )
                    end
            end;
        _ ->
            Bin
    end.

encode_msg_window(Msg, TrUserData) ->
    encode_msg_window(Msg, <<>>, TrUserData).

encode_msg_window(#{} = M, Bin, TrUserData) ->
    B1 =
        case M of
            #{timestamp := F1} ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if
                        TrF1 =:= 0 -> Bin;
                        true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
                    end
                end;
            _ ->
                Bin
        end,
    B2 =
        case M of
            #{frequency := F2} ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if
                        TrF2 =:= 0.0 -> B1;
                        true -> e_type_float(TrF2, <<B1/binary, 21>>, TrUserData)
                    end
                end;
            _ ->
                B1
        end,
    case M of
        #{datarate := F3} ->
            begin
                TrF3 = id(F3, TrUserData),
                case is_empty_string(TrF3) of
                    true -> B2;
                    false -> e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
                end
            end;
        _ ->
            B2
    end.

encode_msg_packet(Msg, TrUserData) ->
    encode_msg_packet(Msg, <<>>, TrUserData).

encode_msg_packet(#{} = M, Bin, TrUserData) ->
    B1 =
        case M of
            #{oui := F1} ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if
                        TrF1 =:= 0 -> Bin;
                        true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
                    end
                end;
            _ ->
                Bin
        end,
    B2 =
        case M of
            #{type := F2} ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if
                        TrF2 =:= longfi; TrF2 =:= 0 ->
                            B1;
                        true ->
                            'e_enum_packet.packet_type'(
                                TrF2,
                                <<B1/binary, 16>>,
                                TrUserData
                            )
                    end
                end;
            _ ->
                B1
        end,
    B3 =
        case M of
            #{payload := F3} ->
                begin
                    TrF3 = id(F3, TrUserData),
                    case iolist_size(TrF3) of
                        0 -> B2;
                        _ -> e_type_bytes(TrF3, <<B2/binary, 26>>, TrUserData)
                    end
                end;
            _ ->
                B2
        end,
    B4 =
        case M of
            #{timestamp := F4} ->
                begin
                    TrF4 = id(F4, TrUserData),
                    if
                        TrF4 =:= 0 -> B3;
                        true -> e_varint(TrF4, <<B3/binary, 32>>, TrUserData)
                    end
                end;
            _ ->
                B3
        end,
    B5 =
        case M of
            #{signal_strength := F5} ->
                begin
                    TrF5 = id(F5, TrUserData),
                    if
                        TrF5 =:= 0.0 -> B4;
                        true -> e_type_float(TrF5, <<B4/binary, 45>>, TrUserData)
                    end
                end;
            _ ->
                B4
        end,
    B6 =
        case M of
            #{frequency := F6} ->
                begin
                    TrF6 = id(F6, TrUserData),
                    if
                        TrF6 =:= 0.0 -> B5;
                        true -> e_type_float(TrF6, <<B5/binary, 53>>, TrUserData)
                    end
                end;
            _ ->
                B5
        end,
    B7 =
        case M of
            #{datarate := F7} ->
                begin
                    TrF7 = id(F7, TrUserData),
                    case is_empty_string(TrF7) of
                        true -> B6;
                        false -> e_type_string(TrF7, <<B6/binary, 58>>, TrUserData)
                    end
                end;
            _ ->
                B6
        end,
    B8 =
        case M of
            #{snr := F8} ->
                begin
                    TrF8 = id(F8, TrUserData),
                    if
                        TrF8 =:= 0.0 -> B7;
                        true -> e_type_float(TrF8, <<B7/binary, 69>>, TrUserData)
                    end
                end;
            _ ->
                B7
        end,
    B9 =
        case M of
            #{routing := F9} ->
                begin
                    TrF9 = id(F9, TrUserData),
                    if
                        TrF9 =:= undefined ->
                            B8;
                        true ->
                            e_mfield_packet_routing(
                                TrF9,
                                <<B8/binary, 74>>,
                                TrUserData
                            )
                    end
                end;
            _ ->
                B8
        end,
    case M of
        #{rx2_window := F10} ->
            begin
                TrF10 = id(F10, TrUserData),
                if
                    TrF10 =:= undefined ->
                        B9;
                    true ->
                        e_mfield_packet_rx2_window(
                            TrF10,
                            <<B9/binary, 82>>,
                            TrUserData
                        )
                end
            end;
        _ ->
            B9
    end.

e_mfield_blockchain_state_channel_v_1_summaries(
    Msg,
    Bin,
    TrUserData
) ->
    SubBin =
        encode_msg_blockchain_state_channel_summary_v_1(
            Msg,
            <<>>,
            TrUserData
        ),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_blockchain_state_channel_v_1_summaries(
    [Elem | Rest],
    Bin,
    TrUserData
) ->
    Bin2 = <<Bin/binary, 42>>,
    Bin3 =
        e_mfield_blockchain_state_channel_v_1_summaries(
            id(
                Elem,
                TrUserData
            ),
            Bin2,
            TrUserData
        ),
    e_field_blockchain_state_channel_v_1_summaries(
        Rest,
        Bin3,
        TrUserData
    );
e_field_blockchain_state_channel_v_1_summaries(
    [],
    Bin,
    _TrUserData
) ->
    Bin.

e_mfield_blockchain_state_channel_response_v_1_downlink(
    Msg,
    Bin,
    TrUserData
) ->
    SubBin = encode_msg_packet(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_blockchain_state_channel_packet_v_1_packet(
    Msg,
    Bin,
    TrUserData
) ->
    SubBin = encode_msg_packet(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_blockchain_state_channel_offer_v_1_routing(
    Msg,
    Bin,
    TrUserData
) ->
    SubBin = encode_msg_routing_information(
        Msg,
        <<>>,
        TrUserData
    ),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_blockchain_state_channel_purchase_v_1_sc(
    Msg,
    Bin,
    TrUserData
) ->
    SubBin = encode_msg_blockchain_state_channel_v_1(
        Msg,
        <<>>,
        TrUserData
    ),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_blockchain_state_channel_banner_v_1_sc(
    Msg,
    Bin,
    TrUserData
) ->
    SubBin = encode_msg_blockchain_state_channel_v_1(
        Msg,
        <<>>,
        TrUserData
    ),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_blockchain_state_channel_message_v_1_response(
    Msg,
    Bin,
    TrUserData
) ->
    SubBin =
        encode_msg_blockchain_state_channel_response_v_1(
            Msg,
            <<>>,
            TrUserData
        ),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_blockchain_state_channel_message_v_1_packet(
    Msg,
    Bin,
    TrUserData
) ->
    SubBin =
        encode_msg_blockchain_state_channel_packet_v_1(
            Msg,
            <<>>,
            TrUserData
        ),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_blockchain_state_channel_message_v_1_offer(
    Msg,
    Bin,
    TrUserData
) ->
    SubBin =
        encode_msg_blockchain_state_channel_offer_v_1(
            Msg,
            <<>>,
            TrUserData
        ),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_blockchain_state_channel_message_v_1_purchase(
    Msg,
    Bin,
    TrUserData
) ->
    SubBin =
        encode_msg_blockchain_state_channel_purchase_v_1(
            Msg,
            <<>>,
            TrUserData
        ),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_blockchain_state_channel_message_v_1_banner(
    Msg,
    Bin,
    TrUserData
) ->
    SubBin =
        encode_msg_blockchain_state_channel_banner_v_1(
            Msg,
            <<>>,
            TrUserData
        ),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_blockchain_state_channel_message_v_1_reject(
    Msg,
    Bin,
    TrUserData
) ->
    SubBin =
        encode_msg_blockchain_state_channel_rejection_v_1(
            Msg,
            <<>>,
            TrUserData
        ),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_routing_information_eui(
    Msg,
    Bin,
    TrUserData
) ->
    SubBin = encode_msg_eui(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_packet_routing(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_routing_information(
        Msg,
        <<>>,
        TrUserData
    ),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_packet_rx2_window(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_window(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_enum_helium.Region'('US915', Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_helium.Region'('EU868', Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_helium.Region'('EU433', Bin, _TrUserData) ->
    <<Bin/binary, 2>>;
'e_enum_helium.Region'('CN470', Bin, _TrUserData) ->
    <<Bin/binary, 3>>;
'e_enum_helium.Region'('CN779', Bin, _TrUserData) ->
    <<Bin/binary, 4>>;
'e_enum_helium.Region'('AU915', Bin, _TrUserData) ->
    <<Bin/binary, 5>>;
'e_enum_helium.Region'('AS923', Bin, _TrUserData) ->
    <<Bin/binary, 6>>;
'e_enum_helium.Region'('KR920', Bin, _TrUserData) ->
    <<Bin/binary, 7>>;
'e_enum_helium.Region'('IN865', Bin, _TrUserData) ->
    <<Bin/binary, 8>>;
'e_enum_helium.Region'(V, Bin, _TrUserData) ->
    e_varint(V, Bin).

'e_enum_helium.blockchain_state_channel_state_v1'(
    open,
    Bin,
    _TrUserData
) ->
    <<Bin/binary, 0>>;
'e_enum_helium.blockchain_state_channel_state_v1'(
    closed,
    Bin,
    _TrUserData
) ->
    <<Bin/binary, 1>>;
'e_enum_helium.blockchain_state_channel_state_v1'(
    V,
    Bin,
    _TrUserData
) ->
    e_varint(V, Bin).

'e_enum_packet.packet_type'(longfi, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_packet.packet_type'(
    lorawan,
    Bin,
    _TrUserData
) ->
    <<Bin/binary, 1>>;
'e_enum_packet.packet_type'(V, Bin, _TrUserData) ->
    e_varint(V, Bin).

-compile({nowarn_unused_function, e_type_sint/3}).

e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function, e_type_int32/3}).

e_type_int32(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function, e_type_int64/3}).

e_type_int64(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function, e_type_bool/3}).

e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) ->
    <<Bin/binary, 0>>.

-compile({nowarn_unused_function, e_type_string/3}).

e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function, e_type_bytes/3}).

e_type_bytes(Bytes, Bin, _TrUserData) when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData) when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function, e_type_fixed32/3}).

e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function, e_type_sfixed32/3}).

e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function, e_type_fixed64/3}).

e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function, e_type_sfixed64/3}).

e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function, e_type_float/3}).

e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function, e_type_double/3}).

e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function, e_varint/3}).

e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function, e_varint/2}).

e_varint(N, Bin) when N =< 127 ->
    <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

is_empty_string("") ->
    true;
is_empty_string(<<>>) ->
    true;
is_empty_string(L) when is_list(L) ->
    not string_has_chars(L);
is_empty_string(B) when is_binary(B) ->
    false.

string_has_chars([C | _]) when is_integer(C) ->
    true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
        true -> true;
        false -> string_has_chars(T)
    end;
string_has_chars(B) when is_binary(B), byte_size(B) =/= 0 ->
    true;
string_has_chars(C) when is_integer(C) ->
    true;
string_has_chars(<<>>) ->
    false;
string_has_chars([]) ->
    false.

decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try
        decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch
        Class:Reason:StackTrace ->
            error({gpb_error, {decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try
        decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch
        Class:Reason ->
            StackTrace = erlang:get_stacktrace(),
            error({gpb_error, {decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit(
    blockchain_state_channel_summary_v_1,
    Bin,
    TrUserData
) ->
    id(
        decode_msg_blockchain_state_channel_summary_v_1(
            Bin,
            TrUserData
        ),
        TrUserData
    );
decode_msg_2_doit(
    blockchain_state_channel_v_1,
    Bin,
    TrUserData
) ->
    id(
        decode_msg_blockchain_state_channel_v_1(
            Bin,
            TrUserData
        ),
        TrUserData
    );
decode_msg_2_doit(
    blockchain_state_channel_response_v_1,
    Bin,
    TrUserData
) ->
    id(
        decode_msg_blockchain_state_channel_response_v_1(
            Bin,
            TrUserData
        ),
        TrUserData
    );
decode_msg_2_doit(
    blockchain_state_channel_packet_v_1,
    Bin,
    TrUserData
) ->
    id(
        decode_msg_blockchain_state_channel_packet_v_1(
            Bin,
            TrUserData
        ),
        TrUserData
    );
decode_msg_2_doit(
    blockchain_state_channel_offer_v_1,
    Bin,
    TrUserData
) ->
    id(
        decode_msg_blockchain_state_channel_offer_v_1(
            Bin,
            TrUserData
        ),
        TrUserData
    );
decode_msg_2_doit(
    blockchain_state_channel_purchase_v_1,
    Bin,
    TrUserData
) ->
    id(
        decode_msg_blockchain_state_channel_purchase_v_1(
            Bin,
            TrUserData
        ),
        TrUserData
    );
decode_msg_2_doit(
    blockchain_state_channel_banner_v_1,
    Bin,
    TrUserData
) ->
    id(
        decode_msg_blockchain_state_channel_banner_v_1(
            Bin,
            TrUserData
        ),
        TrUserData
    );
decode_msg_2_doit(
    blockchain_state_channel_rejection_v_1,
    Bin,
    TrUserData
) ->
    id(
        decode_msg_blockchain_state_channel_rejection_v_1(
            Bin,
            TrUserData
        ),
        TrUserData
    );
decode_msg_2_doit(
    blockchain_state_channel_message_v_1,
    Bin,
    TrUserData
) ->
    id(
        decode_msg_blockchain_state_channel_message_v_1(
            Bin,
            TrUserData
        ),
        TrUserData
    );
decode_msg_2_doit(eui, Bin, TrUserData) ->
    id(decode_msg_eui(Bin, TrUserData), TrUserData);
decode_msg_2_doit(
    routing_information,
    Bin,
    TrUserData
) ->
    id(
        decode_msg_routing_information(Bin, TrUserData),
        TrUserData
    );
decode_msg_2_doit(window, Bin, TrUserData) ->
    id(decode_msg_window(Bin, TrUserData), TrUserData);
decode_msg_2_doit(packet, Bin, TrUserData) ->
    id(decode_msg_packet(Bin, TrUserData), TrUserData).

decode_msg_blockchain_state_channel_summary_v_1(
    Bin,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_summary_v_1(
        Bin,
        0,
        0,
        id(
            <<>>,
            TrUserData
        ),
        id(0, TrUserData),
        id(0, TrUserData),
        TrUserData
    ).

dfp_read_field_def_blockchain_state_channel_summary_v_1(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    d_field_blockchain_state_channel_summary_v_1_client_pubkeybin(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_summary_v_1(
    <<16, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    d_field_blockchain_state_channel_summary_v_1_num_packets(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_summary_v_1(
    <<24, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    d_field_blockchain_state_channel_summary_v_1_num_dcs(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_summary_v_1(
    <<>>,
    0,
    0,
    F@_1,
    F@_2,
    F@_3,
    _
) ->
    #{
        client_pubkeybin => F@_1,
        num_packets => F@_2,
        num_dcs => F@_3
    };
dfp_read_field_def_blockchain_state_channel_summary_v_1(
    Other,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    dg_read_field_def_blockchain_state_channel_summary_v_1(
        Other,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

dg_read_field_def_blockchain_state_channel_summary_v_1(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 32 - 7 ->
    dg_read_field_def_blockchain_state_channel_summary_v_1(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
dg_read_field_def_blockchain_state_channel_summary_v_1(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_blockchain_state_channel_summary_v_1_client_pubkeybin(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                TrUserData
            );
        16 ->
            d_field_blockchain_state_channel_summary_v_1_num_packets(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                TrUserData
            );
        24 ->
            d_field_blockchain_state_channel_summary_v_1_num_dcs(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_blockchain_state_channel_summary_v_1(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                1 ->
                    skip_64_blockchain_state_channel_summary_v_1(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                2 ->
                    skip_length_delimited_blockchain_state_channel_summary_v_1(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                3 ->
                    skip_group_blockchain_state_channel_summary_v_1(
                        Rest,
                        Key bsr 3,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                5 ->
                    skip_32_blockchain_state_channel_summary_v_1(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    )
            end
    end;
dg_read_field_def_blockchain_state_channel_summary_v_1(
    <<>>,
    0,
    0,
    F@_1,
    F@_2,
    F@_3,
    _
) ->
    #{
        client_pubkeybin => F@_1,
        num_packets => F@_2,
        num_dcs => F@_3
    }.

d_field_blockchain_state_channel_summary_v_1_client_pubkeybin(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_summary_v_1_client_pubkeybin(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
d_field_blockchain_state_channel_summary_v_1_client_pubkeybin(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_2,
    F@_3,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        {id(binary:copy(Bytes), TrUserData), Rest2}
    end,
    dfp_read_field_def_blockchain_state_channel_summary_v_1(
        RestF,
        0,
        0,
        NewFValue,
        F@_2,
        F@_3,
        TrUserData
    ).

d_field_blockchain_state_channel_summary_v_1_num_packets(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_summary_v_1_num_packets(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
d_field_blockchain_state_channel_summary_v_1_num_packets(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    _,
    F@_3,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_blockchain_state_channel_summary_v_1(
        RestF,
        0,
        0,
        F@_1,
        NewFValue,
        F@_3,
        TrUserData
    ).

d_field_blockchain_state_channel_summary_v_1_num_dcs(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_summary_v_1_num_dcs(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
d_field_blockchain_state_channel_summary_v_1_num_dcs(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_blockchain_state_channel_summary_v_1(
        RestF,
        0,
        0,
        F@_1,
        F@_2,
        NewFValue,
        TrUserData
    ).

skip_varint_blockchain_state_channel_summary_v_1(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    skip_varint_blockchain_state_channel_summary_v_1(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
skip_varint_blockchain_state_channel_summary_v_1(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_summary_v_1(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

skip_length_delimited_blockchain_state_channel_summary_v_1(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    skip_length_delimited_blockchain_state_channel_summary_v_1(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
skip_length_delimited_blockchain_state_channel_summary_v_1(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_blockchain_state_channel_summary_v_1(
        Rest2,
        0,
        0,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

skip_group_blockchain_state_channel_summary_v_1(
    Bin,
    FNum,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_blockchain_state_channel_summary_v_1(
        Rest,
        0,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

skip_32_blockchain_state_channel_summary_v_1(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_summary_v_1(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

skip_64_blockchain_state_channel_summary_v_1(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_summary_v_1(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

decode_msg_blockchain_state_channel_v_1(
    Bin,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_v_1(
        Bin,
        0,
        0,
        id(<<>>, TrUserData),
        id(<<>>, TrUserData),
        id(0, TrUserData),
        id(0, TrUserData),
        id([], TrUserData),
        id(<<>>, TrUserData),
        id(<<>>, TrUserData),
        id(open, TrUserData),
        id(0, TrUserData),
        id(<<>>, TrUserData),
        TrUserData
    ).

dfp_read_field_def_blockchain_state_channel_v_1(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    d_field_blockchain_state_channel_v_1_id(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_v_1(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    d_field_blockchain_state_channel_v_1_owner(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_v_1(
    <<24, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    d_field_blockchain_state_channel_v_1_credits(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_v_1(
    <<32, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    d_field_blockchain_state_channel_v_1_nonce(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_v_1(
    <<42, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    d_field_blockchain_state_channel_v_1_summaries(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_v_1(
    <<50, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    d_field_blockchain_state_channel_v_1_root_hash(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_v_1(
    <<58, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    d_field_blockchain_state_channel_v_1_skewed(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_v_1(
    <<64, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    d_field_blockchain_state_channel_v_1_state(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_v_1(
    <<72, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    d_field_blockchain_state_channel_v_1_expire_at_block(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_v_1(
    <<82, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    d_field_blockchain_state_channel_v_1_signature(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_v_1(
    <<>>,
    0,
    0,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    R1,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    S1 = #{
        id => F@_1,
        owner => F@_2,
        credits => F@_3,
        nonce => F@_4,
        root_hash => F@_6,
        skewed => F@_7,
        state => F@_8,
        expire_at_block => F@_9,
        signature => F@_10
    },
    if
        R1 == '$undef' -> S1;
        true -> S1#{summaries => lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_blockchain_state_channel_v_1(
    Other,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    dg_read_field_def_blockchain_state_channel_v_1(
        Other,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

dg_read_field_def_blockchain_state_channel_v_1(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 32 - 7 ->
    dg_read_field_def_blockchain_state_channel_v_1(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
dg_read_field_def_blockchain_state_channel_v_1(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_blockchain_state_channel_v_1_id(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        18 ->
            d_field_blockchain_state_channel_v_1_owner(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        24 ->
            d_field_blockchain_state_channel_v_1_credits(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        32 ->
            d_field_blockchain_state_channel_v_1_nonce(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        42 ->
            d_field_blockchain_state_channel_v_1_summaries(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        50 ->
            d_field_blockchain_state_channel_v_1_root_hash(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        58 ->
            d_field_blockchain_state_channel_v_1_skewed(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        64 ->
            d_field_blockchain_state_channel_v_1_state(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        72 ->
            d_field_blockchain_state_channel_v_1_expire_at_block(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        82 ->
            d_field_blockchain_state_channel_v_1_signature(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_blockchain_state_channel_v_1(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        F@_9,
                        F@_10,
                        TrUserData
                    );
                1 ->
                    skip_64_blockchain_state_channel_v_1(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        F@_9,
                        F@_10,
                        TrUserData
                    );
                2 ->
                    skip_length_delimited_blockchain_state_channel_v_1(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        F@_9,
                        F@_10,
                        TrUserData
                    );
                3 ->
                    skip_group_blockchain_state_channel_v_1(
                        Rest,
                        Key bsr 3,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        F@_9,
                        F@_10,
                        TrUserData
                    );
                5 ->
                    skip_32_blockchain_state_channel_v_1(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        F@_9,
                        F@_10,
                        TrUserData
                    )
            end
    end;
dg_read_field_def_blockchain_state_channel_v_1(
    <<>>,
    0,
    0,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    R1,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    S1 = #{
        id => F@_1,
        owner => F@_2,
        credits => F@_3,
        nonce => F@_4,
        root_hash => F@_6,
        skewed => F@_7,
        state => F@_8,
        expire_at_block => F@_9,
        signature => F@_10
    },
    if
        R1 == '$undef' -> S1;
        true -> S1#{summaries => lists_reverse(R1, TrUserData)}
    end.

d_field_blockchain_state_channel_v_1_id(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_v_1_id(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
d_field_blockchain_state_channel_v_1_id(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        {id(binary:copy(Bytes), TrUserData), Rest2}
    end,
    dfp_read_field_def_blockchain_state_channel_v_1(
        RestF,
        0,
        0,
        NewFValue,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

d_field_blockchain_state_channel_v_1_owner(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_v_1_owner(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
d_field_blockchain_state_channel_v_1_owner(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    _,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        {id(binary:copy(Bytes), TrUserData), Rest2}
    end,
    dfp_read_field_def_blockchain_state_channel_v_1(
        RestF,
        0,
        0,
        F@_1,
        NewFValue,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

d_field_blockchain_state_channel_v_1_credits(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_v_1_credits(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
d_field_blockchain_state_channel_v_1_credits(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    _,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_blockchain_state_channel_v_1(
        RestF,
        0,
        0,
        F@_1,
        F@_2,
        NewFValue,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

d_field_blockchain_state_channel_v_1_nonce(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_v_1_nonce(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
d_field_blockchain_state_channel_v_1_nonce(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    _,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_blockchain_state_channel_v_1(
        RestF,
        0,
        0,
        F@_1,
        F@_2,
        F@_3,
        NewFValue,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

d_field_blockchain_state_channel_v_1_summaries(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_v_1_summaries(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
d_field_blockchain_state_channel_v_1_summaries(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    Prev,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id(
                decode_msg_blockchain_state_channel_summary_v_1(
                    Bs,
                    TrUserData
                ),
                TrUserData
            ),
            Rest2}
    end,
    dfp_read_field_def_blockchain_state_channel_v_1(
        RestF,
        0,
        0,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        cons(
            NewFValue,
            Prev,
            TrUserData
        ),
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

d_field_blockchain_state_channel_v_1_root_hash(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_v_1_root_hash(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
d_field_blockchain_state_channel_v_1_root_hash(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    _,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        {id(binary:copy(Bytes), TrUserData), Rest2}
    end,
    dfp_read_field_def_blockchain_state_channel_v_1(
        RestF,
        0,
        0,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        NewFValue,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

d_field_blockchain_state_channel_v_1_skewed(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_v_1_skewed(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
d_field_blockchain_state_channel_v_1_skewed(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    _,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        {id(binary:copy(Bytes), TrUserData), Rest2}
    end,
    dfp_read_field_def_blockchain_state_channel_v_1(
        RestF,
        0,
        0,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        NewFValue,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

d_field_blockchain_state_channel_v_1_state(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_v_1_state(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
d_field_blockchain_state_channel_v_1_state(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    _,
    F@_9,
    F@_10,
    TrUserData
) ->
    {NewFValue, RestF} =
        {id(
                'd_enum_helium.blockchain_state_channel_state_v1'(begin
                    <<Res:32/signed-native>> =
                        <<(X bsl N +
                                Acc):32/unsigned-native>>,
                    id(
                        Res,
                        TrUserData
                    )
                end),
                TrUserData
            ),
            Rest},
    dfp_read_field_def_blockchain_state_channel_v_1(
        RestF,
        0,
        0,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        NewFValue,
        F@_9,
        F@_10,
        TrUserData
    ).

d_field_blockchain_state_channel_v_1_expire_at_block(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_v_1_expire_at_block(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
d_field_blockchain_state_channel_v_1_expire_at_block(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    _,
    F@_10,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_blockchain_state_channel_v_1(
        RestF,
        0,
        0,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        NewFValue,
        F@_10,
        TrUserData
    ).

d_field_blockchain_state_channel_v_1_signature(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_v_1_signature(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
d_field_blockchain_state_channel_v_1_signature(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        {id(binary:copy(Bytes), TrUserData), Rest2}
    end,
    dfp_read_field_def_blockchain_state_channel_v_1(
        RestF,
        0,
        0,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        NewFValue,
        TrUserData
    ).

skip_varint_blockchain_state_channel_v_1(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    skip_varint_blockchain_state_channel_v_1(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
skip_varint_blockchain_state_channel_v_1(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_v_1(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

skip_length_delimited_blockchain_state_channel_v_1(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    skip_length_delimited_blockchain_state_channel_v_1(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
skip_length_delimited_blockchain_state_channel_v_1(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_blockchain_state_channel_v_1(
        Rest2,
        0,
        0,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

skip_group_blockchain_state_channel_v_1(
    Bin,
    FNum,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_blockchain_state_channel_v_1(
        Rest,
        0,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

skip_32_blockchain_state_channel_v_1(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_v_1(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

skip_64_blockchain_state_channel_v_1(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_v_1(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

decode_msg_blockchain_state_channel_response_v_1(
    Bin,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_response_v_1(
        Bin,
        0,
        0,
        id(
            false,
            TrUserData
        ),
        id(
            '$undef',
            TrUserData
        ),
        TrUserData
    ).

dfp_read_field_def_blockchain_state_channel_response_v_1(
    <<8, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    d_field_blockchain_state_channel_response_v_1_accepted(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_response_v_1(
    <<34, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    d_field_blockchain_state_channel_response_v_1_downlink(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_response_v_1(
    <<>>,
    0,
    0,
    F@_1,
    F@_2,
    _
) ->
    S1 = #{accepted => F@_1},
    if
        F@_2 == '$undef' -> S1;
        true -> S1#{downlink => F@_2}
    end;
dfp_read_field_def_blockchain_state_channel_response_v_1(
    Other,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    dg_read_field_def_blockchain_state_channel_response_v_1(
        Other,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    ).

dg_read_field_def_blockchain_state_channel_response_v_1(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) when N < 32 - 7 ->
    dg_read_field_def_blockchain_state_channel_response_v_1(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        TrUserData
    );
dg_read_field_def_blockchain_state_channel_response_v_1(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            d_field_blockchain_state_channel_response_v_1_accepted(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                TrUserData
            );
        34 ->
            d_field_blockchain_state_channel_response_v_1_downlink(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_blockchain_state_channel_response_v_1(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                1 ->
                    skip_64_blockchain_state_channel_response_v_1(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                2 ->
                    skip_length_delimited_blockchain_state_channel_response_v_1(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                3 ->
                    skip_group_blockchain_state_channel_response_v_1(
                        Rest,
                        Key bsr 3,
                        0,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                5 ->
                    skip_32_blockchain_state_channel_response_v_1(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        TrUserData
                    )
            end
    end;
dg_read_field_def_blockchain_state_channel_response_v_1(
    <<>>,
    0,
    0,
    F@_1,
    F@_2,
    _
) ->
    S1 = #{accepted => F@_1},
    if
        F@_2 == '$undef' -> S1;
        true -> S1#{downlink => F@_2}
    end.

d_field_blockchain_state_channel_response_v_1_accepted(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_response_v_1_accepted(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        TrUserData
    );
d_field_blockchain_state_channel_response_v_1_accepted(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_2,
    TrUserData
) ->
    {NewFValue, RestF} =
        {id(
                X bsl N + Acc =/= 0,
                TrUserData
            ),
            Rest},
    dfp_read_field_def_blockchain_state_channel_response_v_1(
        RestF,
        0,
        0,
        NewFValue,
        F@_2,
        TrUserData
    ).

d_field_blockchain_state_channel_response_v_1_downlink(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_response_v_1_downlink(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        TrUserData
    );
d_field_blockchain_state_channel_response_v_1_downlink(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id(decode_msg_packet(Bs, TrUserData), TrUserData), Rest2}
    end,
    dfp_read_field_def_blockchain_state_channel_response_v_1(
        RestF,
        0,
        0,
        F@_1,
        if
            Prev ==
                '$undef' ->
                NewFValue;
            true ->
                merge_msg_packet(
                    Prev,
                    NewFValue,
                    TrUserData
                )
        end,
        TrUserData
    ).

skip_varint_blockchain_state_channel_response_v_1(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    skip_varint_blockchain_state_channel_response_v_1(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    );
skip_varint_blockchain_state_channel_response_v_1(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_response_v_1(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    ).

skip_length_delimited_blockchain_state_channel_response_v_1(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    skip_length_delimited_blockchain_state_channel_response_v_1(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        TrUserData
    );
skip_length_delimited_blockchain_state_channel_response_v_1(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_blockchain_state_channel_response_v_1(
        Rest2,
        0,
        0,
        F@_1,
        F@_2,
        TrUserData
    ).

skip_group_blockchain_state_channel_response_v_1(
    Bin,
    FNum,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_blockchain_state_channel_response_v_1(
        Rest,
        0,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    ).

skip_32_blockchain_state_channel_response_v_1(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_response_v_1(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    ).

skip_64_blockchain_state_channel_response_v_1(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_response_v_1(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    ).

decode_msg_blockchain_state_channel_packet_v_1(
    Bin,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_packet_v_1(
        Bin,
        0,
        0,
        id(
            '$undef',
            TrUserData
        ),
        id(<<>>, TrUserData),
        id(<<>>, TrUserData),
        id(
            'US915',
            TrUserData
        ),
        TrUserData
    ).

dfp_read_field_def_blockchain_state_channel_packet_v_1(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    d_field_blockchain_state_channel_packet_v_1_packet(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_packet_v_1(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    d_field_blockchain_state_channel_packet_v_1_hotspot(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_packet_v_1(
    <<26, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    d_field_blockchain_state_channel_packet_v_1_signature(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_packet_v_1(
    <<32, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    d_field_blockchain_state_channel_packet_v_1_region(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_packet_v_1(
    <<>>,
    0,
    0,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    _
) ->
    S1 = #{
        hotspot => F@_2,
        signature => F@_3,
        region => F@_4
    },
    if
        F@_1 == '$undef' -> S1;
        true -> S1#{packet => F@_1}
    end;
dfp_read_field_def_blockchain_state_channel_packet_v_1(
    Other,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    dg_read_field_def_blockchain_state_channel_packet_v_1(
        Other,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    ).

dg_read_field_def_blockchain_state_channel_packet_v_1(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 32 - 7 ->
    dg_read_field_def_blockchain_state_channel_packet_v_1(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
dg_read_field_def_blockchain_state_channel_packet_v_1(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_blockchain_state_channel_packet_v_1_packet(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                TrUserData
            );
        18 ->
            d_field_blockchain_state_channel_packet_v_1_hotspot(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                TrUserData
            );
        26 ->
            d_field_blockchain_state_channel_packet_v_1_signature(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                TrUserData
            );
        32 ->
            d_field_blockchain_state_channel_packet_v_1_region(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_blockchain_state_channel_packet_v_1(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        TrUserData
                    );
                1 ->
                    skip_64_blockchain_state_channel_packet_v_1(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        TrUserData
                    );
                2 ->
                    skip_length_delimited_blockchain_state_channel_packet_v_1(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        TrUserData
                    );
                3 ->
                    skip_group_blockchain_state_channel_packet_v_1(
                        Rest,
                        Key bsr 3,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        TrUserData
                    );
                5 ->
                    skip_32_blockchain_state_channel_packet_v_1(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        TrUserData
                    )
            end
    end;
dg_read_field_def_blockchain_state_channel_packet_v_1(
    <<>>,
    0,
    0,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    _
) ->
    S1 = #{
        hotspot => F@_2,
        signature => F@_3,
        region => F@_4
    },
    if
        F@_1 == '$undef' -> S1;
        true -> S1#{packet => F@_1}
    end.

d_field_blockchain_state_channel_packet_v_1_packet(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_packet_v_1_packet(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
d_field_blockchain_state_channel_packet_v_1_packet(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    Prev,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id(decode_msg_packet(Bs, TrUserData), TrUserData), Rest2}
    end,
    dfp_read_field_def_blockchain_state_channel_packet_v_1(
        RestF,
        0,
        0,
        if
            Prev ==
                '$undef' ->
                NewFValue;
            true ->
                merge_msg_packet(
                    Prev,
                    NewFValue,
                    TrUserData
                )
        end,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    ).

d_field_blockchain_state_channel_packet_v_1_hotspot(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_packet_v_1_hotspot(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
d_field_blockchain_state_channel_packet_v_1_hotspot(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    _,
    F@_3,
    F@_4,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        {id(binary:copy(Bytes), TrUserData), Rest2}
    end,
    dfp_read_field_def_blockchain_state_channel_packet_v_1(
        RestF,
        0,
        0,
        F@_1,
        NewFValue,
        F@_3,
        F@_4,
        TrUserData
    ).

d_field_blockchain_state_channel_packet_v_1_signature(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_packet_v_1_signature(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
d_field_blockchain_state_channel_packet_v_1_signature(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    _,
    F@_4,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        {id(binary:copy(Bytes), TrUserData), Rest2}
    end,
    dfp_read_field_def_blockchain_state_channel_packet_v_1(
        RestF,
        0,
        0,
        F@_1,
        F@_2,
        NewFValue,
        F@_4,
        TrUserData
    ).

d_field_blockchain_state_channel_packet_v_1_region(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_packet_v_1_region(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
d_field_blockchain_state_channel_packet_v_1_region(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    _,
    TrUserData
) ->
    {NewFValue, RestF} =
        {id(
                'd_enum_helium.Region'(begin
                    <<Res:32/signed-native>> =
                        <<(X bsl N +
                                Acc):32/unsigned-native>>,
                    id(Res, TrUserData)
                end),
                TrUserData
            ),
            Rest},
    dfp_read_field_def_blockchain_state_channel_packet_v_1(
        RestF,
        0,
        0,
        F@_1,
        F@_2,
        F@_3,
        NewFValue,
        TrUserData
    ).

skip_varint_blockchain_state_channel_packet_v_1(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    skip_varint_blockchain_state_channel_packet_v_1(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
skip_varint_blockchain_state_channel_packet_v_1(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_packet_v_1(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    ).

skip_length_delimited_blockchain_state_channel_packet_v_1(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 57 ->
    skip_length_delimited_blockchain_state_channel_packet_v_1(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
skip_length_delimited_blockchain_state_channel_packet_v_1(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_blockchain_state_channel_packet_v_1(
        Rest2,
        0,
        0,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    ).

skip_group_blockchain_state_channel_packet_v_1(
    Bin,
    FNum,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_blockchain_state_channel_packet_v_1(
        Rest,
        0,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    ).

skip_32_blockchain_state_channel_packet_v_1(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_packet_v_1(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    ).

skip_64_blockchain_state_channel_packet_v_1(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_packet_v_1(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    ).

decode_msg_blockchain_state_channel_offer_v_1(
    Bin,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_offer_v_1(
        Bin,
        0,
        0,
        id(
            '$undef',
            TrUserData
        ),
        id(<<>>, TrUserData),
        id(0, TrUserData),
        id(0, TrUserData),
        id(<<>>, TrUserData),
        id(<<>>, TrUserData),
        id(
            'US915',
            TrUserData
        ),
        TrUserData
    ).

dfp_read_field_def_blockchain_state_channel_offer_v_1(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    d_field_blockchain_state_channel_offer_v_1_routing(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_offer_v_1(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    d_field_blockchain_state_channel_offer_v_1_packet_hash(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_offer_v_1(
    <<24, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    d_field_blockchain_state_channel_offer_v_1_payload_size(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_offer_v_1(
    <<32, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    d_field_blockchain_state_channel_offer_v_1_fcnt(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_offer_v_1(
    <<42, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    d_field_blockchain_state_channel_offer_v_1_hotspot(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_offer_v_1(
    <<50, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    d_field_blockchain_state_channel_offer_v_1_signature(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_offer_v_1(
    <<56, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    d_field_blockchain_state_channel_offer_v_1_region(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_offer_v_1(
    <<>>,
    0,
    0,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    _
) ->
    S1 = #{
        packet_hash => F@_2,
        payload_size => F@_3,
        fcnt => F@_4,
        hotspot => F@_5,
        signature => F@_6,
        region => F@_7
    },
    if
        F@_1 == '$undef' -> S1;
        true -> S1#{routing => F@_1}
    end;
dfp_read_field_def_blockchain_state_channel_offer_v_1(
    Other,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    dg_read_field_def_blockchain_state_channel_offer_v_1(
        Other,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    ).

dg_read_field_def_blockchain_state_channel_offer_v_1(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) when N < 32 - 7 ->
    dg_read_field_def_blockchain_state_channel_offer_v_1(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    );
dg_read_field_def_blockchain_state_channel_offer_v_1(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_blockchain_state_channel_offer_v_1_routing(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                TrUserData
            );
        18 ->
            d_field_blockchain_state_channel_offer_v_1_packet_hash(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                TrUserData
            );
        24 ->
            d_field_blockchain_state_channel_offer_v_1_payload_size(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                TrUserData
            );
        32 ->
            d_field_blockchain_state_channel_offer_v_1_fcnt(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                TrUserData
            );
        42 ->
            d_field_blockchain_state_channel_offer_v_1_hotspot(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                TrUserData
            );
        50 ->
            d_field_blockchain_state_channel_offer_v_1_signature(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                TrUserData
            );
        56 ->
            d_field_blockchain_state_channel_offer_v_1_region(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_blockchain_state_channel_offer_v_1(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        TrUserData
                    );
                1 ->
                    skip_64_blockchain_state_channel_offer_v_1(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        TrUserData
                    );
                2 ->
                    skip_length_delimited_blockchain_state_channel_offer_v_1(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        TrUserData
                    );
                3 ->
                    skip_group_blockchain_state_channel_offer_v_1(
                        Rest,
                        Key bsr 3,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        TrUserData
                    );
                5 ->
                    skip_32_blockchain_state_channel_offer_v_1(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        TrUserData
                    )
            end
    end;
dg_read_field_def_blockchain_state_channel_offer_v_1(
    <<>>,
    0,
    0,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    _
) ->
    S1 = #{
        packet_hash => F@_2,
        payload_size => F@_3,
        fcnt => F@_4,
        hotspot => F@_5,
        signature => F@_6,
        region => F@_7
    },
    if
        F@_1 == '$undef' -> S1;
        true -> S1#{routing => F@_1}
    end.

d_field_blockchain_state_channel_offer_v_1_routing(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_offer_v_1_routing(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    );
d_field_blockchain_state_channel_offer_v_1_routing(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    Prev,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id(
                decode_msg_routing_information(Bs, TrUserData),
                TrUserData
            ),
            Rest2}
    end,
    dfp_read_field_def_blockchain_state_channel_offer_v_1(
        RestF,
        0,
        0,
        if
            Prev == '$undef' ->
                NewFValue;
            true ->
                merge_msg_routing_information(
                    Prev,
                    NewFValue,
                    TrUserData
                )
        end,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    ).

d_field_blockchain_state_channel_offer_v_1_packet_hash(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_offer_v_1_packet_hash(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    );
d_field_blockchain_state_channel_offer_v_1_packet_hash(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    _,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        {id(binary:copy(Bytes), TrUserData), Rest2}
    end,
    dfp_read_field_def_blockchain_state_channel_offer_v_1(
        RestF,
        0,
        0,
        F@_1,
        NewFValue,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    ).

d_field_blockchain_state_channel_offer_v_1_payload_size(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_offer_v_1_payload_size(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    );
d_field_blockchain_state_channel_offer_v_1_payload_size(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    _,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_blockchain_state_channel_offer_v_1(
        RestF,
        0,
        0,
        F@_1,
        F@_2,
        NewFValue,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    ).

d_field_blockchain_state_channel_offer_v_1_fcnt(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_offer_v_1_fcnt(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    );
d_field_blockchain_state_channel_offer_v_1_fcnt(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    _,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_blockchain_state_channel_offer_v_1(
        RestF,
        0,
        0,
        F@_1,
        F@_2,
        F@_3,
        NewFValue,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    ).

d_field_blockchain_state_channel_offer_v_1_hotspot(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_offer_v_1_hotspot(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    );
d_field_blockchain_state_channel_offer_v_1_hotspot(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    _,
    F@_6,
    F@_7,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        {id(binary:copy(Bytes), TrUserData), Rest2}
    end,
    dfp_read_field_def_blockchain_state_channel_offer_v_1(
        RestF,
        0,
        0,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        NewFValue,
        F@_6,
        F@_7,
        TrUserData
    ).

d_field_blockchain_state_channel_offer_v_1_signature(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_offer_v_1_signature(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    );
d_field_blockchain_state_channel_offer_v_1_signature(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    _,
    F@_7,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        {id(binary:copy(Bytes), TrUserData), Rest2}
    end,
    dfp_read_field_def_blockchain_state_channel_offer_v_1(
        RestF,
        0,
        0,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        NewFValue,
        F@_7,
        TrUserData
    ).

d_field_blockchain_state_channel_offer_v_1_region(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_offer_v_1_region(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    );
d_field_blockchain_state_channel_offer_v_1_region(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    _,
    TrUserData
) ->
    {NewFValue, RestF} =
        {id(
                'd_enum_helium.Region'(begin
                    <<Res:32/signed-native>> =
                        <<(X bsl N +
                                Acc):32/unsigned-native>>,
                    id(Res, TrUserData)
                end),
                TrUserData
            ),
            Rest},
    dfp_read_field_def_blockchain_state_channel_offer_v_1(
        RestF,
        0,
        0,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        NewFValue,
        TrUserData
    ).

skip_varint_blockchain_state_channel_offer_v_1(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    skip_varint_blockchain_state_channel_offer_v_1(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    );
skip_varint_blockchain_state_channel_offer_v_1(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_offer_v_1(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    ).

skip_length_delimited_blockchain_state_channel_offer_v_1(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) when N < 57 ->
    skip_length_delimited_blockchain_state_channel_offer_v_1(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    );
skip_length_delimited_blockchain_state_channel_offer_v_1(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_blockchain_state_channel_offer_v_1(
        Rest2,
        0,
        0,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    ).

skip_group_blockchain_state_channel_offer_v_1(
    Bin,
    FNum,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_blockchain_state_channel_offer_v_1(
        Rest,
        0,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    ).

skip_32_blockchain_state_channel_offer_v_1(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_offer_v_1(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    ).

skip_64_blockchain_state_channel_offer_v_1(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_offer_v_1(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        TrUserData
    ).

decode_msg_blockchain_state_channel_purchase_v_1(
    Bin,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_purchase_v_1(
        Bin,
        0,
        0,
        id(
            '$undef',
            TrUserData
        ),
        id(
            <<>>,
            TrUserData
        ),
        id(
            <<>>,
            TrUserData
        ),
        id(
            'US915',
            TrUserData
        ),
        TrUserData
    ).

dfp_read_field_def_blockchain_state_channel_purchase_v_1(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    d_field_blockchain_state_channel_purchase_v_1_sc(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_purchase_v_1(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    d_field_blockchain_state_channel_purchase_v_1_hotspot(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_purchase_v_1(
    <<26, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    d_field_blockchain_state_channel_purchase_v_1_packet_hash(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_purchase_v_1(
    <<32, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    d_field_blockchain_state_channel_purchase_v_1_region(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_purchase_v_1(
    <<>>,
    0,
    0,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    _
) ->
    S1 = #{
        hotspot => F@_2,
        packet_hash => F@_3,
        region => F@_4
    },
    if
        F@_1 == '$undef' -> S1;
        true -> S1#{sc => F@_1}
    end;
dfp_read_field_def_blockchain_state_channel_purchase_v_1(
    Other,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    dg_read_field_def_blockchain_state_channel_purchase_v_1(
        Other,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    ).

dg_read_field_def_blockchain_state_channel_purchase_v_1(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 32 - 7 ->
    dg_read_field_def_blockchain_state_channel_purchase_v_1(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
dg_read_field_def_blockchain_state_channel_purchase_v_1(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_blockchain_state_channel_purchase_v_1_sc(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                TrUserData
            );
        18 ->
            d_field_blockchain_state_channel_purchase_v_1_hotspot(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                TrUserData
            );
        26 ->
            d_field_blockchain_state_channel_purchase_v_1_packet_hash(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                TrUserData
            );
        32 ->
            d_field_blockchain_state_channel_purchase_v_1_region(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_blockchain_state_channel_purchase_v_1(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        TrUserData
                    );
                1 ->
                    skip_64_blockchain_state_channel_purchase_v_1(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        TrUserData
                    );
                2 ->
                    skip_length_delimited_blockchain_state_channel_purchase_v_1(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        TrUserData
                    );
                3 ->
                    skip_group_blockchain_state_channel_purchase_v_1(
                        Rest,
                        Key bsr 3,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        TrUserData
                    );
                5 ->
                    skip_32_blockchain_state_channel_purchase_v_1(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        TrUserData
                    )
            end
    end;
dg_read_field_def_blockchain_state_channel_purchase_v_1(
    <<>>,
    0,
    0,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    _
) ->
    S1 = #{
        hotspot => F@_2,
        packet_hash => F@_3,
        region => F@_4
    },
    if
        F@_1 == '$undef' -> S1;
        true -> S1#{sc => F@_1}
    end.

d_field_blockchain_state_channel_purchase_v_1_sc(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_purchase_v_1_sc(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
d_field_blockchain_state_channel_purchase_v_1_sc(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    Prev,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id(
                decode_msg_blockchain_state_channel_v_1(
                    Bs,
                    TrUserData
                ),
                TrUserData
            ),
            Rest2}
    end,
    dfp_read_field_def_blockchain_state_channel_purchase_v_1(
        RestF,
        0,
        0,
        if
            Prev ==
                '$undef' ->
                NewFValue;
            true ->
                merge_msg_blockchain_state_channel_v_1(
                    Prev,
                    NewFValue,
                    TrUserData
                )
        end,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    ).

d_field_blockchain_state_channel_purchase_v_1_hotspot(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_purchase_v_1_hotspot(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
d_field_blockchain_state_channel_purchase_v_1_hotspot(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    _,
    F@_3,
    F@_4,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        {id(binary:copy(Bytes), TrUserData), Rest2}
    end,
    dfp_read_field_def_blockchain_state_channel_purchase_v_1(
        RestF,
        0,
        0,
        F@_1,
        NewFValue,
        F@_3,
        F@_4,
        TrUserData
    ).

d_field_blockchain_state_channel_purchase_v_1_packet_hash(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_purchase_v_1_packet_hash(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
d_field_blockchain_state_channel_purchase_v_1_packet_hash(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    _,
    F@_4,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        {id(binary:copy(Bytes), TrUserData), Rest2}
    end,
    dfp_read_field_def_blockchain_state_channel_purchase_v_1(
        RestF,
        0,
        0,
        F@_1,
        F@_2,
        NewFValue,
        F@_4,
        TrUserData
    ).

d_field_blockchain_state_channel_purchase_v_1_region(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_purchase_v_1_region(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
d_field_blockchain_state_channel_purchase_v_1_region(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    _,
    TrUserData
) ->
    {NewFValue, RestF} =
        {id(
                'd_enum_helium.Region'(begin
                    <<Res:32/signed-native>> =
                        <<(X bsl N +
                                Acc):32/unsigned-native>>,
                    id(Res, TrUserData)
                end),
                TrUserData
            ),
            Rest},
    dfp_read_field_def_blockchain_state_channel_purchase_v_1(
        RestF,
        0,
        0,
        F@_1,
        F@_2,
        F@_3,
        NewFValue,
        TrUserData
    ).

skip_varint_blockchain_state_channel_purchase_v_1(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    skip_varint_blockchain_state_channel_purchase_v_1(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
skip_varint_blockchain_state_channel_purchase_v_1(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_purchase_v_1(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    ).

skip_length_delimited_blockchain_state_channel_purchase_v_1(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 57 ->
    skip_length_delimited_blockchain_state_channel_purchase_v_1(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
skip_length_delimited_blockchain_state_channel_purchase_v_1(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_blockchain_state_channel_purchase_v_1(
        Rest2,
        0,
        0,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    ).

skip_group_blockchain_state_channel_purchase_v_1(
    Bin,
    FNum,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_blockchain_state_channel_purchase_v_1(
        Rest,
        0,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    ).

skip_32_blockchain_state_channel_purchase_v_1(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_purchase_v_1(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    ).

skip_64_blockchain_state_channel_purchase_v_1(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_purchase_v_1(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    ).

decode_msg_blockchain_state_channel_banner_v_1(
    Bin,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_banner_v_1(
        Bin,
        0,
        0,
        id(
            '$undef',
            TrUserData
        ),
        TrUserData
    ).

dfp_read_field_def_blockchain_state_channel_banner_v_1(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    TrUserData
) ->
    d_field_blockchain_state_channel_banner_v_1_sc(
        Rest,
        Z1,
        Z2,
        F@_1,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_banner_v_1(
    <<>>,
    0,
    0,
    F@_1,
    _
) ->
    S1 = #{},
    if
        F@_1 == '$undef' -> S1;
        true -> S1#{sc => F@_1}
    end;
dfp_read_field_def_blockchain_state_channel_banner_v_1(
    Other,
    Z1,
    Z2,
    F@_1,
    TrUserData
) ->
    dg_read_field_def_blockchain_state_channel_banner_v_1(
        Other,
        Z1,
        Z2,
        F@_1,
        TrUserData
    ).

dg_read_field_def_blockchain_state_channel_banner_v_1(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    TrUserData
) when N < 32 - 7 ->
    dg_read_field_def_blockchain_state_channel_banner_v_1(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        TrUserData
    );
dg_read_field_def_blockchain_state_channel_banner_v_1(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_blockchain_state_channel_banner_v_1_sc(
                Rest,
                0,
                0,
                F@_1,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_blockchain_state_channel_banner_v_1(
                        Rest,
                        0,
                        0,
                        F@_1,
                        TrUserData
                    );
                1 ->
                    skip_64_blockchain_state_channel_banner_v_1(
                        Rest,
                        0,
                        0,
                        F@_1,
                        TrUserData
                    );
                2 ->
                    skip_length_delimited_blockchain_state_channel_banner_v_1(
                        Rest,
                        0,
                        0,
                        F@_1,
                        TrUserData
                    );
                3 ->
                    skip_group_blockchain_state_channel_banner_v_1(
                        Rest,
                        Key bsr 3,
                        0,
                        F@_1,
                        TrUserData
                    );
                5 ->
                    skip_32_blockchain_state_channel_banner_v_1(
                        Rest,
                        0,
                        0,
                        F@_1,
                        TrUserData
                    )
            end
    end;
dg_read_field_def_blockchain_state_channel_banner_v_1(
    <<>>,
    0,
    0,
    F@_1,
    _
) ->
    S1 = #{},
    if
        F@_1 == '$undef' -> S1;
        true -> S1#{sc => F@_1}
    end.

d_field_blockchain_state_channel_banner_v_1_sc(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_banner_v_1_sc(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        TrUserData
    );
d_field_blockchain_state_channel_banner_v_1_sc(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id(
                decode_msg_blockchain_state_channel_v_1(
                    Bs,
                    TrUserData
                ),
                TrUserData
            ),
            Rest2}
    end,
    dfp_read_field_def_blockchain_state_channel_banner_v_1(
        RestF,
        0,
        0,
        if
            Prev ==
                '$undef' ->
                NewFValue;
            true ->
                merge_msg_blockchain_state_channel_v_1(
                    Prev,
                    NewFValue,
                    TrUserData
                )
        end,
        TrUserData
    ).

skip_varint_blockchain_state_channel_banner_v_1(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    TrUserData
) ->
    skip_varint_blockchain_state_channel_banner_v_1(
        Rest,
        Z1,
        Z2,
        F@_1,
        TrUserData
    );
skip_varint_blockchain_state_channel_banner_v_1(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_banner_v_1(
        Rest,
        Z1,
        Z2,
        F@_1,
        TrUserData
    ).

skip_length_delimited_blockchain_state_channel_banner_v_1(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    TrUserData
) when N < 57 ->
    skip_length_delimited_blockchain_state_channel_banner_v_1(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        TrUserData
    );
skip_length_delimited_blockchain_state_channel_banner_v_1(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_blockchain_state_channel_banner_v_1(
        Rest2,
        0,
        0,
        F@_1,
        TrUserData
    ).

skip_group_blockchain_state_channel_banner_v_1(
    Bin,
    FNum,
    Z2,
    F@_1,
    TrUserData
) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_blockchain_state_channel_banner_v_1(
        Rest,
        0,
        Z2,
        F@_1,
        TrUserData
    ).

skip_32_blockchain_state_channel_banner_v_1(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_banner_v_1(
        Rest,
        Z1,
        Z2,
        F@_1,
        TrUserData
    ).

skip_64_blockchain_state_channel_banner_v_1(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_banner_v_1(
        Rest,
        Z1,
        Z2,
        F@_1,
        TrUserData
    ).

decode_msg_blockchain_state_channel_rejection_v_1(
    Bin,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_rejection_v_1(
        Bin,
        0,
        0,
        id(0, TrUserData),
        TrUserData
    ).

dfp_read_field_def_blockchain_state_channel_rejection_v_1(
    <<8, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    TrUserData
) ->
    d_field_blockchain_state_channel_rejection_v_1_reject(
        Rest,
        Z1,
        Z2,
        F@_1,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_rejection_v_1(
    <<>>,
    0,
    0,
    F@_1,
    _
) ->
    #{reject => F@_1};
dfp_read_field_def_blockchain_state_channel_rejection_v_1(
    Other,
    Z1,
    Z2,
    F@_1,
    TrUserData
) ->
    dg_read_field_def_blockchain_state_channel_rejection_v_1(
        Other,
        Z1,
        Z2,
        F@_1,
        TrUserData
    ).

dg_read_field_def_blockchain_state_channel_rejection_v_1(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    TrUserData
) when N < 32 - 7 ->
    dg_read_field_def_blockchain_state_channel_rejection_v_1(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        TrUserData
    );
dg_read_field_def_blockchain_state_channel_rejection_v_1(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            d_field_blockchain_state_channel_rejection_v_1_reject(
                Rest,
                0,
                0,
                F@_1,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_blockchain_state_channel_rejection_v_1(
                        Rest,
                        0,
                        0,
                        F@_1,
                        TrUserData
                    );
                1 ->
                    skip_64_blockchain_state_channel_rejection_v_1(
                        Rest,
                        0,
                        0,
                        F@_1,
                        TrUserData
                    );
                2 ->
                    skip_length_delimited_blockchain_state_channel_rejection_v_1(
                        Rest,
                        0,
                        0,
                        F@_1,
                        TrUserData
                    );
                3 ->
                    skip_group_blockchain_state_channel_rejection_v_1(
                        Rest,
                        Key bsr 3,
                        0,
                        F@_1,
                        TrUserData
                    );
                5 ->
                    skip_32_blockchain_state_channel_rejection_v_1(
                        Rest,
                        0,
                        0,
                        F@_1,
                        TrUserData
                    )
            end
    end;
dg_read_field_def_blockchain_state_channel_rejection_v_1(
    <<>>,
    0,
    0,
    F@_1,
    _
) ->
    #{reject => F@_1}.

d_field_blockchain_state_channel_rejection_v_1_reject(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_rejection_v_1_reject(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        TrUserData
    );
d_field_blockchain_state_channel_rejection_v_1_reject(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_blockchain_state_channel_rejection_v_1(
        RestF,
        0,
        0,
        NewFValue,
        TrUserData
    ).

skip_varint_blockchain_state_channel_rejection_v_1(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    TrUserData
) ->
    skip_varint_blockchain_state_channel_rejection_v_1(
        Rest,
        Z1,
        Z2,
        F@_1,
        TrUserData
    );
skip_varint_blockchain_state_channel_rejection_v_1(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_rejection_v_1(
        Rest,
        Z1,
        Z2,
        F@_1,
        TrUserData
    ).

skip_length_delimited_blockchain_state_channel_rejection_v_1(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    TrUserData
) when N < 57 ->
    skip_length_delimited_blockchain_state_channel_rejection_v_1(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        TrUserData
    );
skip_length_delimited_blockchain_state_channel_rejection_v_1(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_blockchain_state_channel_rejection_v_1(
        Rest2,
        0,
        0,
        F@_1,
        TrUserData
    ).

skip_group_blockchain_state_channel_rejection_v_1(
    Bin,
    FNum,
    Z2,
    F@_1,
    TrUserData
) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_blockchain_state_channel_rejection_v_1(
        Rest,
        0,
        Z2,
        F@_1,
        TrUserData
    ).

skip_32_blockchain_state_channel_rejection_v_1(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_rejection_v_1(
        Rest,
        Z1,
        Z2,
        F@_1,
        TrUserData
    ).

skip_64_blockchain_state_channel_rejection_v_1(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_rejection_v_1(
        Rest,
        Z1,
        Z2,
        F@_1,
        TrUserData
    ).

decode_msg_blockchain_state_channel_message_v_1(
    Bin,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_message_v_1(
        Bin,
        0,
        0,
        id(
            '$undef',
            TrUserData
        ),
        TrUserData
    ).

dfp_read_field_def_blockchain_state_channel_message_v_1(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    TrUserData
) ->
    d_field_blockchain_state_channel_message_v_1_response(
        Rest,
        Z1,
        Z2,
        F@_1,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_message_v_1(
    <<34, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    TrUserData
) ->
    d_field_blockchain_state_channel_message_v_1_packet(
        Rest,
        Z1,
        Z2,
        F@_1,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_message_v_1(
    <<42, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    TrUserData
) ->
    d_field_blockchain_state_channel_message_v_1_offer(
        Rest,
        Z1,
        Z2,
        F@_1,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_message_v_1(
    <<50, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    TrUserData
) ->
    d_field_blockchain_state_channel_message_v_1_purchase(
        Rest,
        Z1,
        Z2,
        F@_1,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_message_v_1(
    <<58, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    TrUserData
) ->
    d_field_blockchain_state_channel_message_v_1_banner(
        Rest,
        Z1,
        Z2,
        F@_1,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_message_v_1(
    <<66, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    TrUserData
) ->
    d_field_blockchain_state_channel_message_v_1_reject(
        Rest,
        Z1,
        Z2,
        F@_1,
        TrUserData
    );
dfp_read_field_def_blockchain_state_channel_message_v_1(
    <<>>,
    0,
    0,
    F@_1,
    _
) ->
    S1 = #{},
    if
        F@_1 == '$undef' -> S1;
        true -> S1#{msg => F@_1}
    end;
dfp_read_field_def_blockchain_state_channel_message_v_1(
    Other,
    Z1,
    Z2,
    F@_1,
    TrUserData
) ->
    dg_read_field_def_blockchain_state_channel_message_v_1(
        Other,
        Z1,
        Z2,
        F@_1,
        TrUserData
    ).

dg_read_field_def_blockchain_state_channel_message_v_1(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    TrUserData
) when N < 32 - 7 ->
    dg_read_field_def_blockchain_state_channel_message_v_1(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        TrUserData
    );
dg_read_field_def_blockchain_state_channel_message_v_1(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        18 ->
            d_field_blockchain_state_channel_message_v_1_response(
                Rest,
                0,
                0,
                F@_1,
                TrUserData
            );
        34 ->
            d_field_blockchain_state_channel_message_v_1_packet(
                Rest,
                0,
                0,
                F@_1,
                TrUserData
            );
        42 ->
            d_field_blockchain_state_channel_message_v_1_offer(
                Rest,
                0,
                0,
                F@_1,
                TrUserData
            );
        50 ->
            d_field_blockchain_state_channel_message_v_1_purchase(
                Rest,
                0,
                0,
                F@_1,
                TrUserData
            );
        58 ->
            d_field_blockchain_state_channel_message_v_1_banner(
                Rest,
                0,
                0,
                F@_1,
                TrUserData
            );
        66 ->
            d_field_blockchain_state_channel_message_v_1_reject(
                Rest,
                0,
                0,
                F@_1,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_blockchain_state_channel_message_v_1(
                        Rest,
                        0,
                        0,
                        F@_1,
                        TrUserData
                    );
                1 ->
                    skip_64_blockchain_state_channel_message_v_1(
                        Rest,
                        0,
                        0,
                        F@_1,
                        TrUserData
                    );
                2 ->
                    skip_length_delimited_blockchain_state_channel_message_v_1(
                        Rest,
                        0,
                        0,
                        F@_1,
                        TrUserData
                    );
                3 ->
                    skip_group_blockchain_state_channel_message_v_1(
                        Rest,
                        Key bsr 3,
                        0,
                        F@_1,
                        TrUserData
                    );
                5 ->
                    skip_32_blockchain_state_channel_message_v_1(
                        Rest,
                        0,
                        0,
                        F@_1,
                        TrUserData
                    )
            end
    end;
dg_read_field_def_blockchain_state_channel_message_v_1(
    <<>>,
    0,
    0,
    F@_1,
    _
) ->
    S1 = #{},
    if
        F@_1 == '$undef' -> S1;
        true -> S1#{msg => F@_1}
    end.

d_field_blockchain_state_channel_message_v_1_response(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_message_v_1_response(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        TrUserData
    );
d_field_blockchain_state_channel_message_v_1_response(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id(
                decode_msg_blockchain_state_channel_response_v_1(
                    Bs,
                    TrUserData
                ),
                TrUserData
            ),
            Rest2}
    end,
    dfp_read_field_def_blockchain_state_channel_message_v_1(
        RestF,
        0,
        0,
        case Prev of
            '$undef' ->
                id(
                    {response, NewFValue},
                    TrUserData
                );
            {response, MVPrev} ->
                id(
                    {response,
                        merge_msg_blockchain_state_channel_response_v_1(
                            MVPrev,
                            NewFValue,
                            TrUserData
                        )},
                    TrUserData
                );
            _ ->
                id(
                    {response, NewFValue},
                    TrUserData
                )
        end,
        TrUserData
    ).

d_field_blockchain_state_channel_message_v_1_packet(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_message_v_1_packet(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        TrUserData
    );
d_field_blockchain_state_channel_message_v_1_packet(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id(
                decode_msg_blockchain_state_channel_packet_v_1(
                    Bs,
                    TrUserData
                ),
                TrUserData
            ),
            Rest2}
    end,
    dfp_read_field_def_blockchain_state_channel_message_v_1(
        RestF,
        0,
        0,
        case Prev of
            '$undef' ->
                id(
                    {packet, NewFValue},
                    TrUserData
                );
            {packet, MVPrev} ->
                id(
                    {packet,
                        merge_msg_blockchain_state_channel_packet_v_1(
                            MVPrev,
                            NewFValue,
                            TrUserData
                        )},
                    TrUserData
                );
            _ ->
                id(
                    {packet, NewFValue},
                    TrUserData
                )
        end,
        TrUserData
    ).

d_field_blockchain_state_channel_message_v_1_offer(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_message_v_1_offer(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        TrUserData
    );
d_field_blockchain_state_channel_message_v_1_offer(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id(
                decode_msg_blockchain_state_channel_offer_v_1(
                    Bs,
                    TrUserData
                ),
                TrUserData
            ),
            Rest2}
    end,
    dfp_read_field_def_blockchain_state_channel_message_v_1(
        RestF,
        0,
        0,
        case Prev of
            '$undef' ->
                id(
                    {offer, NewFValue},
                    TrUserData
                );
            {offer, MVPrev} ->
                id(
                    {offer,
                        merge_msg_blockchain_state_channel_offer_v_1(
                            MVPrev,
                            NewFValue,
                            TrUserData
                        )},
                    TrUserData
                );
            _ ->
                id(
                    {offer, NewFValue},
                    TrUserData
                )
        end,
        TrUserData
    ).

d_field_blockchain_state_channel_message_v_1_purchase(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_message_v_1_purchase(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        TrUserData
    );
d_field_blockchain_state_channel_message_v_1_purchase(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id(
                decode_msg_blockchain_state_channel_purchase_v_1(
                    Bs,
                    TrUserData
                ),
                TrUserData
            ),
            Rest2}
    end,
    dfp_read_field_def_blockchain_state_channel_message_v_1(
        RestF,
        0,
        0,
        case Prev of
            '$undef' ->
                id(
                    {purchase, NewFValue},
                    TrUserData
                );
            {purchase, MVPrev} ->
                id(
                    {purchase,
                        merge_msg_blockchain_state_channel_purchase_v_1(
                            MVPrev,
                            NewFValue,
                            TrUserData
                        )},
                    TrUserData
                );
            _ ->
                id(
                    {purchase, NewFValue},
                    TrUserData
                )
        end,
        TrUserData
    ).

d_field_blockchain_state_channel_message_v_1_banner(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_message_v_1_banner(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        TrUserData
    );
d_field_blockchain_state_channel_message_v_1_banner(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id(
                decode_msg_blockchain_state_channel_banner_v_1(
                    Bs,
                    TrUserData
                ),
                TrUserData
            ),
            Rest2}
    end,
    dfp_read_field_def_blockchain_state_channel_message_v_1(
        RestF,
        0,
        0,
        case Prev of
            '$undef' ->
                id(
                    {banner, NewFValue},
                    TrUserData
                );
            {banner, MVPrev} ->
                id(
                    {banner,
                        merge_msg_blockchain_state_channel_banner_v_1(
                            MVPrev,
                            NewFValue,
                            TrUserData
                        )},
                    TrUserData
                );
            _ ->
                id(
                    {banner, NewFValue},
                    TrUserData
                )
        end,
        TrUserData
    ).

d_field_blockchain_state_channel_message_v_1_reject(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    TrUserData
) when N < 57 ->
    d_field_blockchain_state_channel_message_v_1_reject(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        TrUserData
    );
d_field_blockchain_state_channel_message_v_1_reject(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id(
                decode_msg_blockchain_state_channel_rejection_v_1(
                    Bs,
                    TrUserData
                ),
                TrUserData
            ),
            Rest2}
    end,
    dfp_read_field_def_blockchain_state_channel_message_v_1(
        RestF,
        0,
        0,
        case Prev of
            '$undef' ->
                id(
                    {reject, NewFValue},
                    TrUserData
                );
            {reject, MVPrev} ->
                id(
                    {reject,
                        merge_msg_blockchain_state_channel_rejection_v_1(
                            MVPrev,
                            NewFValue,
                            TrUserData
                        )},
                    TrUserData
                );
            _ ->
                id(
                    {reject, NewFValue},
                    TrUserData
                )
        end,
        TrUserData
    ).

skip_varint_blockchain_state_channel_message_v_1(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    TrUserData
) ->
    skip_varint_blockchain_state_channel_message_v_1(
        Rest,
        Z1,
        Z2,
        F@_1,
        TrUserData
    );
skip_varint_blockchain_state_channel_message_v_1(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_message_v_1(
        Rest,
        Z1,
        Z2,
        F@_1,
        TrUserData
    ).

skip_length_delimited_blockchain_state_channel_message_v_1(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    TrUserData
) when N < 57 ->
    skip_length_delimited_blockchain_state_channel_message_v_1(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        TrUserData
    );
skip_length_delimited_blockchain_state_channel_message_v_1(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_blockchain_state_channel_message_v_1(
        Rest2,
        0,
        0,
        F@_1,
        TrUserData
    ).

skip_group_blockchain_state_channel_message_v_1(
    Bin,
    FNum,
    Z2,
    F@_1,
    TrUserData
) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_blockchain_state_channel_message_v_1(
        Rest,
        0,
        Z2,
        F@_1,
        TrUserData
    ).

skip_32_blockchain_state_channel_message_v_1(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_message_v_1(
        Rest,
        Z1,
        Z2,
        F@_1,
        TrUserData
    ).

skip_64_blockchain_state_channel_message_v_1(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    TrUserData
) ->
    dfp_read_field_def_blockchain_state_channel_message_v_1(
        Rest,
        Z1,
        Z2,
        F@_1,
        TrUserData
    ).

decode_msg_eui(Bin, TrUserData) ->
    dfp_read_field_def_eui(
        Bin,
        0,
        0,
        id(0, TrUserData),
        id(0, TrUserData),
        TrUserData
    ).

dfp_read_field_def_eui(
    <<8, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    d_field_eui_deveui(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    );
dfp_read_field_def_eui(
    <<16, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    d_field_eui_appeui(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    );
dfp_read_field_def_eui(<<>>, 0, 0, F@_1, F@_2, _) ->
    #{deveui => F@_1, appeui => F@_2};
dfp_read_field_def_eui(
    Other,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    dg_read_field_def_eui(
        Other,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    ).

dg_read_field_def_eui(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) when N < 32 - 7 ->
    dg_read_field_def_eui(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        TrUserData
    );
dg_read_field_def_eui(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            d_field_eui_deveui(Rest, 0, 0, F@_1, F@_2, TrUserData);
        16 ->
            d_field_eui_appeui(Rest, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_eui(Rest, 0, 0, F@_1, F@_2, TrUserData);
                1 ->
                    skip_64_eui(Rest, 0, 0, F@_1, F@_2, TrUserData);
                2 ->
                    skip_length_delimited_eui(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                3 ->
                    skip_group_eui(
                        Rest,
                        Key bsr 3,
                        0,
                        F@_1,
                        F@_2,
                        TrUserData
                    );
                5 ->
                    skip_32_eui(Rest, 0, 0, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_eui(<<>>, 0, 0, F@_1, F@_2, _) ->
    #{deveui => F@_1, appeui => F@_2}.

d_field_eui_deveui(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    d_field_eui_deveui(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        TrUserData
    );
d_field_eui_deveui(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_2,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_eui(
        RestF,
        0,
        0,
        NewFValue,
        F@_2,
        TrUserData
    ).

d_field_eui_appeui(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    d_field_eui_appeui(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        TrUserData
    );
d_field_eui_appeui(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_eui(
        RestF,
        0,
        0,
        F@_1,
        NewFValue,
        TrUserData
    ).

skip_varint_eui(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    skip_varint_eui(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
skip_varint_eui(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    dfp_read_field_def_eui(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    ).

skip_length_delimited_eui(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) when N < 57 ->
    skip_length_delimited_eui(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        TrUserData
    );
skip_length_delimited_eui(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_eui(
        Rest2,
        0,
        0,
        F@_1,
        F@_2,
        TrUserData
    ).

skip_group_eui(Bin, FNum, Z2, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_eui(
        Rest,
        0,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    ).

skip_32_eui(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    dfp_read_field_def_eui(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    ).

skip_64_eui(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    TrUserData
) ->
    dfp_read_field_def_eui(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        TrUserData
    ).

decode_msg_routing_information(Bin, TrUserData) ->
    dfp_read_field_def_routing_information(
        Bin,
        0,
        0,
        id('$undef', TrUserData),
        TrUserData
    ).

dfp_read_field_def_routing_information(
    <<8, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    TrUserData
) ->
    d_field_routing_information_devaddr(
        Rest,
        Z1,
        Z2,
        F@_1,
        TrUserData
    );
dfp_read_field_def_routing_information(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    TrUserData
) ->
    d_field_routing_information_eui(
        Rest,
        Z1,
        Z2,
        F@_1,
        TrUserData
    );
dfp_read_field_def_routing_information(
    <<>>,
    0,
    0,
    F@_1,
    _
) ->
    S1 = #{},
    if
        F@_1 == '$undef' -> S1;
        true -> S1#{data => F@_1}
    end;
dfp_read_field_def_routing_information(
    Other,
    Z1,
    Z2,
    F@_1,
    TrUserData
) ->
    dg_read_field_def_routing_information(
        Other,
        Z1,
        Z2,
        F@_1,
        TrUserData
    ).

dg_read_field_def_routing_information(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    TrUserData
) when N < 32 - 7 ->
    dg_read_field_def_routing_information(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        TrUserData
    );
dg_read_field_def_routing_information(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            d_field_routing_information_devaddr(
                Rest,
                0,
                0,
                F@_1,
                TrUserData
            );
        18 ->
            d_field_routing_information_eui(
                Rest,
                0,
                0,
                F@_1,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_routing_information(
                        Rest,
                        0,
                        0,
                        F@_1,
                        TrUserData
                    );
                1 ->
                    skip_64_routing_information(
                        Rest,
                        0,
                        0,
                        F@_1,
                        TrUserData
                    );
                2 ->
                    skip_length_delimited_routing_information(
                        Rest,
                        0,
                        0,
                        F@_1,
                        TrUserData
                    );
                3 ->
                    skip_group_routing_information(
                        Rest,
                        Key bsr 3,
                        0,
                        F@_1,
                        TrUserData
                    );
                5 ->
                    skip_32_routing_information(
                        Rest,
                        0,
                        0,
                        F@_1,
                        TrUserData
                    )
            end
    end;
dg_read_field_def_routing_information(
    <<>>,
    0,
    0,
    F@_1,
    _
) ->
    S1 = #{},
    if
        F@_1 == '$undef' -> S1;
        true -> S1#{data => F@_1}
    end.

d_field_routing_information_devaddr(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    TrUserData
) when N < 57 ->
    d_field_routing_information_devaddr(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        TrUserData
    );
d_field_routing_information_devaddr(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_routing_information(
        RestF,
        0,
        0,
        id({devaddr, NewFValue}, TrUserData),
        TrUserData
    ).

d_field_routing_information_eui(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    TrUserData
) when N < 57 ->
    d_field_routing_information_eui(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        TrUserData
    );
d_field_routing_information_eui(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id(decode_msg_eui(Bs, TrUserData), TrUserData), Rest2}
    end,
    dfp_read_field_def_routing_information(
        RestF,
        0,
        0,
        case Prev of
            '$undef' ->
                id(
                    {eui, NewFValue},
                    TrUserData
                );
            {eui, MVPrev} ->
                id(
                    {eui,
                        merge_msg_eui(
                            MVPrev,
                            NewFValue,
                            TrUserData
                        )},
                    TrUserData
                );
            _ ->
                id(
                    {eui, NewFValue},
                    TrUserData
                )
        end,
        TrUserData
    ).

skip_varint_routing_information(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    TrUserData
) ->
    skip_varint_routing_information(
        Rest,
        Z1,
        Z2,
        F@_1,
        TrUserData
    );
skip_varint_routing_information(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    TrUserData
) ->
    dfp_read_field_def_routing_information(
        Rest,
        Z1,
        Z2,
        F@_1,
        TrUserData
    ).

skip_length_delimited_routing_information(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    TrUserData
) when N < 57 ->
    skip_length_delimited_routing_information(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        TrUserData
    );
skip_length_delimited_routing_information(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_routing_information(
        Rest2,
        0,
        0,
        F@_1,
        TrUserData
    ).

skip_group_routing_information(
    Bin,
    FNum,
    Z2,
    F@_1,
    TrUserData
) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_routing_information(
        Rest,
        0,
        Z2,
        F@_1,
        TrUserData
    ).

skip_32_routing_information(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    TrUserData
) ->
    dfp_read_field_def_routing_information(
        Rest,
        Z1,
        Z2,
        F@_1,
        TrUserData
    ).

skip_64_routing_information(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    TrUserData
) ->
    dfp_read_field_def_routing_information(
        Rest,
        Z1,
        Z2,
        F@_1,
        TrUserData
    ).

decode_msg_window(Bin, TrUserData) ->
    dfp_read_field_def_window(
        Bin,
        0,
        0,
        id(0, TrUserData),
        id(0.0, TrUserData),
        id(<<>>, TrUserData),
        TrUserData
    ).

dfp_read_field_def_window(
    <<8, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    d_field_window_timestamp(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
dfp_read_field_def_window(
    <<21, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    d_field_window_frequency(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
dfp_read_field_def_window(
    <<26, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    d_field_window_datarate(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
dfp_read_field_def_window(
    <<>>,
    0,
    0,
    F@_1,
    F@_2,
    F@_3,
    _
) ->
    #{
        timestamp => F@_1,
        frequency => F@_2,
        datarate => F@_3
    };
dfp_read_field_def_window(
    Other,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    dg_read_field_def_window(
        Other,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

dg_read_field_def_window(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 32 - 7 ->
    dg_read_field_def_window(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
dg_read_field_def_window(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            d_field_window_timestamp(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                TrUserData
            );
        21 ->
            d_field_window_frequency(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                TrUserData
            );
        26 ->
            d_field_window_datarate(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_window(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                1 ->
                    skip_64_window(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                2 ->
                    skip_length_delimited_window(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                3 ->
                    skip_group_window(
                        Rest,
                        Key bsr 3,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                5 ->
                    skip_32_window(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
dg_read_field_def_window(
    <<>>,
    0,
    0,
    F@_1,
    F@_2,
    F@_3,
    _
) ->
    #{
        timestamp => F@_1,
        frequency => F@_2,
        datarate => F@_3
    }.

d_field_window_timestamp(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    d_field_window_timestamp(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
d_field_window_timestamp(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_2,
    F@_3,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_window(
        RestF,
        0,
        0,
        NewFValue,
        F@_2,
        F@_3,
        TrUserData
    ).

d_field_window_frequency(
    <<0:16, 128, 127, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    _,
    F@_3,
    TrUserData
) ->
    dfp_read_field_def_window(
        Rest,
        Z1,
        Z2,
        F@_1,
        id(infinity, TrUserData),
        F@_3,
        TrUserData
    );
d_field_window_frequency(
    <<0:16, 128, 255, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    _,
    F@_3,
    TrUserData
) ->
    dfp_read_field_def_window(
        Rest,
        Z1,
        Z2,
        F@_1,
        id('-infinity', TrUserData),
        F@_3,
        TrUserData
    );
d_field_window_frequency(
    <<_:16, 1:1, _:7, _:1, 127:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    _,
    F@_3,
    TrUserData
) ->
    dfp_read_field_def_window(
        Rest,
        Z1,
        Z2,
        F@_1,
        id(nan, TrUserData),
        F@_3,
        TrUserData
    );
d_field_window_frequency(
    <<Value:32/little-float, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    _,
    F@_3,
    TrUserData
) ->
    dfp_read_field_def_window(
        Rest,
        Z1,
        Z2,
        F@_1,
        id(Value, TrUserData),
        F@_3,
        TrUserData
    ).

d_field_window_datarate(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    d_field_window_datarate(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
d_field_window_datarate(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        {id(binary:copy(Bytes), TrUserData), Rest2}
    end,
    dfp_read_field_def_window(
        RestF,
        0,
        0,
        F@_1,
        F@_2,
        NewFValue,
        TrUserData
    ).

skip_varint_window(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    skip_varint_window(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
skip_varint_window(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    dfp_read_field_def_window(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

skip_length_delimited_window(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    skip_length_delimited_window(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
skip_length_delimited_window(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_window(
        Rest2,
        0,
        0,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

skip_group_window(
    Bin,
    FNum,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_window(
        Rest,
        0,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

skip_32_window(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    dfp_read_field_def_window(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

skip_64_window(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    dfp_read_field_def_window(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    ).

decode_msg_packet(Bin, TrUserData) ->
    dfp_read_field_def_packet(
        Bin,
        0,
        0,
        id(0, TrUserData),
        id(longfi, TrUserData),
        id(<<>>, TrUserData),
        id(0, TrUserData),
        id(0.0, TrUserData),
        id(0.0, TrUserData),
        id(<<>>, TrUserData),
        id(0.0, TrUserData),
        id('$undef', TrUserData),
        id('$undef', TrUserData),
        TrUserData
    ).

dfp_read_field_def_packet(
    <<8, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    d_field_packet_oui(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
dfp_read_field_def_packet(
    <<16, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    d_field_packet_type(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
dfp_read_field_def_packet(
    <<26, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    d_field_packet_payload(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
dfp_read_field_def_packet(
    <<32, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    d_field_packet_timestamp(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
dfp_read_field_def_packet(
    <<45, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    d_field_packet_signal_strength(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
dfp_read_field_def_packet(
    <<53, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    d_field_packet_frequency(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
dfp_read_field_def_packet(
    <<58, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    d_field_packet_datarate(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
dfp_read_field_def_packet(
    <<69, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    d_field_packet_snr(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
dfp_read_field_def_packet(
    <<74, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    d_field_packet_routing(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
dfp_read_field_def_packet(
    <<82, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    d_field_packet_rx2_window(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
dfp_read_field_def_packet(
    <<>>,
    0,
    0,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    _
) ->
    S1 = #{
        oui => F@_1,
        type => F@_2,
        payload => F@_3,
        timestamp => F@_4,
        signal_strength => F@_5,
        frequency => F@_6,
        datarate => F@_7,
        snr => F@_8
    },
    S2 =
        if
            F@_9 == '$undef' -> S1;
            true -> S1#{routing => F@_9}
        end,
    if
        F@_10 == '$undef' -> S2;
        true -> S2#{rx2_window => F@_10}
    end;
dfp_read_field_def_packet(
    Other,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    dg_read_field_def_packet(
        Other,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

dg_read_field_def_packet(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 32 - 7 ->
    dg_read_field_def_packet(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
dg_read_field_def_packet(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            d_field_packet_oui(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        16 ->
            d_field_packet_type(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        26 ->
            d_field_packet_payload(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        32 ->
            d_field_packet_timestamp(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        45 ->
            d_field_packet_signal_strength(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        53 ->
            d_field_packet_frequency(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        58 ->
            d_field_packet_datarate(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        69 ->
            d_field_packet_snr(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        74 ->
            d_field_packet_routing(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        82 ->
            d_field_packet_rx2_window(
                Rest,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                F@_6,
                F@_7,
                F@_8,
                F@_9,
                F@_10,
                TrUserData
            );
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_packet(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        F@_9,
                        F@_10,
                        TrUserData
                    );
                1 ->
                    skip_64_packet(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        F@_9,
                        F@_10,
                        TrUserData
                    );
                2 ->
                    skip_length_delimited_packet(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        F@_9,
                        F@_10,
                        TrUserData
                    );
                3 ->
                    skip_group_packet(
                        Rest,
                        Key bsr 3,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        F@_9,
                        F@_10,
                        TrUserData
                    );
                5 ->
                    skip_32_packet(
                        Rest,
                        0,
                        0,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        F@_6,
                        F@_7,
                        F@_8,
                        F@_9,
                        F@_10,
                        TrUserData
                    )
            end
    end;
dg_read_field_def_packet(
    <<>>,
    0,
    0,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    _
) ->
    S1 = #{
        oui => F@_1,
        type => F@_2,
        payload => F@_3,
        timestamp => F@_4,
        signal_strength => F@_5,
        frequency => F@_6,
        datarate => F@_7,
        snr => F@_8
    },
    S2 =
        if
            F@_9 == '$undef' -> S1;
            true -> S1#{routing => F@_9}
        end,
    if
        F@_10 == '$undef' -> S2;
        true -> S2#{rx2_window => F@_10}
    end.

d_field_packet_oui(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    d_field_packet_oui(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
d_field_packet_oui(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_packet(
        RestF,
        0,
        0,
        NewFValue,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

d_field_packet_type(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    d_field_packet_type(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
d_field_packet_type(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    _,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    {NewFValue, RestF} =
        {id(
                'd_enum_packet.packet_type'(begin
                    <<Res:32/signed-native>> =
                        <<(X bsl N +
                                Acc):32/unsigned-native>>,
                    id(Res, TrUserData)
                end),
                TrUserData
            ),
            Rest},
    dfp_read_field_def_packet(
        RestF,
        0,
        0,
        F@_1,
        NewFValue,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

d_field_packet_payload(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    d_field_packet_payload(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
d_field_packet_payload(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    _,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        {id(binary:copy(Bytes), TrUserData), Rest2}
    end,
    dfp_read_field_def_packet(
        RestF,
        0,
        0,
        F@_1,
        F@_2,
        NewFValue,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

d_field_packet_timestamp(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    d_field_packet_timestamp(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
d_field_packet_timestamp(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    _,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_packet(
        RestF,
        0,
        0,
        F@_1,
        F@_2,
        F@_3,
        NewFValue,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

d_field_packet_signal_strength(
    <<0:16, 128, 127, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    _,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    dfp_read_field_def_packet(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        id(infinity, TrUserData),
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
d_field_packet_signal_strength(
    <<0:16, 128, 255, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    _,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    dfp_read_field_def_packet(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        id('-infinity', TrUserData),
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
d_field_packet_signal_strength(
    <<_:16, 1:1, _:7, _:1, 127:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    _,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    dfp_read_field_def_packet(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        id(nan, TrUserData),
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
d_field_packet_signal_strength(
    <<Value:32/little-float, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    _,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    dfp_read_field_def_packet(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        id(Value, TrUserData),
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

d_field_packet_frequency(
    <<0:16, 128, 127, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    _,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    dfp_read_field_def_packet(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        id(infinity, TrUserData),
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
d_field_packet_frequency(
    <<0:16, 128, 255, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    _,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    dfp_read_field_def_packet(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        id('-infinity', TrUserData),
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
d_field_packet_frequency(
    <<_:16, 1:1, _:7, _:1, 127:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    _,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    dfp_read_field_def_packet(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        id(nan, TrUserData),
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
d_field_packet_frequency(
    <<Value:32/little-float, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    _,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    dfp_read_field_def_packet(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        id(Value, TrUserData),
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

d_field_packet_datarate(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    d_field_packet_datarate(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
d_field_packet_datarate(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    _,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        {id(binary:copy(Bytes), TrUserData), Rest2}
    end,
    dfp_read_field_def_packet(
        RestF,
        0,
        0,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        NewFValue,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

d_field_packet_snr(
    <<0:16, 128, 127, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    _,
    F@_9,
    F@_10,
    TrUserData
) ->
    dfp_read_field_def_packet(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        id(infinity, TrUserData),
        F@_9,
        F@_10,
        TrUserData
    );
d_field_packet_snr(
    <<0:16, 128, 255, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    _,
    F@_9,
    F@_10,
    TrUserData
) ->
    dfp_read_field_def_packet(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        id('-infinity', TrUserData),
        F@_9,
        F@_10,
        TrUserData
    );
d_field_packet_snr(
    <<_:16, 1:1, _:7, _:1, 127:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    _,
    F@_9,
    F@_10,
    TrUserData
) ->
    dfp_read_field_def_packet(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        id(nan, TrUserData),
        F@_9,
        F@_10,
        TrUserData
    );
d_field_packet_snr(
    <<Value:32/little-float, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    _,
    F@_9,
    F@_10,
    TrUserData
) ->
    dfp_read_field_def_packet(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        id(Value, TrUserData),
        F@_9,
        F@_10,
        TrUserData
    ).

d_field_packet_routing(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    d_field_packet_routing(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
d_field_packet_routing(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    Prev,
    F@_10,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id(
                decode_msg_routing_information(Bs, TrUserData),
                TrUserData
            ),
            Rest2}
    end,
    dfp_read_field_def_packet(
        RestF,
        0,
        0,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        if
            Prev == '$undef' ->
                NewFValue;
            true ->
                merge_msg_routing_information(
                    Prev,
                    NewFValue,
                    TrUserData
                )
        end,
        F@_10,
        TrUserData
    ).

d_field_packet_rx2_window(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    d_field_packet_rx2_window(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
d_field_packet_rx2_window(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id(decode_msg_window(Bs, TrUserData), TrUserData), Rest2}
    end,
    dfp_read_field_def_packet(
        RestF,
        0,
        0,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        if
            Prev == '$undef' ->
                NewFValue;
            true ->
                merge_msg_window(
                    Prev,
                    NewFValue,
                    TrUserData
                )
        end,
        TrUserData
    ).

skip_varint_packet(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    skip_varint_packet(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
skip_varint_packet(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    dfp_read_field_def_packet(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

skip_length_delimited_packet(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) when N < 57 ->
    skip_length_delimited_packet(
        Rest,
        N + 7,
        X bsl N + Acc,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    );
skip_length_delimited_packet(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_packet(
        Rest2,
        0,
        0,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

skip_group_packet(
    Bin,
    FNum,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_packet(
        Rest,
        0,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

skip_32_packet(
    <<_:32, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    dfp_read_field_def_packet(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

skip_64_packet(
    <<_:64, Rest/binary>>,
    Z1,
    Z2,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    F@_6,
    F@_7,
    F@_8,
    F@_9,
    F@_10,
    TrUserData
) ->
    dfp_read_field_def_packet(
        Rest,
        Z1,
        Z2,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        F@_6,
        F@_7,
        F@_8,
        F@_9,
        F@_10,
        TrUserData
    ).

'd_enum_helium.Region'(0) -> 'US915';
'd_enum_helium.Region'(1) -> 'EU868';
'd_enum_helium.Region'(2) -> 'EU433';
'd_enum_helium.Region'(3) -> 'CN470';
'd_enum_helium.Region'(4) -> 'CN779';
'd_enum_helium.Region'(5) -> 'AU915';
'd_enum_helium.Region'(6) -> 'AS923';
'd_enum_helium.Region'(7) -> 'KR920';
'd_enum_helium.Region'(8) -> 'IN865';
'd_enum_helium.Region'(V) -> V.

'd_enum_helium.blockchain_state_channel_state_v1'(0) ->
    open;
'd_enum_helium.blockchain_state_channel_state_v1'(1) ->
    closed;
'd_enum_helium.blockchain_state_channel_state_v1'(V) ->
    V.

'd_enum_packet.packet_type'(0) -> longfi;
'd_enum_packet.packet_type'(1) -> lorawan;
'd_enum_packet.packet_type'(V) -> V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum) when N < (32 - 7) ->
    read_gr_b(Tl, N + 7, X bsl N + Acc, NumBytes, TagLen + 1, FieldNum);
read_gr_b(
    <<0:1, X:7, Tl/binary>>,
    N,
    Acc,
    NumBytes,
    TagLen,
    FieldNum
) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        % 4 = group_end
        {FieldNum, 4} ->
            {NumBytes, TagLen1};
        % 0 = varint
        {_, 0} ->
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        % 1 = bits64
        {_, 1} ->
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        % 2 = length_delimited
        {_, 2} ->
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        % 3 = group_start
        {_, 3} ->
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        % 4 = group_end
        {_, 4} ->
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        % 5 = bits32
        {_, 5} ->
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum) when N < (64 - 7) ->
    read_gr_vi(Tl, N + 7, NumBytes + 1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes + 1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) when N < (64 - 7) ->
    read_gr_ld(Tl, N + 7, X bsl N + Acc, NumBytes + 1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        blockchain_state_channel_summary_v_1 ->
            merge_msg_blockchain_state_channel_summary_v_1(
                Prev,
                New,
                TrUserData
            );
        blockchain_state_channel_v_1 ->
            merge_msg_blockchain_state_channel_v_1(
                Prev,
                New,
                TrUserData
            );
        blockchain_state_channel_response_v_1 ->
            merge_msg_blockchain_state_channel_response_v_1(
                Prev,
                New,
                TrUserData
            );
        blockchain_state_channel_packet_v_1 ->
            merge_msg_blockchain_state_channel_packet_v_1(
                Prev,
                New,
                TrUserData
            );
        blockchain_state_channel_offer_v_1 ->
            merge_msg_blockchain_state_channel_offer_v_1(
                Prev,
                New,
                TrUserData
            );
        blockchain_state_channel_purchase_v_1 ->
            merge_msg_blockchain_state_channel_purchase_v_1(
                Prev,
                New,
                TrUserData
            );
        blockchain_state_channel_banner_v_1 ->
            merge_msg_blockchain_state_channel_banner_v_1(
                Prev,
                New,
                TrUserData
            );
        blockchain_state_channel_rejection_v_1 ->
            merge_msg_blockchain_state_channel_rejection_v_1(
                Prev,
                New,
                TrUserData
            );
        blockchain_state_channel_message_v_1 ->
            merge_msg_blockchain_state_channel_message_v_1(
                Prev,
                New,
                TrUserData
            );
        eui ->
            merge_msg_eui(Prev, New, TrUserData);
        routing_information ->
            merge_msg_routing_information(Prev, New, TrUserData);
        window ->
            merge_msg_window(Prev, New, TrUserData);
        packet ->
            merge_msg_packet(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function, merge_msg_blockchain_state_channel_summary_v_1/3}).

merge_msg_blockchain_state_channel_summary_v_1(
    PMsg,
    NMsg,
    _
) ->
    S1 = #{},
    S2 =
        case {PMsg, NMsg} of
            {_, #{client_pubkeybin := NFclient_pubkeybin}} ->
                S1#{client_pubkeybin => NFclient_pubkeybin};
            {#{client_pubkeybin := PFclient_pubkeybin}, _} ->
                S1#{client_pubkeybin => PFclient_pubkeybin};
            _ ->
                S1
        end,
    S3 =
        case {PMsg, NMsg} of
            {_, #{num_packets := NFnum_packets}} ->
                S2#{num_packets => NFnum_packets};
            {#{num_packets := PFnum_packets}, _} ->
                S2#{num_packets => PFnum_packets};
            _ ->
                S2
        end,
    case {PMsg, NMsg} of
        {_, #{num_dcs := NFnum_dcs}} ->
            S3#{num_dcs => NFnum_dcs};
        {#{num_dcs := PFnum_dcs}, _} ->
            S3#{num_dcs => PFnum_dcs};
        _ ->
            S3
    end.

-compile({nowarn_unused_function, merge_msg_blockchain_state_channel_v_1/3}).

merge_msg_blockchain_state_channel_v_1(
    PMsg,
    NMsg,
    TrUserData
) ->
    S1 = #{},
    S2 =
        case {PMsg, NMsg} of
            {_, #{id := NFid}} -> S1#{id => NFid};
            {#{id := PFid}, _} -> S1#{id => PFid};
            _ -> S1
        end,
    S3 =
        case {PMsg, NMsg} of
            {_, #{owner := NFowner}} -> S2#{owner => NFowner};
            {#{owner := PFowner}, _} -> S2#{owner => PFowner};
            _ -> S2
        end,
    S4 =
        case {PMsg, NMsg} of
            {_, #{credits := NFcredits}} ->
                S3#{credits => NFcredits};
            {#{credits := PFcredits}, _} ->
                S3#{credits => PFcredits};
            _ ->
                S3
        end,
    S5 =
        case {PMsg, NMsg} of
            {_, #{nonce := NFnonce}} -> S4#{nonce => NFnonce};
            {#{nonce := PFnonce}, _} -> S4#{nonce => PFnonce};
            _ -> S4
        end,
    S6 =
        case {PMsg, NMsg} of
            {#{summaries := PFsummaries}, #{summaries := NFsummaries}} ->
                S5#{
                    summaries =>
                        'erlang_++'(PFsummaries, NFsummaries, TrUserData)
                };
            {_, #{summaries := NFsummaries}} ->
                S5#{summaries => NFsummaries};
            {#{summaries := PFsummaries}, _} ->
                S5#{summaries => PFsummaries};
            {_, _} ->
                S5
        end,
    S7 =
        case {PMsg, NMsg} of
            {_, #{root_hash := NFroot_hash}} ->
                S6#{root_hash => NFroot_hash};
            {#{root_hash := PFroot_hash}, _} ->
                S6#{root_hash => PFroot_hash};
            _ ->
                S6
        end,
    S8 =
        case {PMsg, NMsg} of
            {_, #{skewed := NFskewed}} -> S7#{skewed => NFskewed};
            {#{skewed := PFskewed}, _} -> S7#{skewed => PFskewed};
            _ -> S7
        end,
    S9 =
        case {PMsg, NMsg} of
            {_, #{state := NFstate}} -> S8#{state => NFstate};
            {#{state := PFstate}, _} -> S8#{state => PFstate};
            _ -> S8
        end,
    S10 =
        case {PMsg, NMsg} of
            {_, #{expire_at_block := NFexpire_at_block}} ->
                S9#{expire_at_block => NFexpire_at_block};
            {#{expire_at_block := PFexpire_at_block}, _} ->
                S9#{expire_at_block => PFexpire_at_block};
            _ ->
                S9
        end,
    case {PMsg, NMsg} of
        {_, #{signature := NFsignature}} ->
            S10#{signature => NFsignature};
        {#{signature := PFsignature}, _} ->
            S10#{signature => PFsignature};
        _ ->
            S10
    end.

-compile({nowarn_unused_function, merge_msg_blockchain_state_channel_response_v_1/3}).

merge_msg_blockchain_state_channel_response_v_1(
    PMsg,
    NMsg,
    TrUserData
) ->
    S1 = #{},
    S2 =
        case {PMsg, NMsg} of
            {_, #{accepted := NFaccepted}} ->
                S1#{accepted => NFaccepted};
            {#{accepted := PFaccepted}, _} ->
                S1#{accepted => PFaccepted};
            _ ->
                S1
        end,
    case {PMsg, NMsg} of
        {#{downlink := PFdownlink}, #{downlink := NFdownlink}} ->
            S2#{
                downlink =>
                    merge_msg_packet(PFdownlink, NFdownlink, TrUserData)
            };
        {_, #{downlink := NFdownlink}} ->
            S2#{downlink => NFdownlink};
        {#{downlink := PFdownlink}, _} ->
            S2#{downlink => PFdownlink};
        {_, _} ->
            S2
    end.

-compile({nowarn_unused_function, merge_msg_blockchain_state_channel_packet_v_1/3}).

merge_msg_blockchain_state_channel_packet_v_1(
    PMsg,
    NMsg,
    TrUserData
) ->
    S1 = #{},
    S2 =
        case {PMsg, NMsg} of
            {#{packet := PFpacket}, #{packet := NFpacket}} ->
                S1#{
                    packet =>
                        merge_msg_packet(PFpacket, NFpacket, TrUserData)
                };
            {_, #{packet := NFpacket}} ->
                S1#{packet => NFpacket};
            {#{packet := PFpacket}, _} ->
                S1#{packet => PFpacket};
            {_, _} ->
                S1
        end,
    S3 =
        case {PMsg, NMsg} of
            {_, #{hotspot := NFhotspot}} ->
                S2#{hotspot => NFhotspot};
            {#{hotspot := PFhotspot}, _} ->
                S2#{hotspot => PFhotspot};
            _ ->
                S2
        end,
    S4 =
        case {PMsg, NMsg} of
            {_, #{signature := NFsignature}} ->
                S3#{signature => NFsignature};
            {#{signature := PFsignature}, _} ->
                S3#{signature => PFsignature};
            _ ->
                S3
        end,
    case {PMsg, NMsg} of
        {_, #{region := NFregion}} -> S4#{region => NFregion};
        {#{region := PFregion}, _} -> S4#{region => PFregion};
        _ -> S4
    end.

-compile({nowarn_unused_function, merge_msg_blockchain_state_channel_offer_v_1/3}).

merge_msg_blockchain_state_channel_offer_v_1(
    PMsg,
    NMsg,
    TrUserData
) ->
    S1 = #{},
    S2 =
        case {PMsg, NMsg} of
            {#{routing := PFrouting}, #{routing := NFrouting}} ->
                S1#{
                    routing =>
                        merge_msg_routing_information(
                            PFrouting,
                            NFrouting,
                            TrUserData
                        )
                };
            {_, #{routing := NFrouting}} ->
                S1#{routing => NFrouting};
            {#{routing := PFrouting}, _} ->
                S1#{routing => PFrouting};
            {_, _} ->
                S1
        end,
    S3 =
        case {PMsg, NMsg} of
            {_, #{packet_hash := NFpacket_hash}} ->
                S2#{packet_hash => NFpacket_hash};
            {#{packet_hash := PFpacket_hash}, _} ->
                S2#{packet_hash => PFpacket_hash};
            _ ->
                S2
        end,
    S4 =
        case {PMsg, NMsg} of
            {_, #{payload_size := NFpayload_size}} ->
                S3#{payload_size => NFpayload_size};
            {#{payload_size := PFpayload_size}, _} ->
                S3#{payload_size => PFpayload_size};
            _ ->
                S3
        end,
    S5 =
        case {PMsg, NMsg} of
            {_, #{fcnt := NFfcnt}} -> S4#{fcnt => NFfcnt};
            {#{fcnt := PFfcnt}, _} -> S4#{fcnt => PFfcnt};
            _ -> S4
        end,
    S6 =
        case {PMsg, NMsg} of
            {_, #{hotspot := NFhotspot}} ->
                S5#{hotspot => NFhotspot};
            {#{hotspot := PFhotspot}, _} ->
                S5#{hotspot => PFhotspot};
            _ ->
                S5
        end,
    S7 =
        case {PMsg, NMsg} of
            {_, #{signature := NFsignature}} ->
                S6#{signature => NFsignature};
            {#{signature := PFsignature}, _} ->
                S6#{signature => PFsignature};
            _ ->
                S6
        end,
    case {PMsg, NMsg} of
        {_, #{region := NFregion}} -> S7#{region => NFregion};
        {#{region := PFregion}, _} -> S7#{region => PFregion};
        _ -> S7
    end.

-compile({nowarn_unused_function, merge_msg_blockchain_state_channel_purchase_v_1/3}).

merge_msg_blockchain_state_channel_purchase_v_1(
    PMsg,
    NMsg,
    TrUserData
) ->
    S1 = #{},
    S2 =
        case {PMsg, NMsg} of
            {#{sc := PFsc}, #{sc := NFsc}} ->
                S1#{
                    sc =>
                        merge_msg_blockchain_state_channel_v_1(
                            PFsc,
                            NFsc,
                            TrUserData
                        )
                };
            {_, #{sc := NFsc}} ->
                S1#{sc => NFsc};
            {#{sc := PFsc}, _} ->
                S1#{sc => PFsc};
            {_, _} ->
                S1
        end,
    S3 =
        case {PMsg, NMsg} of
            {_, #{hotspot := NFhotspot}} ->
                S2#{hotspot => NFhotspot};
            {#{hotspot := PFhotspot}, _} ->
                S2#{hotspot => PFhotspot};
            _ ->
                S2
        end,
    S4 =
        case {PMsg, NMsg} of
            {_, #{packet_hash := NFpacket_hash}} ->
                S3#{packet_hash => NFpacket_hash};
            {#{packet_hash := PFpacket_hash}, _} ->
                S3#{packet_hash => PFpacket_hash};
            _ ->
                S3
        end,
    case {PMsg, NMsg} of
        {_, #{region := NFregion}} -> S4#{region => NFregion};
        {#{region := PFregion}, _} -> S4#{region => PFregion};
        _ -> S4
    end.

-compile({nowarn_unused_function, merge_msg_blockchain_state_channel_banner_v_1/3}).

merge_msg_blockchain_state_channel_banner_v_1(
    PMsg,
    NMsg,
    TrUserData
) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {#{sc := PFsc}, #{sc := NFsc}} ->
            S1#{
                sc =>
                    merge_msg_blockchain_state_channel_v_1(
                        PFsc,
                        NFsc,
                        TrUserData
                    )
            };
        {_, #{sc := NFsc}} ->
            S1#{sc => NFsc};
        {#{sc := PFsc}, _} ->
            S1#{sc => PFsc};
        {_, _} ->
            S1
    end.

-compile({nowarn_unused_function, merge_msg_blockchain_state_channel_rejection_v_1/3}).

merge_msg_blockchain_state_channel_rejection_v_1(
    PMsg,
    NMsg,
    _
) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{reject := NFreject}} -> S1#{reject => NFreject};
        {#{reject := PFreject}, _} -> S1#{reject => PFreject};
        _ -> S1
    end.

-compile({nowarn_unused_function, merge_msg_blockchain_state_channel_message_v_1/3}).

merge_msg_blockchain_state_channel_message_v_1(
    PMsg,
    NMsg,
    TrUserData
) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {#{msg := {response, OPFmsg}}, #{msg := {response, ONFmsg}}} ->
            S1#{
                msg =>
                    {response,
                        merge_msg_blockchain_state_channel_response_v_1(
                            OPFmsg,
                            ONFmsg,
                            TrUserData
                        )}
            };
        {#{msg := {packet, OPFmsg}}, #{msg := {packet, ONFmsg}}} ->
            S1#{
                msg =>
                    {packet,
                        merge_msg_blockchain_state_channel_packet_v_1(
                            OPFmsg,
                            ONFmsg,
                            TrUserData
                        )}
            };
        {#{msg := {offer, OPFmsg}}, #{msg := {offer, ONFmsg}}} ->
            S1#{
                msg =>
                    {offer,
                        merge_msg_blockchain_state_channel_offer_v_1(
                            OPFmsg,
                            ONFmsg,
                            TrUserData
                        )}
            };
        {#{msg := {purchase, OPFmsg}}, #{msg := {purchase, ONFmsg}}} ->
            S1#{
                msg =>
                    {purchase,
                        merge_msg_blockchain_state_channel_purchase_v_1(
                            OPFmsg,
                            ONFmsg,
                            TrUserData
                        )}
            };
        {#{msg := {banner, OPFmsg}}, #{msg := {banner, ONFmsg}}} ->
            S1#{
                msg =>
                    {banner,
                        merge_msg_blockchain_state_channel_banner_v_1(
                            OPFmsg,
                            ONFmsg,
                            TrUserData
                        )}
            };
        {#{msg := {reject, OPFmsg}}, #{msg := {reject, ONFmsg}}} ->
            S1#{
                msg =>
                    {reject,
                        merge_msg_blockchain_state_channel_rejection_v_1(
                            OPFmsg,
                            ONFmsg,
                            TrUserData
                        )}
            };
        {_, #{msg := NFmsg}} ->
            S1#{msg => NFmsg};
        {#{msg := PFmsg}, _} ->
            S1#{msg => PFmsg};
        {_, _} ->
            S1
    end.

-compile({nowarn_unused_function, merge_msg_eui/3}).

merge_msg_eui(PMsg, NMsg, _) ->
    S1 = #{},
    S2 =
        case {PMsg, NMsg} of
            {_, #{deveui := NFdeveui}} -> S1#{deveui => NFdeveui};
            {#{deveui := PFdeveui}, _} -> S1#{deveui => PFdeveui};
            _ -> S1
        end,
    case {PMsg, NMsg} of
        {_, #{appeui := NFappeui}} -> S2#{appeui => NFappeui};
        {#{appeui := PFappeui}, _} -> S2#{appeui => PFappeui};
        _ -> S2
    end.

-compile({nowarn_unused_function, merge_msg_routing_information/3}).

merge_msg_routing_information(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {#{data := {eui, OPFdata}}, #{data := {eui, ONFdata}}} ->
            S1#{
                data =>
                    {eui, merge_msg_eui(OPFdata, ONFdata, TrUserData)}
            };
        {_, #{data := NFdata}} ->
            S1#{data => NFdata};
        {#{data := PFdata}, _} ->
            S1#{data => PFdata};
        {_, _} ->
            S1
    end.

-compile({nowarn_unused_function, merge_msg_window/3}).

merge_msg_window(PMsg, NMsg, _) ->
    S1 = #{},
    S2 =
        case {PMsg, NMsg} of
            {_, #{timestamp := NFtimestamp}} ->
                S1#{timestamp => NFtimestamp};
            {#{timestamp := PFtimestamp}, _} ->
                S1#{timestamp => PFtimestamp};
            _ ->
                S1
        end,
    S3 =
        case {PMsg, NMsg} of
            {_, #{frequency := NFfrequency}} ->
                S2#{frequency => NFfrequency};
            {#{frequency := PFfrequency}, _} ->
                S2#{frequency => PFfrequency};
            _ ->
                S2
        end,
    case {PMsg, NMsg} of
        {_, #{datarate := NFdatarate}} ->
            S3#{datarate => NFdatarate};
        {#{datarate := PFdatarate}, _} ->
            S3#{datarate => PFdatarate};
        _ ->
            S3
    end.

-compile({nowarn_unused_function, merge_msg_packet/3}).

merge_msg_packet(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 =
        case {PMsg, NMsg} of
            {_, #{oui := NFoui}} -> S1#{oui => NFoui};
            {#{oui := PFoui}, _} -> S1#{oui => PFoui};
            _ -> S1
        end,
    S3 =
        case {PMsg, NMsg} of
            {_, #{type := NFtype}} -> S2#{type => NFtype};
            {#{type := PFtype}, _} -> S2#{type => PFtype};
            _ -> S2
        end,
    S4 =
        case {PMsg, NMsg} of
            {_, #{payload := NFpayload}} ->
                S3#{payload => NFpayload};
            {#{payload := PFpayload}, _} ->
                S3#{payload => PFpayload};
            _ ->
                S3
        end,
    S5 =
        case {PMsg, NMsg} of
            {_, #{timestamp := NFtimestamp}} ->
                S4#{timestamp => NFtimestamp};
            {#{timestamp := PFtimestamp}, _} ->
                S4#{timestamp => PFtimestamp};
            _ ->
                S4
        end,
    S6 =
        case {PMsg, NMsg} of
            {_, #{signal_strength := NFsignal_strength}} ->
                S5#{signal_strength => NFsignal_strength};
            {#{signal_strength := PFsignal_strength}, _} ->
                S5#{signal_strength => PFsignal_strength};
            _ ->
                S5
        end,
    S7 =
        case {PMsg, NMsg} of
            {_, #{frequency := NFfrequency}} ->
                S6#{frequency => NFfrequency};
            {#{frequency := PFfrequency}, _} ->
                S6#{frequency => PFfrequency};
            _ ->
                S6
        end,
    S8 =
        case {PMsg, NMsg} of
            {_, #{datarate := NFdatarate}} ->
                S7#{datarate => NFdatarate};
            {#{datarate := PFdatarate}, _} ->
                S7#{datarate => PFdatarate};
            _ ->
                S7
        end,
    S9 =
        case {PMsg, NMsg} of
            {_, #{snr := NFsnr}} -> S8#{snr => NFsnr};
            {#{snr := PFsnr}, _} -> S8#{snr => PFsnr};
            _ -> S8
        end,
    S10 =
        case {PMsg, NMsg} of
            {#{routing := PFrouting}, #{routing := NFrouting}} ->
                S9#{
                    routing =>
                        merge_msg_routing_information(
                            PFrouting,
                            NFrouting,
                            TrUserData
                        )
                };
            {_, #{routing := NFrouting}} ->
                S9#{routing => NFrouting};
            {#{routing := PFrouting}, _} ->
                S9#{routing => PFrouting};
            {_, _} ->
                S9
        end,
    case {PMsg, NMsg} of
        {#{rx2_window := PFrx2_window}, #{rx2_window := NFrx2_window}} ->
            S10#{
                rx2_window =>
                    merge_msg_window(
                        PFrx2_window,
                        NFrx2_window,
                        TrUserData
                    )
            };
        {_, #{rx2_window := NFrx2_window}} ->
            S10#{rx2_window => NFrx2_window};
        {#{rx2_window := PFrx2_window}, _} ->
            S10#{rx2_window => PFrx2_window};
        {_, _} ->
            S10
    end.

verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        blockchain_state_channel_summary_v_1 ->
            v_msg_blockchain_state_channel_summary_v_1(
                Msg,
                [MsgName],
                TrUserData
            );
        blockchain_state_channel_v_1 ->
            v_msg_blockchain_state_channel_v_1(
                Msg,
                [MsgName],
                TrUserData
            );
        blockchain_state_channel_response_v_1 ->
            v_msg_blockchain_state_channel_response_v_1(
                Msg,
                [MsgName],
                TrUserData
            );
        blockchain_state_channel_packet_v_1 ->
            v_msg_blockchain_state_channel_packet_v_1(
                Msg,
                [MsgName],
                TrUserData
            );
        blockchain_state_channel_offer_v_1 ->
            v_msg_blockchain_state_channel_offer_v_1(
                Msg,
                [MsgName],
                TrUserData
            );
        blockchain_state_channel_purchase_v_1 ->
            v_msg_blockchain_state_channel_purchase_v_1(
                Msg,
                [MsgName],
                TrUserData
            );
        blockchain_state_channel_banner_v_1 ->
            v_msg_blockchain_state_channel_banner_v_1(
                Msg,
                [MsgName],
                TrUserData
            );
        blockchain_state_channel_rejection_v_1 ->
            v_msg_blockchain_state_channel_rejection_v_1(
                Msg,
                [MsgName],
                TrUserData
            );
        blockchain_state_channel_message_v_1 ->
            v_msg_blockchain_state_channel_message_v_1(
                Msg,
                [MsgName],
                TrUserData
            );
        eui ->
            v_msg_eui(Msg, [MsgName], TrUserData);
        routing_information ->
            v_msg_routing_information(Msg, [MsgName], TrUserData);
        window ->
            v_msg_window(Msg, [MsgName], TrUserData);
        packet ->
            v_msg_packet(Msg, [MsgName], TrUserData);
        _ ->
            mk_type_error(not_a_known_message, Msg, [])
    end.

-compile({nowarn_unused_function, v_msg_blockchain_state_channel_summary_v_1/3}).

-dialyzer({nowarn_function, v_msg_blockchain_state_channel_summary_v_1/3}).

v_msg_blockchain_state_channel_summary_v_1(
    #{} = M,
    Path,
    TrUserData
) ->
    case M of
        #{client_pubkeybin := F1} ->
            v_type_bytes(F1, [client_pubkeybin | Path], TrUserData);
        _ ->
            ok
    end,
    case M of
        #{num_packets := F2} ->
            v_type_uint64(F2, [num_packets | Path], TrUserData);
        _ ->
            ok
    end,
    case M of
        #{num_dcs := F3} ->
            v_type_uint64(F3, [num_dcs | Path], TrUserData);
        _ ->
            ok
    end,
    lists:foreach(
        fun
            (client_pubkeybin) -> ok;
            (num_packets) -> ok;
            (num_dcs) -> ok;
            (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
        end,
        maps:keys(M)
    ),
    ok;
v_msg_blockchain_state_channel_summary_v_1(
    M,
    Path,
    _TrUserData
) when is_map(M) ->
    mk_type_error(
        {missing_fields, [] -- maps:keys(M), blockchain_state_channel_summary_v_1},
        M,
        Path
    );
v_msg_blockchain_state_channel_summary_v_1(
    X,
    Path,
    _TrUserData
) ->
    mk_type_error(
        {expected_msg, blockchain_state_channel_summary_v_1},
        X,
        Path
    ).

-compile({nowarn_unused_function, v_msg_blockchain_state_channel_v_1/3}).

-dialyzer({nowarn_function, v_msg_blockchain_state_channel_v_1/3}).

v_msg_blockchain_state_channel_v_1(
    #{} = M,
    Path,
    TrUserData
) ->
    case M of
        #{id := F1} ->
            v_type_bytes(F1, [id | Path], TrUserData);
        _ ->
            ok
    end,
    case M of
        #{owner := F2} ->
            v_type_bytes(F2, [owner | Path], TrUserData);
        _ ->
            ok
    end,
    case M of
        #{credits := F3} ->
            v_type_uint64(F3, [credits | Path], TrUserData);
        _ ->
            ok
    end,
    case M of
        #{nonce := F4} ->
            v_type_uint64(F4, [nonce | Path], TrUserData);
        _ ->
            ok
    end,
    case M of
        #{summaries := F5} ->
            if
                is_list(F5) ->
                    _ = [
                        v_msg_blockchain_state_channel_summary_v_1(
                            Elem,
                            [summaries | Path],
                            TrUserData
                        )
                        || Elem <- F5
                    ],
                    ok;
                true ->
                    mk_type_error(
                        {invalid_list_of, {msg, blockchain_state_channel_summary_v_1}},
                        F5,
                        [summaries | Path]
                    )
            end;
        _ ->
            ok
    end,
    case M of
        #{root_hash := F6} ->
            v_type_bytes(F6, [root_hash | Path], TrUserData);
        _ ->
            ok
    end,
    case M of
        #{skewed := F7} ->
            v_type_bytes(F7, [skewed | Path], TrUserData);
        _ ->
            ok
    end,
    case M of
        #{state := F8} ->
            'v_enum_helium.blockchain_state_channel_state_v1'(
                F8,
                [state | Path],
                TrUserData
            );
        _ ->
            ok
    end,
    case M of
        #{expire_at_block := F9} ->
            v_type_uint64(F9, [expire_at_block | Path], TrUserData);
        _ ->
            ok
    end,
    case M of
        #{signature := F10} ->
            v_type_bytes(F10, [signature | Path], TrUserData);
        _ ->
            ok
    end,
    lists:foreach(
        fun
            (id) -> ok;
            (owner) -> ok;
            (credits) -> ok;
            (nonce) -> ok;
            (summaries) -> ok;
            (root_hash) -> ok;
            (skewed) -> ok;
            (state) -> ok;
            (expire_at_block) -> ok;
            (signature) -> ok;
            (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
        end,
        maps:keys(M)
    ),
    ok;
v_msg_blockchain_state_channel_v_1(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error(
        {missing_fields, [] -- maps:keys(M), blockchain_state_channel_v_1},
        M,
        Path
    );
v_msg_blockchain_state_channel_v_1(
    X,
    Path,
    _TrUserData
) ->
    mk_type_error(
        {expected_msg, blockchain_state_channel_v_1},
        X,
        Path
    ).

-compile({nowarn_unused_function, v_msg_blockchain_state_channel_response_v_1/3}).

-dialyzer({nowarn_function, v_msg_blockchain_state_channel_response_v_1/3}).

v_msg_blockchain_state_channel_response_v_1(
    #{} = M,
    Path,
    TrUserData
) ->
    case M of
        #{accepted := F1} ->
            v_type_bool(F1, [accepted | Path], TrUserData);
        _ ->
            ok
    end,
    case M of
        #{downlink := F2} ->
            v_msg_packet(F2, [downlink | Path], TrUserData);
        _ ->
            ok
    end,
    lists:foreach(
        fun
            (accepted) -> ok;
            (downlink) -> ok;
            (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
        end,
        maps:keys(M)
    ),
    ok;
v_msg_blockchain_state_channel_response_v_1(
    M,
    Path,
    _TrUserData
) when is_map(M) ->
    mk_type_error(
        {missing_fields, [] -- maps:keys(M), blockchain_state_channel_response_v_1},
        M,
        Path
    );
v_msg_blockchain_state_channel_response_v_1(
    X,
    Path,
    _TrUserData
) ->
    mk_type_error(
        {expected_msg, blockchain_state_channel_response_v_1},
        X,
        Path
    ).

-compile({nowarn_unused_function, v_msg_blockchain_state_channel_packet_v_1/3}).

-dialyzer({nowarn_function, v_msg_blockchain_state_channel_packet_v_1/3}).

v_msg_blockchain_state_channel_packet_v_1(
    #{} = M,
    Path,
    TrUserData
) ->
    case M of
        #{packet := F1} ->
            v_msg_packet(F1, [packet | Path], TrUserData);
        _ ->
            ok
    end,
    case M of
        #{hotspot := F2} ->
            v_type_bytes(F2, [hotspot | Path], TrUserData);
        _ ->
            ok
    end,
    case M of
        #{signature := F3} ->
            v_type_bytes(F3, [signature | Path], TrUserData);
        _ ->
            ok
    end,
    case M of
        #{region := F4} ->
            'v_enum_helium.Region'(F4, [region | Path], TrUserData);
        _ ->
            ok
    end,
    lists:foreach(
        fun
            (packet) -> ok;
            (hotspot) -> ok;
            (signature) -> ok;
            (region) -> ok;
            (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
        end,
        maps:keys(M)
    ),
    ok;
v_msg_blockchain_state_channel_packet_v_1(
    M,
    Path,
    _TrUserData
) when is_map(M) ->
    mk_type_error(
        {missing_fields, [] -- maps:keys(M), blockchain_state_channel_packet_v_1},
        M,
        Path
    );
v_msg_blockchain_state_channel_packet_v_1(
    X,
    Path,
    _TrUserData
) ->
    mk_type_error(
        {expected_msg, blockchain_state_channel_packet_v_1},
        X,
        Path
    ).

-compile({nowarn_unused_function, v_msg_blockchain_state_channel_offer_v_1/3}).

-dialyzer({nowarn_function, v_msg_blockchain_state_channel_offer_v_1/3}).

v_msg_blockchain_state_channel_offer_v_1(
    #{} = M,
    Path,
    TrUserData
) ->
    case M of
        #{routing := F1} ->
            v_msg_routing_information(
                F1,
                [routing | Path],
                TrUserData
            );
        _ ->
            ok
    end,
    case M of
        #{packet_hash := F2} ->
            v_type_bytes(F2, [packet_hash | Path], TrUserData);
        _ ->
            ok
    end,
    case M of
        #{payload_size := F3} ->
            v_type_uint64(F3, [payload_size | Path], TrUserData);
        _ ->
            ok
    end,
    case M of
        #{fcnt := F4} ->
            v_type_uint32(F4, [fcnt | Path], TrUserData);
        _ ->
            ok
    end,
    case M of
        #{hotspot := F5} ->
            v_type_bytes(F5, [hotspot | Path], TrUserData);
        _ ->
            ok
    end,
    case M of
        #{signature := F6} ->
            v_type_bytes(F6, [signature | Path], TrUserData);
        _ ->
            ok
    end,
    case M of
        #{region := F7} ->
            'v_enum_helium.Region'(F7, [region | Path], TrUserData);
        _ ->
            ok
    end,
    lists:foreach(
        fun
            (routing) -> ok;
            (packet_hash) -> ok;
            (payload_size) -> ok;
            (fcnt) -> ok;
            (hotspot) -> ok;
            (signature) -> ok;
            (region) -> ok;
            (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
        end,
        maps:keys(M)
    ),
    ok;
v_msg_blockchain_state_channel_offer_v_1(
    M,
    Path,
    _TrUserData
) when is_map(M) ->
    mk_type_error(
        {missing_fields, [] -- maps:keys(M), blockchain_state_channel_offer_v_1},
        M,
        Path
    );
v_msg_blockchain_state_channel_offer_v_1(
    X,
    Path,
    _TrUserData
) ->
    mk_type_error(
        {expected_msg, blockchain_state_channel_offer_v_1},
        X,
        Path
    ).

-compile({nowarn_unused_function, v_msg_blockchain_state_channel_purchase_v_1/3}).

-dialyzer({nowarn_function, v_msg_blockchain_state_channel_purchase_v_1/3}).

v_msg_blockchain_state_channel_purchase_v_1(
    #{} = M,
    Path,
    TrUserData
) ->
    case M of
        #{sc := F1} ->
            v_msg_blockchain_state_channel_v_1(
                F1,
                [sc | Path],
                TrUserData
            );
        _ ->
            ok
    end,
    case M of
        #{hotspot := F2} ->
            v_type_bytes(F2, [hotspot | Path], TrUserData);
        _ ->
            ok
    end,
    case M of
        #{packet_hash := F3} ->
            v_type_bytes(F3, [packet_hash | Path], TrUserData);
        _ ->
            ok
    end,
    case M of
        #{region := F4} ->
            'v_enum_helium.Region'(F4, [region | Path], TrUserData);
        _ ->
            ok
    end,
    lists:foreach(
        fun
            (sc) -> ok;
            (hotspot) -> ok;
            (packet_hash) -> ok;
            (region) -> ok;
            (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
        end,
        maps:keys(M)
    ),
    ok;
v_msg_blockchain_state_channel_purchase_v_1(
    M,
    Path,
    _TrUserData
) when is_map(M) ->
    mk_type_error(
        {missing_fields, [] -- maps:keys(M), blockchain_state_channel_purchase_v_1},
        M,
        Path
    );
v_msg_blockchain_state_channel_purchase_v_1(
    X,
    Path,
    _TrUserData
) ->
    mk_type_error(
        {expected_msg, blockchain_state_channel_purchase_v_1},
        X,
        Path
    ).

-compile({nowarn_unused_function, v_msg_blockchain_state_channel_banner_v_1/3}).

-dialyzer({nowarn_function, v_msg_blockchain_state_channel_banner_v_1/3}).

v_msg_blockchain_state_channel_banner_v_1(
    #{} = M,
    Path,
    TrUserData
) ->
    case M of
        #{sc := F1} ->
            v_msg_blockchain_state_channel_v_1(
                F1,
                [sc | Path],
                TrUserData
            );
        _ ->
            ok
    end,
    lists:foreach(
        fun
            (sc) -> ok;
            (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
        end,
        maps:keys(M)
    ),
    ok;
v_msg_blockchain_state_channel_banner_v_1(
    M,
    Path,
    _TrUserData
) when is_map(M) ->
    mk_type_error(
        {missing_fields, [] -- maps:keys(M), blockchain_state_channel_banner_v_1},
        M,
        Path
    );
v_msg_blockchain_state_channel_banner_v_1(
    X,
    Path,
    _TrUserData
) ->
    mk_type_error(
        {expected_msg, blockchain_state_channel_banner_v_1},
        X,
        Path
    ).

-compile({nowarn_unused_function, v_msg_blockchain_state_channel_rejection_v_1/3}).

-dialyzer({nowarn_function, v_msg_blockchain_state_channel_rejection_v_1/3}).

v_msg_blockchain_state_channel_rejection_v_1(
    #{} = M,
    Path,
    TrUserData
) ->
    case M of
        #{reject := F1} ->
            v_type_uint32(F1, [reject | Path], TrUserData);
        _ ->
            ok
    end,
    lists:foreach(
        fun
            (reject) -> ok;
            (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
        end,
        maps:keys(M)
    ),
    ok;
v_msg_blockchain_state_channel_rejection_v_1(
    M,
    Path,
    _TrUserData
) when is_map(M) ->
    mk_type_error(
        {missing_fields, [] -- maps:keys(M), blockchain_state_channel_rejection_v_1},
        M,
        Path
    );
v_msg_blockchain_state_channel_rejection_v_1(
    X,
    Path,
    _TrUserData
) ->
    mk_type_error(
        {expected_msg, blockchain_state_channel_rejection_v_1},
        X,
        Path
    ).

-compile({nowarn_unused_function, v_msg_blockchain_state_channel_message_v_1/3}).

-dialyzer({nowarn_function, v_msg_blockchain_state_channel_message_v_1/3}).

v_msg_blockchain_state_channel_message_v_1(
    #{} = M,
    Path,
    TrUserData
) ->
    case M of
        #{msg := {response, OF1}} ->
            v_msg_blockchain_state_channel_response_v_1(
                OF1,
                [response, msg | Path],
                TrUserData
            );
        #{msg := {packet, OF1}} ->
            v_msg_blockchain_state_channel_packet_v_1(
                OF1,
                [packet, msg | Path],
                TrUserData
            );
        #{msg := {offer, OF1}} ->
            v_msg_blockchain_state_channel_offer_v_1(
                OF1,
                [offer, msg | Path],
                TrUserData
            );
        #{msg := {purchase, OF1}} ->
            v_msg_blockchain_state_channel_purchase_v_1(
                OF1,
                [purchase, msg | Path],
                TrUserData
            );
        #{msg := {banner, OF1}} ->
            v_msg_blockchain_state_channel_banner_v_1(
                OF1,
                [banner, msg | Path],
                TrUserData
            );
        #{msg := {reject, OF1}} ->
            v_msg_blockchain_state_channel_rejection_v_1(
                OF1,
                [reject, msg | Path],
                TrUserData
            );
        #{msg := F1} ->
            mk_type_error(invalid_oneof, F1, [msg | Path]);
        _ ->
            ok
    end,
    lists:foreach(
        fun
            (msg) -> ok;
            (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
        end,
        maps:keys(M)
    ),
    ok;
v_msg_blockchain_state_channel_message_v_1(
    M,
    Path,
    _TrUserData
) when is_map(M) ->
    mk_type_error(
        {missing_fields, [] -- maps:keys(M), blockchain_state_channel_message_v_1},
        M,
        Path
    );
v_msg_blockchain_state_channel_message_v_1(
    X,
    Path,
    _TrUserData
) ->
    mk_type_error(
        {expected_msg, blockchain_state_channel_message_v_1},
        X,
        Path
    ).

-compile({nowarn_unused_function, v_msg_eui/3}).

-dialyzer({nowarn_function, v_msg_eui/3}).

v_msg_eui(#{} = M, Path, TrUserData) ->
    case M of
        #{deveui := F1} ->
            v_type_uint64(F1, [deveui | Path], TrUserData);
        _ ->
            ok
    end,
    case M of
        #{appeui := F2} ->
            v_type_uint64(F2, [appeui | Path], TrUserData);
        _ ->
            ok
    end,
    lists:foreach(
        fun
            (deveui) -> ok;
            (appeui) -> ok;
            (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
        end,
        maps:keys(M)
    ),
    ok;
v_msg_eui(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error(
        {missing_fields, [] -- maps:keys(M), eui},
        M,
        Path
    );
v_msg_eui(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, eui}, X, Path).

-compile({nowarn_unused_function, v_msg_routing_information/3}).

-dialyzer({nowarn_function, v_msg_routing_information/3}).

v_msg_routing_information(#{} = M, Path, TrUserData) ->
    case M of
        #{data := {devaddr, OF1}} ->
            v_type_uint32(OF1, [devaddr, data | Path], TrUserData);
        #{data := {eui, OF1}} ->
            v_msg_eui(OF1, [eui, data | Path], TrUserData);
        #{data := F1} ->
            mk_type_error(invalid_oneof, F1, [data | Path]);
        _ ->
            ok
    end,
    lists:foreach(
        fun
            (data) -> ok;
            (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
        end,
        maps:keys(M)
    ),
    ok;
v_msg_routing_information(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error(
        {missing_fields, [] -- maps:keys(M), routing_information},
        M,
        Path
    );
v_msg_routing_information(X, Path, _TrUserData) ->
    mk_type_error(
        {expected_msg, routing_information},
        X,
        Path
    ).

-compile({nowarn_unused_function, v_msg_window/3}).

-dialyzer({nowarn_function, v_msg_window/3}).

v_msg_window(#{} = M, Path, TrUserData) ->
    case M of
        #{timestamp := F1} ->
            v_type_uint64(F1, [timestamp | Path], TrUserData);
        _ ->
            ok
    end,
    case M of
        #{frequency := F2} ->
            v_type_float(F2, [frequency | Path], TrUserData);
        _ ->
            ok
    end,
    case M of
        #{datarate := F3} ->
            v_type_string(F3, [datarate | Path], TrUserData);
        _ ->
            ok
    end,
    lists:foreach(
        fun
            (timestamp) -> ok;
            (frequency) -> ok;
            (datarate) -> ok;
            (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
        end,
        maps:keys(M)
    ),
    ok;
v_msg_window(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error(
        {missing_fields, [] -- maps:keys(M), window},
        M,
        Path
    );
v_msg_window(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, window}, X, Path).

-compile({nowarn_unused_function, v_msg_packet/3}).

-dialyzer({nowarn_function, v_msg_packet/3}).

v_msg_packet(#{} = M, Path, TrUserData) ->
    case M of
        #{oui := F1} ->
            v_type_uint32(F1, [oui | Path], TrUserData);
        _ ->
            ok
    end,
    case M of
        #{type := F2} ->
            'v_enum_packet.packet_type'(
                F2,
                [type | Path],
                TrUserData
            );
        _ ->
            ok
    end,
    case M of
        #{payload := F3} ->
            v_type_bytes(F3, [payload | Path], TrUserData);
        _ ->
            ok
    end,
    case M of
        #{timestamp := F4} ->
            v_type_uint64(F4, [timestamp | Path], TrUserData);
        _ ->
            ok
    end,
    case M of
        #{signal_strength := F5} ->
            v_type_float(F5, [signal_strength | Path], TrUserData);
        _ ->
            ok
    end,
    case M of
        #{frequency := F6} ->
            v_type_float(F6, [frequency | Path], TrUserData);
        _ ->
            ok
    end,
    case M of
        #{datarate := F7} ->
            v_type_string(F7, [datarate | Path], TrUserData);
        _ ->
            ok
    end,
    case M of
        #{snr := F8} ->
            v_type_float(F8, [snr | Path], TrUserData);
        _ ->
            ok
    end,
    case M of
        #{routing := F9} ->
            v_msg_routing_information(
                F9,
                [routing | Path],
                TrUserData
            );
        _ ->
            ok
    end,
    case M of
        #{rx2_window := F10} ->
            v_msg_window(F10, [rx2_window | Path], TrUserData);
        _ ->
            ok
    end,
    lists:foreach(
        fun
            (oui) -> ok;
            (type) -> ok;
            (payload) -> ok;
            (timestamp) -> ok;
            (signal_strength) -> ok;
            (frequency) -> ok;
            (datarate) -> ok;
            (snr) -> ok;
            (routing) -> ok;
            (rx2_window) -> ok;
            (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
        end,
        maps:keys(M)
    ),
    ok;
v_msg_packet(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error(
        {missing_fields, [] -- maps:keys(M), packet},
        M,
        Path
    );
v_msg_packet(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, packet}, X, Path).

-compile({nowarn_unused_function, 'v_enum_helium.Region'/3}).

-dialyzer({nowarn_function, 'v_enum_helium.Region'/3}).

'v_enum_helium.Region'('US915', _Path, _TrUserData) ->
    ok;
'v_enum_helium.Region'('EU868', _Path, _TrUserData) ->
    ok;
'v_enum_helium.Region'('EU433', _Path, _TrUserData) ->
    ok;
'v_enum_helium.Region'('CN470', _Path, _TrUserData) ->
    ok;
'v_enum_helium.Region'('CN779', _Path, _TrUserData) ->
    ok;
'v_enum_helium.Region'('AU915', _Path, _TrUserData) ->
    ok;
'v_enum_helium.Region'('AS923', _Path, _TrUserData) ->
    ok;
'v_enum_helium.Region'('KR920', _Path, _TrUserData) ->
    ok;
'v_enum_helium.Region'('IN865', _Path, _TrUserData) ->
    ok;
'v_enum_helium.Region'(V, Path, TrUserData) when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_helium.Region'(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'helium.Region'}, X, Path).

-compile({nowarn_unused_function, 'v_enum_helium.blockchain_state_channel_state_v1'/3}).

-dialyzer({nowarn_function, 'v_enum_helium.blockchain_state_channel_state_v1'/3}).

'v_enum_helium.blockchain_state_channel_state_v1'(
    open,
    _Path,
    _TrUserData
) ->
    ok;
'v_enum_helium.blockchain_state_channel_state_v1'(
    closed,
    _Path,
    _TrUserData
) ->
    ok;
'v_enum_helium.blockchain_state_channel_state_v1'(
    V,
    Path,
    TrUserData
) when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_helium.blockchain_state_channel_state_v1'(
    X,
    Path,
    _TrUserData
) ->
    mk_type_error(
        {invalid_enum, 'helium.blockchain_state_channel_state_v1'},
        X,
        Path
    ).

-compile({nowarn_unused_function, 'v_enum_packet.packet_type'/3}).

-dialyzer({nowarn_function, 'v_enum_packet.packet_type'/3}).

'v_enum_packet.packet_type'(
    longfi,
    _Path,
    _TrUserData
) ->
    ok;
'v_enum_packet.packet_type'(
    lorawan,
    _Path,
    _TrUserData
) ->
    ok;
'v_enum_packet.packet_type'(V, Path, TrUserData) when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_packet.packet_type'(X, Path, _TrUserData) ->
    mk_type_error(
        {invalid_enum, 'packet.packet_type'},
        X,
        Path
    ).

-compile({nowarn_unused_function, v_type_sint32/3}).

-dialyzer({nowarn_function, v_type_sint32/3}).

v_type_sint32(N, _Path, _TrUserData) when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_sint32(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error(
        {value_out_of_range, sint32, signed, 32},
        N,
        Path
    );
v_type_sint32(X, Path, _TrUserData) ->
    mk_type_error(
        {bad_integer, sint32, signed, 32},
        X,
        Path
    ).

-compile({nowarn_unused_function, v_type_uint32/3}).

-dialyzer({nowarn_function, v_type_uint32/3}).

v_type_uint32(N, _Path, _TrUserData) when 0 =< N, N =< 4294967295 ->
    ok;
v_type_uint32(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error(
        {value_out_of_range, uint32, unsigned, 32},
        N,
        Path
    );
v_type_uint32(X, Path, _TrUserData) ->
    mk_type_error(
        {bad_integer, uint32, unsigned, 32},
        X,
        Path
    ).

-compile({nowarn_unused_function, v_type_uint64/3}).

-dialyzer({nowarn_function, v_type_uint64/3}).

v_type_uint64(N, _Path, _TrUserData) when 0 =< N, N =< 18446744073709551615 ->
    ok;
v_type_uint64(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error(
        {value_out_of_range, uint64, unsigned, 64},
        N,
        Path
    );
v_type_uint64(X, Path, _TrUserData) ->
    mk_type_error(
        {bad_integer, uint64, unsigned, 64},
        X,
        Path
    ).

-compile({nowarn_unused_function, v_type_bool/3}).

-dialyzer({nowarn_function, v_type_bool/3}).

v_type_bool(false, _Path, _TrUserData) -> ok;
v_type_bool(true, _Path, _TrUserData) -> ok;
v_type_bool(0, _Path, _TrUserData) -> ok;
v_type_bool(1, _Path, _TrUserData) -> ok;
v_type_bool(X, Path, _TrUserData) -> mk_type_error(bad_boolean_value, X, Path).

-compile({nowarn_unused_function, v_type_float/3}).

-dialyzer({nowarn_function, v_type_float/3}).

v_type_float(N, _Path, _TrUserData) when is_float(N) ->
    ok;
v_type_float(N, _Path, _TrUserData) when is_integer(N) ->
    ok;
v_type_float(infinity, _Path, _TrUserData) ->
    ok;
v_type_float('-infinity', _Path, _TrUserData) ->
    ok;
v_type_float(nan, _Path, _TrUserData) ->
    ok;
v_type_float(X, Path, _TrUserData) ->
    mk_type_error(bad_float_value, X, Path).

-compile({nowarn_unused_function, v_type_string/3}).

-dialyzer({nowarn_function, v_type_string/3}).

v_type_string(S, Path, _TrUserData) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
        B when is_binary(B) -> ok;
        {error, _, _} -> mk_type_error(bad_unicode_string, S, Path)
    catch
        error:badarg ->
            mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) ->
    mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function, v_type_bytes/3}).

-dialyzer({nowarn_function, v_type_bytes/3}).

v_type_bytes(B, _Path, _TrUserData) when is_binary(B) ->
    ok;
v_type_bytes(B, _Path, _TrUserData) when is_list(B) ->
    ok;
v_type_bytes(X, Path, _TrUserData) ->
    mk_type_error(bad_binary_value, X, Path).

-compile({nowarn_unused_function, mk_type_error/3}).

-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error, {Error, [{value, ValueSeen}, {path, Path2}]}}).

-compile({nowarn_unused_function, prettify_path/1}).

-dialyzer({nowarn_function, prettify_path/1}).

prettify_path([]) ->
    top_level;
prettify_path(PathR) ->
    list_to_atom(
        lists:append(
            lists:join(
                ".",
                lists:map(
                    fun atom_to_list/1,
                    lists:reverse(PathR)
                )
            )
        )
    ).

-compile({nowarn_unused_function, id/2}).
-compile({inline, id/2}).

id(X, _TrUserData) -> X.

-compile({nowarn_unused_function, v_ok/3}).
-compile({inline, v_ok/3}).

v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function, m_overwrite/3}).
-compile({inline, m_overwrite/3}).

m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function, cons/3}).
-compile({inline, cons/3}).

cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function, lists_reverse/2}).
-compile({inline, lists_reverse/2}).

'lists_reverse'(L, _TrUserData) -> lists:reverse(L).

-compile({nowarn_unused_function, 'erlang_++'/3}).
-compile({inline, 'erlang_++'/3}).

'erlang_++'(A, B, _TrUserData) -> A ++ B.

get_msg_defs() ->
    [
        {{enum, 'helium.Region'}, [
            {'US915', 0},
            {'EU868', 1},
            {'EU433', 2},
            {'CN470', 3},
            {'CN779', 4},
            {'AU915', 5},
            {'AS923', 6},
            {'KR920', 7},
            {'IN865', 8}
        ]},
        {{enum, 'helium.blockchain_state_channel_state_v1'}, [{open, 0}, {closed, 1}]},
        {{enum, 'packet.packet_type'}, [{longfi, 0}, {lorawan, 1}]},
        {{msg, blockchain_state_channel_summary_v_1}, [
            #{
                name => client_pubkeybin,
                fnum => 1,
                rnum => 2,
                type => bytes,
                occurrence => optional,
                opts => []
            },
            #{
                name => num_packets,
                fnum => 2,
                rnum => 3,
                type => uint64,
                occurrence => optional,
                opts => []
            },
            #{
                name => num_dcs,
                fnum => 3,
                rnum => 4,
                type => uint64,
                occurrence => optional,
                opts => []
            }
        ]},
        {{msg, blockchain_state_channel_v_1}, [
            #{
                name => id,
                fnum => 1,
                rnum => 2,
                type => bytes,
                occurrence => optional,
                opts => []
            },
            #{
                name => owner,
                fnum => 2,
                rnum => 3,
                type => bytes,
                occurrence => optional,
                opts => []
            },
            #{
                name => credits,
                fnum => 3,
                rnum => 4,
                type => uint64,
                occurrence => optional,
                opts => []
            },
            #{
                name => nonce,
                fnum => 4,
                rnum => 5,
                type => uint64,
                occurrence => optional,
                opts => []
            },
            #{
                name => summaries,
                fnum => 5,
                rnum => 6,
                type => {msg, blockchain_state_channel_summary_v_1},
                occurrence => repeated,
                opts => []
            },
            #{
                name => root_hash,
                fnum => 6,
                rnum => 7,
                type => bytes,
                occurrence => optional,
                opts => []
            },
            #{
                name => skewed,
                fnum => 7,
                rnum => 8,
                type => bytes,
                occurrence => optional,
                opts => []
            },
            #{
                name => state,
                fnum => 8,
                rnum => 9,
                type =>
                    {enum, 'helium.blockchain_state_channel_state_v1'},
                occurrence => optional,
                opts => []
            },
            #{
                name => expire_at_block,
                fnum => 9,
                rnum => 10,
                type => uint64,
                occurrence => optional,
                opts => []
            },
            #{
                name => signature,
                fnum => 10,
                rnum => 11,
                type => bytes,
                occurrence => optional,
                opts => []
            }
        ]},
        {{msg, blockchain_state_channel_response_v_1}, [
            #{
                name => accepted,
                fnum => 1,
                rnum => 2,
                type => bool,
                occurrence => optional,
                opts => []
            },
            #{
                name => downlink,
                fnum => 4,
                rnum => 3,
                type => {msg, packet},
                occurrence => optional,
                opts => []
            }
        ]},
        {{msg, blockchain_state_channel_packet_v_1}, [
            #{
                name => packet,
                fnum => 1,
                rnum => 2,
                type => {msg, packet},
                occurrence => optional,
                opts => []
            },
            #{
                name => hotspot,
                fnum => 2,
                rnum => 3,
                type => bytes,
                occurrence => optional,
                opts => []
            },
            #{
                name => signature,
                fnum => 3,
                rnum => 4,
                type => bytes,
                occurrence => optional,
                opts => []
            },
            #{
                name => region,
                fnum => 4,
                rnum => 5,
                type => {enum, 'helium.Region'},
                occurrence => optional,
                opts => []
            }
        ]},
        {{msg, blockchain_state_channel_offer_v_1}, [
            #{
                name => routing,
                fnum => 1,
                rnum => 2,
                type => {msg, routing_information},
                occurrence => optional,
                opts => []
            },
            #{
                name => packet_hash,
                fnum => 2,
                rnum => 3,
                type => bytes,
                occurrence => optional,
                opts => []
            },
            #{
                name => payload_size,
                fnum => 3,
                rnum => 4,
                type => uint64,
                occurrence => optional,
                opts => []
            },
            #{
                name => fcnt,
                fnum => 4,
                rnum => 5,
                type => uint32,
                occurrence => optional,
                opts => []
            },
            #{
                name => hotspot,
                fnum => 5,
                rnum => 6,
                type => bytes,
                occurrence => optional,
                opts => []
            },
            #{
                name => signature,
                fnum => 6,
                rnum => 7,
                type => bytes,
                occurrence => optional,
                opts => []
            },
            #{
                name => region,
                fnum => 7,
                rnum => 8,
                type => {enum, 'helium.Region'},
                occurrence => optional,
                opts => []
            }
        ]},
        {{msg, blockchain_state_channel_purchase_v_1}, [
            #{
                name => sc,
                fnum => 1,
                rnum => 2,
                type => {msg, blockchain_state_channel_v_1},
                occurrence => optional,
                opts => []
            },
            #{
                name => hotspot,
                fnum => 2,
                rnum => 3,
                type => bytes,
                occurrence => optional,
                opts => []
            },
            #{
                name => packet_hash,
                fnum => 3,
                rnum => 4,
                type => bytes,
                occurrence => optional,
                opts => []
            },
            #{
                name => region,
                fnum => 4,
                rnum => 5,
                type => {enum, 'helium.Region'},
                occurrence => optional,
                opts => []
            }
        ]},
        {{msg, blockchain_state_channel_banner_v_1}, [
            #{
                name => sc,
                fnum => 1,
                rnum => 2,
                type => {msg, blockchain_state_channel_v_1},
                occurrence => optional,
                opts => []
            }
        ]},
        {{msg, blockchain_state_channel_rejection_v_1}, [
            #{
                name => reject,
                fnum => 1,
                rnum => 2,
                type => uint32,
                occurrence => optional,
                opts => []
            }
        ]},
        {{msg, blockchain_state_channel_message_v_1}, [
            #{
                name => msg,
                rnum => 2,
                fields => [
                    #{
                        name => response,
                        fnum => 2,
                        rnum => 2,
                        type => {msg, blockchain_state_channel_response_v_1},
                        occurrence => optional,
                        opts => []
                    },
                    #{
                        name => packet,
                        fnum => 4,
                        rnum => 2,
                        type => {msg, blockchain_state_channel_packet_v_1},
                        occurrence => optional,
                        opts => []
                    },
                    #{
                        name => offer,
                        fnum => 5,
                        rnum => 2,
                        type => {msg, blockchain_state_channel_offer_v_1},
                        occurrence => optional,
                        opts => []
                    },
                    #{
                        name => purchase,
                        fnum => 6,
                        rnum => 2,
                        type => {msg, blockchain_state_channel_purchase_v_1},
                        occurrence => optional,
                        opts => []
                    },
                    #{
                        name => banner,
                        fnum => 7,
                        rnum => 2,
                        type => {msg, blockchain_state_channel_banner_v_1},
                        occurrence => optional,
                        opts => []
                    },
                    #{
                        name => reject,
                        fnum => 8,
                        rnum => 2,
                        type => {msg, blockchain_state_channel_rejection_v_1},
                        occurrence => optional,
                        opts => []
                    }
                ]
            }
        ]},
        {{msg, eui}, [
            #{
                name => deveui,
                fnum => 1,
                rnum => 2,
                type => uint64,
                occurrence => optional,
                opts => []
            },
            #{
                name => appeui,
                fnum => 2,
                rnum => 3,
                type => uint64,
                occurrence => optional,
                opts => []
            }
        ]},
        {{msg, routing_information}, [
            #{
                name => data,
                rnum => 2,
                fields => [
                    #{
                        name => devaddr,
                        fnum => 1,
                        rnum => 2,
                        type => uint32,
                        occurrence => optional,
                        opts => []
                    },
                    #{
                        name => eui,
                        fnum => 2,
                        rnum => 2,
                        type => {msg, eui},
                        occurrence => optional,
                        opts => []
                    }
                ]
            }
        ]},
        {{msg, window}, [
            #{
                name => timestamp,
                fnum => 1,
                rnum => 2,
                type => uint64,
                occurrence => optional,
                opts => []
            },
            #{
                name => frequency,
                fnum => 2,
                rnum => 3,
                type => float,
                occurrence => optional,
                opts => []
            },
            #{
                name => datarate,
                fnum => 3,
                rnum => 4,
                type => string,
                occurrence => optional,
                opts => []
            }
        ]},
        {{msg, packet}, [
            #{
                name => oui,
                fnum => 1,
                rnum => 2,
                type => uint32,
                occurrence => optional,
                opts => []
            },
            #{
                name => type,
                fnum => 2,
                rnum => 3,
                type => {enum, 'packet.packet_type'},
                occurrence => optional,
                opts => []
            },
            #{
                name => payload,
                fnum => 3,
                rnum => 4,
                type => bytes,
                occurrence => optional,
                opts => []
            },
            #{
                name => timestamp,
                fnum => 4,
                rnum => 5,
                type => uint64,
                occurrence => optional,
                opts => []
            },
            #{
                name => signal_strength,
                fnum => 5,
                rnum => 6,
                type => float,
                occurrence => optional,
                opts => []
            },
            #{
                name => frequency,
                fnum => 6,
                rnum => 7,
                type => float,
                occurrence => optional,
                opts => []
            },
            #{
                name => datarate,
                fnum => 7,
                rnum => 8,
                type => string,
                occurrence => optional,
                opts => []
            },
            #{
                name => snr,
                fnum => 8,
                rnum => 9,
                type => float,
                occurrence => optional,
                opts => []
            },
            #{
                name => routing,
                fnum => 9,
                rnum => 10,
                type => {msg, routing_information},
                occurrence => optional,
                opts => []
            },
            #{
                name => rx2_window,
                fnum => 10,
                rnum => 11,
                type => {msg, window},
                occurrence => optional,
                opts => []
            }
        ]}
    ].

get_msg_names() ->
    [
        blockchain_state_channel_summary_v_1,
        blockchain_state_channel_v_1,
        blockchain_state_channel_response_v_1,
        blockchain_state_channel_packet_v_1,
        blockchain_state_channel_offer_v_1,
        blockchain_state_channel_purchase_v_1,
        blockchain_state_channel_banner_v_1,
        blockchain_state_channel_rejection_v_1,
        blockchain_state_channel_message_v_1,
        eui,
        routing_information,
        window,
        packet
    ].

get_group_names() -> [].

get_msg_or_group_names() ->
    [
        blockchain_state_channel_summary_v_1,
        blockchain_state_channel_v_1,
        blockchain_state_channel_response_v_1,
        blockchain_state_channel_packet_v_1,
        blockchain_state_channel_offer_v_1,
        blockchain_state_channel_purchase_v_1,
        blockchain_state_channel_banner_v_1,
        blockchain_state_channel_rejection_v_1,
        blockchain_state_channel_message_v_1,
        eui,
        routing_information,
        window,
        packet
    ].

get_enum_names() ->
    [
        'helium.Region',
        'helium.blockchain_state_channel_state_v1',
        'packet.packet_type'
    ].

fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
        Fs when is_list(Fs) -> Fs;
        error -> erlang:error({no_such_msg, MsgName})
    end.

fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
        Es when is_list(Es) -> Es;
        error -> erlang:error({no_such_enum, EnumName})
    end.

find_msg_def(blockchain_state_channel_summary_v_1) ->
    [
        #{
            name => client_pubkeybin,
            fnum => 1,
            rnum => 2,
            type => bytes,
            occurrence => optional,
            opts => []
        },
        #{
            name => num_packets,
            fnum => 2,
            rnum => 3,
            type => uint64,
            occurrence => optional,
            opts => []
        },
        #{
            name => num_dcs,
            fnum => 3,
            rnum => 4,
            type => uint64,
            occurrence => optional,
            opts => []
        }
    ];
find_msg_def(blockchain_state_channel_v_1) ->
    [
        #{
            name => id,
            fnum => 1,
            rnum => 2,
            type => bytes,
            occurrence => optional,
            opts => []
        },
        #{
            name => owner,
            fnum => 2,
            rnum => 3,
            type => bytes,
            occurrence => optional,
            opts => []
        },
        #{
            name => credits,
            fnum => 3,
            rnum => 4,
            type => uint64,
            occurrence => optional,
            opts => []
        },
        #{
            name => nonce,
            fnum => 4,
            rnum => 5,
            type => uint64,
            occurrence => optional,
            opts => []
        },
        #{
            name => summaries,
            fnum => 5,
            rnum => 6,
            type => {msg, blockchain_state_channel_summary_v_1},
            occurrence => repeated,
            opts => []
        },
        #{
            name => root_hash,
            fnum => 6,
            rnum => 7,
            type => bytes,
            occurrence => optional,
            opts => []
        },
        #{
            name => skewed,
            fnum => 7,
            rnum => 8,
            type => bytes,
            occurrence => optional,
            opts => []
        },
        #{
            name => state,
            fnum => 8,
            rnum => 9,
            type =>
                {enum, 'helium.blockchain_state_channel_state_v1'},
            occurrence => optional,
            opts => []
        },
        #{
            name => expire_at_block,
            fnum => 9,
            rnum => 10,
            type => uint64,
            occurrence => optional,
            opts => []
        },
        #{
            name => signature,
            fnum => 10,
            rnum => 11,
            type => bytes,
            occurrence => optional,
            opts => []
        }
    ];
find_msg_def(blockchain_state_channel_response_v_1) ->
    [
        #{
            name => accepted,
            fnum => 1,
            rnum => 2,
            type => bool,
            occurrence => optional,
            opts => []
        },
        #{
            name => downlink,
            fnum => 4,
            rnum => 3,
            type => {msg, packet},
            occurrence => optional,
            opts => []
        }
    ];
find_msg_def(blockchain_state_channel_packet_v_1) ->
    [
        #{
            name => packet,
            fnum => 1,
            rnum => 2,
            type => {msg, packet},
            occurrence => optional,
            opts => []
        },
        #{
            name => hotspot,
            fnum => 2,
            rnum => 3,
            type => bytes,
            occurrence => optional,
            opts => []
        },
        #{
            name => signature,
            fnum => 3,
            rnum => 4,
            type => bytes,
            occurrence => optional,
            opts => []
        },
        #{
            name => region,
            fnum => 4,
            rnum => 5,
            type => {enum, 'helium.Region'},
            occurrence => optional,
            opts => []
        }
    ];
find_msg_def(blockchain_state_channel_offer_v_1) ->
    [
        #{
            name => routing,
            fnum => 1,
            rnum => 2,
            type => {msg, routing_information},
            occurrence => optional,
            opts => []
        },
        #{
            name => packet_hash,
            fnum => 2,
            rnum => 3,
            type => bytes,
            occurrence => optional,
            opts => []
        },
        #{
            name => payload_size,
            fnum => 3,
            rnum => 4,
            type => uint64,
            occurrence => optional,
            opts => []
        },
        #{
            name => fcnt,
            fnum => 4,
            rnum => 5,
            type => uint32,
            occurrence => optional,
            opts => []
        },
        #{
            name => hotspot,
            fnum => 5,
            rnum => 6,
            type => bytes,
            occurrence => optional,
            opts => []
        },
        #{
            name => signature,
            fnum => 6,
            rnum => 7,
            type => bytes,
            occurrence => optional,
            opts => []
        },
        #{
            name => region,
            fnum => 7,
            rnum => 8,
            type => {enum, 'helium.Region'},
            occurrence => optional,
            opts => []
        }
    ];
find_msg_def(blockchain_state_channel_purchase_v_1) ->
    [
        #{
            name => sc,
            fnum => 1,
            rnum => 2,
            type => {msg, blockchain_state_channel_v_1},
            occurrence => optional,
            opts => []
        },
        #{
            name => hotspot,
            fnum => 2,
            rnum => 3,
            type => bytes,
            occurrence => optional,
            opts => []
        },
        #{
            name => packet_hash,
            fnum => 3,
            rnum => 4,
            type => bytes,
            occurrence => optional,
            opts => []
        },
        #{
            name => region,
            fnum => 4,
            rnum => 5,
            type => {enum, 'helium.Region'},
            occurrence => optional,
            opts => []
        }
    ];
find_msg_def(blockchain_state_channel_banner_v_1) ->
    [
        #{
            name => sc,
            fnum => 1,
            rnum => 2,
            type => {msg, blockchain_state_channel_v_1},
            occurrence => optional,
            opts => []
        }
    ];
find_msg_def(blockchain_state_channel_rejection_v_1) ->
    [
        #{
            name => reject,
            fnum => 1,
            rnum => 2,
            type => uint32,
            occurrence => optional,
            opts => []
        }
    ];
find_msg_def(blockchain_state_channel_message_v_1) ->
    [
        #{
            name => msg,
            rnum => 2,
            fields => [
                #{
                    name => response,
                    fnum => 2,
                    rnum => 2,
                    type => {msg, blockchain_state_channel_response_v_1},
                    occurrence => optional,
                    opts => []
                },
                #{
                    name => packet,
                    fnum => 4,
                    rnum => 2,
                    type => {msg, blockchain_state_channel_packet_v_1},
                    occurrence => optional,
                    opts => []
                },
                #{
                    name => offer,
                    fnum => 5,
                    rnum => 2,
                    type => {msg, blockchain_state_channel_offer_v_1},
                    occurrence => optional,
                    opts => []
                },
                #{
                    name => purchase,
                    fnum => 6,
                    rnum => 2,
                    type => {msg, blockchain_state_channel_purchase_v_1},
                    occurrence => optional,
                    opts => []
                },
                #{
                    name => banner,
                    fnum => 7,
                    rnum => 2,
                    type => {msg, blockchain_state_channel_banner_v_1},
                    occurrence => optional,
                    opts => []
                },
                #{
                    name => reject,
                    fnum => 8,
                    rnum => 2,
                    type => {msg, blockchain_state_channel_rejection_v_1},
                    occurrence => optional,
                    opts => []
                }
            ]
        }
    ];
find_msg_def(eui) ->
    [
        #{
            name => deveui,
            fnum => 1,
            rnum => 2,
            type => uint64,
            occurrence => optional,
            opts => []
        },
        #{
            name => appeui,
            fnum => 2,
            rnum => 3,
            type => uint64,
            occurrence => optional,
            opts => []
        }
    ];
find_msg_def(routing_information) ->
    [
        #{
            name => data,
            rnum => 2,
            fields => [
                #{
                    name => devaddr,
                    fnum => 1,
                    rnum => 2,
                    type => uint32,
                    occurrence => optional,
                    opts => []
                },
                #{
                    name => eui,
                    fnum => 2,
                    rnum => 2,
                    type => {msg, eui},
                    occurrence => optional,
                    opts => []
                }
            ]
        }
    ];
find_msg_def(window) ->
    [
        #{
            name => timestamp,
            fnum => 1,
            rnum => 2,
            type => uint64,
            occurrence => optional,
            opts => []
        },
        #{
            name => frequency,
            fnum => 2,
            rnum => 3,
            type => float,
            occurrence => optional,
            opts => []
        },
        #{
            name => datarate,
            fnum => 3,
            rnum => 4,
            type => string,
            occurrence => optional,
            opts => []
        }
    ];
find_msg_def(packet) ->
    [
        #{
            name => oui,
            fnum => 1,
            rnum => 2,
            type => uint32,
            occurrence => optional,
            opts => []
        },
        #{
            name => type,
            fnum => 2,
            rnum => 3,
            type => {enum, 'packet.packet_type'},
            occurrence => optional,
            opts => []
        },
        #{
            name => payload,
            fnum => 3,
            rnum => 4,
            type => bytes,
            occurrence => optional,
            opts => []
        },
        #{
            name => timestamp,
            fnum => 4,
            rnum => 5,
            type => uint64,
            occurrence => optional,
            opts => []
        },
        #{
            name => signal_strength,
            fnum => 5,
            rnum => 6,
            type => float,
            occurrence => optional,
            opts => []
        },
        #{
            name => frequency,
            fnum => 6,
            rnum => 7,
            type => float,
            occurrence => optional,
            opts => []
        },
        #{
            name => datarate,
            fnum => 7,
            rnum => 8,
            type => string,
            occurrence => optional,
            opts => []
        },
        #{
            name => snr,
            fnum => 8,
            rnum => 9,
            type => float,
            occurrence => optional,
            opts => []
        },
        #{
            name => routing,
            fnum => 9,
            rnum => 10,
            type => {msg, routing_information},
            occurrence => optional,
            opts => []
        },
        #{
            name => rx2_window,
            fnum => 10,
            rnum => 11,
            type => {msg, window},
            occurrence => optional,
            opts => []
        }
    ];
find_msg_def(_) ->
    error.

find_enum_def('helium.Region') ->
    [
        {'US915', 0},
        {'EU868', 1},
        {'EU433', 2},
        {'CN470', 3},
        {'CN779', 4},
        {'AU915', 5},
        {'AS923', 6},
        {'KR920', 7},
        {'IN865', 8}
    ];
find_enum_def('helium.blockchain_state_channel_state_v1') ->
    [{open, 0}, {closed, 1}];
find_enum_def('packet.packet_type') ->
    [{longfi, 0}, {lorawan, 1}];
find_enum_def(_) ->
    error.

enum_symbol_by_value('helium.Region', Value) ->
    'enum_symbol_by_value_helium.Region'(Value);
enum_symbol_by_value(
    'helium.blockchain_state_channel_state_v1',
    Value
) ->
    'enum_symbol_by_value_helium.blockchain_state_channel_state_v1'(Value);
enum_symbol_by_value('packet.packet_type', Value) ->
    'enum_symbol_by_value_packet.packet_type'(Value).

enum_value_by_symbol('helium.Region', Sym) ->
    'enum_value_by_symbol_helium.Region'(Sym);
enum_value_by_symbol(
    'helium.blockchain_state_channel_state_v1',
    Sym
) ->
    'enum_value_by_symbol_helium.blockchain_state_channel_state_v1'(Sym);
enum_value_by_symbol('packet.packet_type', Sym) ->
    'enum_value_by_symbol_packet.packet_type'(Sym).

'enum_symbol_by_value_helium.Region'(0) -> 'US915';
'enum_symbol_by_value_helium.Region'(1) -> 'EU868';
'enum_symbol_by_value_helium.Region'(2) -> 'EU433';
'enum_symbol_by_value_helium.Region'(3) -> 'CN470';
'enum_symbol_by_value_helium.Region'(4) -> 'CN779';
'enum_symbol_by_value_helium.Region'(5) -> 'AU915';
'enum_symbol_by_value_helium.Region'(6) -> 'AS923';
'enum_symbol_by_value_helium.Region'(7) -> 'KR920';
'enum_symbol_by_value_helium.Region'(8) -> 'IN865'.

'enum_value_by_symbol_helium.Region'('US915') -> 0;
'enum_value_by_symbol_helium.Region'('EU868') -> 1;
'enum_value_by_symbol_helium.Region'('EU433') -> 2;
'enum_value_by_symbol_helium.Region'('CN470') -> 3;
'enum_value_by_symbol_helium.Region'('CN779') -> 4;
'enum_value_by_symbol_helium.Region'('AU915') -> 5;
'enum_value_by_symbol_helium.Region'('AS923') -> 6;
'enum_value_by_symbol_helium.Region'('KR920') -> 7;
'enum_value_by_symbol_helium.Region'('IN865') -> 8.

'enum_symbol_by_value_helium.blockchain_state_channel_state_v1'(0) ->
    open;
'enum_symbol_by_value_helium.blockchain_state_channel_state_v1'(1) ->
    closed.

'enum_value_by_symbol_helium.blockchain_state_channel_state_v1'(open) ->
    0;
'enum_value_by_symbol_helium.blockchain_state_channel_state_v1'(closed) ->
    1.

'enum_symbol_by_value_packet.packet_type'(0) -> longfi;
'enum_symbol_by_value_packet.packet_type'(1) -> lorawan.

'enum_value_by_symbol_packet.packet_type'(longfi) -> 0;
'enum_value_by_symbol_packet.packet_type'(lorawan) -> 1.

get_service_names() -> ['helium.router'].

get_service_def('helium.router') ->
    {{service, 'helium.router'}, [
        #{
            name => route,
            input => blockchain_state_channel_message_v_1,
            output => blockchain_state_channel_message_v_1,
            input_stream => false,
            output_stream => false,
            opts => []
        }
    ]};
get_service_def(_) ->
    error.

get_rpc_names('helium.router') -> [route];
get_rpc_names(_) -> error.

find_rpc_def('helium.router', RpcName) ->
    'find_rpc_def_helium.router'(RpcName);
find_rpc_def(_, _) ->
    error.

'find_rpc_def_helium.router'(route) ->
    #{
        name => route,
        input => blockchain_state_channel_message_v_1,
        output => blockchain_state_channel_message_v_1,
        input_stream => false,
        output_stream => false,
        opts => []
    };
'find_rpc_def_helium.router'(_) ->
    error.

fetch_rpc_def(ServiceName, RpcName) ->
    case find_rpc_def(ServiceName, RpcName) of
        Def when is_map(Def) -> Def;
        error -> erlang:error({no_such_rpc, ServiceName, RpcName})
    end.

%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
fqbin_to_service_name(<<"helium.router">>) -> 'helium.router';
fqbin_to_service_name(X) -> error({gpb_error, {badservice, X}}).

%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
service_name_to_fqbin('helium.router') -> <<"helium.router">>;
service_name_to_fqbin(X) -> error({gpb_error, {badservice, X}}).

%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
fqbins_to_service_and_rpc_name(<<"helium.router">>, <<"route">>) ->
    {'helium.router', route};
fqbins_to_service_and_rpc_name(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).

%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
service_and_rpc_name_to_fqbins(
    'helium.router',
    route
) ->
    {<<"helium.router">>, <<"route">>};
service_and_rpc_name_to_fqbins(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).

fqbin_to_msg_name(<<"helium.blockchain_state_channel_summary_v1">>) ->
    blockchain_state_channel_summary_v_1;
fqbin_to_msg_name(<<"helium.blockchain_state_channel_v1">>) ->
    blockchain_state_channel_v_1;
fqbin_to_msg_name(<<"helium.blockchain_state_channel_response_v1">>) ->
    blockchain_state_channel_response_v_1;
fqbin_to_msg_name(<<"helium.blockchain_state_channel_packet_v1">>) ->
    blockchain_state_channel_packet_v_1;
fqbin_to_msg_name(<<"helium.blockchain_state_channel_offer_v1">>) ->
    blockchain_state_channel_offer_v_1;
fqbin_to_msg_name(<<"helium.blockchain_state_channel_purchase_v1">>) ->
    blockchain_state_channel_purchase_v_1;
fqbin_to_msg_name(<<"helium.blockchain_state_channel_banner_v1">>) ->
    blockchain_state_channel_banner_v_1;
fqbin_to_msg_name(<<"helium.blockchain_state_channel_rejection_v1">>) ->
    blockchain_state_channel_rejection_v_1;
fqbin_to_msg_name(<<"helium.blockchain_state_channel_message_v1">>) ->
    blockchain_state_channel_message_v_1;
fqbin_to_msg_name(<<"helium.eui">>) ->
    eui;
fqbin_to_msg_name(<<"helium.routing_information">>) ->
    routing_information;
fqbin_to_msg_name(<<"helium.window">>) ->
    window;
fqbin_to_msg_name(<<"helium.packet">>) ->
    packet;
fqbin_to_msg_name(E) ->
    error({gpb_error, {badmsg, E}}).

msg_name_to_fqbin(blockchain_state_channel_summary_v_1) ->
    <<"helium.blockchain_state_channel_summary_v1">>;
msg_name_to_fqbin(blockchain_state_channel_v_1) ->
    <<"helium.blockchain_state_channel_v1">>;
msg_name_to_fqbin(blockchain_state_channel_response_v_1) ->
    <<"helium.blockchain_state_channel_response_v1">>;
msg_name_to_fqbin(blockchain_state_channel_packet_v_1) ->
    <<"helium.blockchain_state_channel_packet_v1">>;
msg_name_to_fqbin(blockchain_state_channel_offer_v_1) ->
    <<"helium.blockchain_state_channel_offer_v1">>;
msg_name_to_fqbin(blockchain_state_channel_purchase_v_1) ->
    <<"helium.blockchain_state_channel_purchase_v1">>;
msg_name_to_fqbin(blockchain_state_channel_banner_v_1) ->
    <<"helium.blockchain_state_channel_banner_v1">>;
msg_name_to_fqbin(blockchain_state_channel_rejection_v_1) ->
    <<"helium.blockchain_state_channel_rejection_v1">>;
msg_name_to_fqbin(blockchain_state_channel_message_v_1) ->
    <<"helium.blockchain_state_channel_message_v1">>;
msg_name_to_fqbin(eui) ->
    <<"helium.eui">>;
msg_name_to_fqbin(routing_information) ->
    <<"helium.routing_information">>;
msg_name_to_fqbin(window) ->
    <<"helium.window">>;
msg_name_to_fqbin(packet) ->
    <<"helium.packet">>;
msg_name_to_fqbin(E) ->
    error({gpb_error, {badmsg, E}}).

fqbin_to_enum_name(<<"helium.Region">>) ->
    'helium.Region';
fqbin_to_enum_name(<<"helium.blockchain_state_channel_state_v1">>) ->
    'helium.blockchain_state_channel_state_v1';
fqbin_to_enum_name(<<"helium.packet.packet_type">>) ->
    'packet.packet_type';
fqbin_to_enum_name(E) ->
    error({gpb_error, {badenum, E}}).

enum_name_to_fqbin('helium.Region') ->
    <<"helium.Region">>;
enum_name_to_fqbin('helium.blockchain_state_channel_state_v1') ->
    <<"helium.blockchain_state_channel_state_v1">>;
enum_name_to_fqbin('packet.packet_type') ->
    <<"helium.packet.packet_type">>;
enum_name_to_fqbin(E) ->
    error({gpb_error, {badenum, E}}).

get_package_name() -> helium.

%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> true.

source_basename() -> "router.proto".

%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() ->
    [
        "router.proto",
        "blockchain_state_channel_v1.proto",
        "packet.proto"
    ].

%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() ->
    ["router", "blockchain_state_channel_v1", "packet"].

get_msg_containment("router") ->
    [];
get_msg_containment("blockchain_state_channel_v1") ->
    [
        blockchain_state_channel_banner_v_1,
        blockchain_state_channel_message_v_1,
        blockchain_state_channel_offer_v_1,
        blockchain_state_channel_packet_v_1,
        blockchain_state_channel_purchase_v_1,
        blockchain_state_channel_rejection_v_1,
        blockchain_state_channel_response_v_1,
        blockchain_state_channel_summary_v_1,
        blockchain_state_channel_v_1
    ];
get_msg_containment("packet") ->
    [eui, packet, routing_information, window];
get_msg_containment(P) ->
    error({gpb_error, {badproto, P}}).

get_pkg_containment("router") -> helium;
get_pkg_containment("blockchain_state_channel_v1") -> helium;
get_pkg_containment("packet") -> helium;
get_pkg_containment(P) -> error({gpb_error, {badproto, P}}).

get_service_containment("router") -> ['helium.router'];
get_service_containment("blockchain_state_channel_v1") -> [];
get_service_containment("packet") -> [];
get_service_containment(P) -> error({gpb_error, {badproto, P}}).

get_rpc_containment("router") ->
    [{'helium.router', route}];
get_rpc_containment("blockchain_state_channel_v1") ->
    [];
get_rpc_containment("packet") ->
    [];
get_rpc_containment(P) ->
    error({gpb_error, {badproto, P}}).

get_enum_containment("router") ->
    [];
get_enum_containment("blockchain_state_channel_v1") ->
    [
        'helium.Region',
        'helium.blockchain_state_channel_state_v1'
    ];
get_enum_containment("packet") ->
    ['packet.packet_type'];
get_enum_containment(P) ->
    error({gpb_error, {badproto, P}}).

get_proto_by_msg_name_as_fqbin(<<"helium.blockchain_state_channel_v1">>) ->
    "blockchain_state_channel_v1";
get_proto_by_msg_name_as_fqbin(<<"helium.blockchain_state_channel_summary_v1">>) ->
    "blockchain_state_channel_v1";
get_proto_by_msg_name_as_fqbin(<<"helium.blockchain_state_channel_response_v1">>) ->
    "blockchain_state_channel_v1";
get_proto_by_msg_name_as_fqbin(<<"helium.blockchain_state_channel_rejection_v1">>) ->
    "blockchain_state_channel_v1";
get_proto_by_msg_name_as_fqbin(<<"helium.blockchain_state_channel_purchase_v1">>) ->
    "blockchain_state_channel_v1";
get_proto_by_msg_name_as_fqbin(<<"helium.blockchain_state_channel_packet_v1">>) ->
    "blockchain_state_channel_v1";
get_proto_by_msg_name_as_fqbin(<<"helium.blockchain_state_channel_offer_v1">>) ->
    "blockchain_state_channel_v1";
get_proto_by_msg_name_as_fqbin(<<"helium.blockchain_state_channel_message_v1">>) ->
    "blockchain_state_channel_v1";
get_proto_by_msg_name_as_fqbin(<<"helium.blockchain_state_channel_banner_v1">>) ->
    "blockchain_state_channel_v1";
get_proto_by_msg_name_as_fqbin(<<"helium.packet">>) ->
    "packet";
get_proto_by_msg_name_as_fqbin(<<"helium.window">>) ->
    "packet";
get_proto_by_msg_name_as_fqbin(<<"helium.eui">>) ->
    "packet";
get_proto_by_msg_name_as_fqbin(<<"helium.routing_information">>) ->
    "packet";
get_proto_by_msg_name_as_fqbin(E) ->
    error({gpb_error, {badmsg, E}}).

get_proto_by_service_name_as_fqbin(<<"helium.router">>) -> "router";
get_proto_by_service_name_as_fqbin(E) -> error({gpb_error, {badservice, E}}).

get_proto_by_enum_name_as_fqbin(<<"helium.blockchain_state_channel_state_v1">>) ->
    "blockchain_state_channel_v1";
get_proto_by_enum_name_as_fqbin(<<"helium.packet.packet_type">>) ->
    "packet";
get_proto_by_enum_name_as_fqbin(<<"helium.Region">>) ->
    "blockchain_state_channel_v1";
get_proto_by_enum_name_as_fqbin(E) ->
    error({gpb_error, {badenum, E}}).

get_protos_by_pkg_name_as_fqbin(<<"helium">>) ->
    ["blockchain_state_channel_v1", "packet", "router"];
get_protos_by_pkg_name_as_fqbin(E) ->
    error({gpb_error, {badpkg, E}}).

descriptor() ->
    <<10, 150, 1, 10, 19, 104, 101, 108, 105, 117, 109, 47, 114, 111, 117, 116, 101, 114, 46, 112,
        114, 111, 116, 111, 18, 6, 104, 101, 108, 105, 117, 109, 50, 111, 10, 6, 114, 111, 117, 116,
        101, 114, 18, 101, 10, 5, 114, 111, 117, 116, 101, 18, 43, 46, 104, 101, 108, 105, 117, 109,
        46, 98, 108, 111, 99, 107, 99, 104, 97, 105, 110, 95, 115, 116, 97, 116, 101, 95, 99, 104,
        97, 110, 110, 101, 108, 95, 109, 101, 115, 115, 97, 103, 101, 95, 118, 49, 26, 43, 46, 104,
        101, 108, 105, 117, 109, 46, 98, 108, 111, 99, 107, 99, 104, 97, 105, 110, 95, 115, 116, 97,
        116, 101, 95, 99, 104, 97, 110, 110, 101, 108, 95, 109, 101, 115, 115, 97, 103, 101, 95,
        118, 49, 40, 0, 48, 0, 98, 6, 112, 114, 111, 116, 111, 51, 10, 129, 14, 10, 40, 104, 101,
        108, 105, 117, 109, 47, 98, 108, 111, 99, 107, 99, 104, 97, 105, 110, 95, 115, 116, 97, 116,
        101, 95, 99, 104, 97, 110, 110, 101, 108, 95, 118, 49, 46, 112, 114, 111, 116, 111, 18, 6,
        104, 101, 108, 105, 117, 109, 34, 85, 10, 34, 98, 108, 111, 99, 107, 99, 104, 97, 105, 110,
        95, 115, 116, 97, 116, 101, 95, 99, 104, 97, 110, 110, 101, 108, 95, 98, 97, 110, 110, 101,
        114, 95, 118, 49, 18, 47, 10, 2, 115, 99, 24, 1, 32, 1, 40, 11, 50, 35, 46, 104, 101, 108,
        105, 117, 109, 46, 98, 108, 111, 99, 107, 99, 104, 97, 105, 110, 95, 115, 116, 97, 116, 101,
        95, 99, 104, 97, 110, 110, 101, 108, 95, 118, 49, 34, 169, 3, 10, 35, 98, 108, 111, 99, 107,
        99, 104, 97, 105, 110, 95, 115, 116, 97, 116, 101, 95, 99, 104, 97, 110, 110, 101, 108, 95,
        109, 101, 115, 115, 97, 103, 101, 95, 118, 49, 18, 64, 10, 8, 114, 101, 115, 112, 111, 110,
        115, 101, 24, 2, 32, 1, 40, 11, 50, 44, 46, 104, 101, 108, 105, 117, 109, 46, 98, 108, 111,
        99, 107, 99, 104, 97, 105, 110, 95, 115, 116, 97, 116, 101, 95, 99, 104, 97, 110, 110, 101,
        108, 95, 114, 101, 115, 112, 111, 110, 115, 101, 95, 118, 49, 72, 0, 18, 60, 10, 6, 112, 97,
        99, 107, 101, 116, 24, 4, 32, 1, 40, 11, 50, 42, 46, 104, 101, 108, 105, 117, 109, 46, 98,
        108, 111, 99, 107, 99, 104, 97, 105, 110, 95, 115, 116, 97, 116, 101, 95, 99, 104, 97, 110,
        110, 101, 108, 95, 112, 97, 99, 107, 101, 116, 95, 118, 49, 72, 0, 18, 58, 10, 5, 111, 102,
        102, 101, 114, 24, 5, 32, 1, 40, 11, 50, 41, 46, 104, 101, 108, 105, 117, 109, 46, 98, 108,
        111, 99, 107, 99, 104, 97, 105, 110, 95, 115, 116, 97, 116, 101, 95, 99, 104, 97, 110, 110,
        101, 108, 95, 111, 102, 102, 101, 114, 95, 118, 49, 72, 0, 18, 64, 10, 8, 112, 117, 114, 99,
        104, 97, 115, 101, 24, 6, 32, 1, 40, 11, 50, 44, 46, 104, 101, 108, 105, 117, 109, 46, 98,
        108, 111, 99, 107, 99, 104, 97, 105, 110, 95, 115, 116, 97, 116, 101, 95, 99, 104, 97, 110,
        110, 101, 108, 95, 112, 117, 114, 99, 104, 97, 115, 101, 95, 118, 49, 72, 0, 18, 60, 10, 6,
        98, 97, 110, 110, 101, 114, 24, 7, 32, 1, 40, 11, 50, 42, 46, 104, 101, 108, 105, 117, 109,
        46, 98, 108, 111, 99, 107, 99, 104, 97, 105, 110, 95, 115, 116, 97, 116, 101, 95, 99, 104,
        97, 110, 110, 101, 108, 95, 98, 97, 110, 110, 101, 114, 95, 118, 49, 72, 0, 18, 63, 10, 6,
        114, 101, 106, 101, 99, 116, 24, 8, 32, 1, 40, 11, 50, 45, 46, 104, 101, 108, 105, 117, 109,
        46, 98, 108, 111, 99, 107, 99, 104, 97, 105, 110, 95, 115, 116, 97, 116, 101, 95, 99, 104,
        97, 110, 110, 101, 108, 95, 114, 101, 106, 101, 99, 116, 105, 111, 110, 95, 118, 49, 72, 0,
        66, 5, 10, 3, 109, 115, 103, 34, 206, 1, 10, 33, 98, 108, 111, 99, 107, 99, 104, 97, 105,
        110, 95, 115, 116, 97, 116, 101, 95, 99, 104, 97, 110, 110, 101, 108, 95, 111, 102, 102,
        101, 114, 95, 118, 49, 18, 44, 10, 7, 114, 111, 117, 116, 105, 110, 103, 24, 1, 32, 1, 40,
        11, 50, 27, 46, 104, 101, 108, 105, 117, 109, 46, 114, 111, 117, 116, 105, 110, 103, 95,
        105, 110, 102, 111, 114, 109, 97, 116, 105, 111, 110, 18, 19, 10, 11, 112, 97, 99, 107, 101,
        116, 95, 104, 97, 115, 104, 24, 2, 32, 1, 40, 12, 18, 20, 10, 12, 112, 97, 121, 108, 111,
        97, 100, 95, 115, 105, 122, 101, 24, 3, 32, 1, 40, 4, 18, 12, 10, 4, 102, 99, 110, 116, 24,
        4, 32, 1, 40, 13, 18, 15, 10, 7, 104, 111, 116, 115, 112, 111, 116, 24, 5, 32, 1, 40, 12,
        18, 17, 10, 9, 115, 105, 103, 110, 97, 116, 117, 114, 101, 24, 6, 32, 1, 40, 12, 18, 30, 10,
        6, 114, 101, 103, 105, 111, 110, 24, 7, 32, 1, 40, 14, 50, 14, 46, 104, 101, 108, 105, 117,
        109, 46, 82, 101, 103, 105, 111, 110, 34, 136, 1, 10, 34, 98, 108, 111, 99, 107, 99, 104,
        97, 105, 110, 95, 115, 116, 97, 116, 101, 95, 99, 104, 97, 110, 110, 101, 108, 95, 112, 97,
        99, 107, 101, 116, 95, 118, 49, 18, 30, 10, 6, 112, 97, 99, 107, 101, 116, 24, 1, 32, 1, 40,
        11, 50, 14, 46, 104, 101, 108, 105, 117, 109, 46, 112, 97, 99, 107, 101, 116, 18, 15, 10, 7,
        104, 111, 116, 115, 112, 111, 116, 24, 2, 32, 1, 40, 12, 18, 17, 10, 9, 115, 105, 103, 110,
        97, 116, 117, 114, 101, 24, 3, 32, 1, 40, 12, 18, 30, 10, 6, 114, 101, 103, 105, 111, 110,
        24, 4, 32, 1, 40, 14, 50, 14, 46, 104, 101, 108, 105, 117, 109, 46, 82, 101, 103, 105, 111,
        110, 34, 157, 1, 10, 36, 98, 108, 111, 99, 107, 99, 104, 97, 105, 110, 95, 115, 116, 97,
        116, 101, 95, 99, 104, 97, 110, 110, 101, 108, 95, 112, 117, 114, 99, 104, 97, 115, 101, 95,
        118, 49, 18, 47, 10, 2, 115, 99, 24, 1, 32, 1, 40, 11, 50, 35, 46, 104, 101, 108, 105, 117,
        109, 46, 98, 108, 111, 99, 107, 99, 104, 97, 105, 110, 95, 115, 116, 97, 116, 101, 95, 99,
        104, 97, 110, 110, 101, 108, 95, 118, 49, 18, 15, 10, 7, 104, 111, 116, 115, 112, 111, 116,
        24, 2, 32, 1, 40, 12, 18, 19, 10, 11, 112, 97, 99, 107, 101, 116, 95, 104, 97, 115, 104, 24,
        3, 32, 1, 40, 12, 18, 30, 10, 6, 114, 101, 103, 105, 111, 110, 24, 4, 32, 1, 40, 14, 50, 14,
        46, 104, 101, 108, 105, 117, 109, 46, 82, 101, 103, 105, 111, 110, 34, 55, 10, 37, 98, 108,
        111, 99, 107, 99, 104, 97, 105, 110, 95, 115, 116, 97, 116, 101, 95, 99, 104, 97, 110, 110,
        101, 108, 95, 114, 101, 106, 101, 99, 116, 105, 111, 110, 95, 118, 49, 18, 14, 10, 6, 114,
        101, 106, 101, 99, 116, 24, 1, 32, 1, 40, 13, 34, 90, 10, 36, 98, 108, 111, 99, 107, 99,
        104, 97, 105, 110, 95, 115, 116, 97, 116, 101, 95, 99, 104, 97, 110, 110, 101, 108, 95, 114,
        101, 115, 112, 111, 110, 115, 101, 95, 118, 49, 18, 16, 10, 8, 97, 99, 99, 101, 112, 116,
        101, 100, 24, 1, 32, 1, 40, 8, 18, 32, 10, 8, 100, 111, 119, 110, 108, 105, 110, 107, 24, 4,
        32, 1, 40, 11, 50, 14, 46, 104, 101, 108, 105, 117, 109, 46, 112, 97, 99, 107, 101, 116, 34,
        101, 10, 35, 98, 108, 111, 99, 107, 99, 104, 97, 105, 110, 95, 115, 116, 97, 116, 101, 95,
        99, 104, 97, 110, 110, 101, 108, 95, 115, 117, 109, 109, 97, 114, 121, 95, 118, 49, 18, 24,
        10, 16, 99, 108, 105, 101, 110, 116, 95, 112, 117, 98, 107, 101, 121, 98, 105, 110, 24, 1,
        32, 1, 40, 12, 18, 19, 10, 11, 110, 117, 109, 95, 112, 97, 99, 107, 101, 116, 115, 24, 2,
        32, 1, 40, 4, 18, 15, 10, 7, 110, 117, 109, 95, 100, 99, 115, 24, 3, 32, 1, 40, 4, 34, 161,
        2, 10, 27, 98, 108, 111, 99, 107, 99, 104, 97, 105, 110, 95, 115, 116, 97, 116, 101, 95, 99,
        104, 97, 110, 110, 101, 108, 95, 118, 49, 18, 10, 10, 2, 105, 100, 24, 1, 32, 1, 40, 12, 18,
        13, 10, 5, 111, 119, 110, 101, 114, 24, 2, 32, 1, 40, 12, 18, 15, 10, 7, 99, 114, 101, 100,
        105, 116, 115, 24, 3, 32, 1, 40, 4, 18, 13, 10, 5, 110, 111, 110, 99, 101, 24, 4, 32, 1, 40,
        4, 18, 62, 10, 9, 115, 117, 109, 109, 97, 114, 105, 101, 115, 24, 5, 32, 3, 40, 11, 50, 43,
        46, 104, 101, 108, 105, 117, 109, 46, 98, 108, 111, 99, 107, 99, 104, 97, 105, 110, 95, 115,
        116, 97, 116, 101, 95, 99, 104, 97, 110, 110, 101, 108, 95, 115, 117, 109, 109, 97, 114,
        121, 95, 118, 49, 18, 17, 10, 9, 114, 111, 111, 116, 95, 104, 97, 115, 104, 24, 6, 32, 1,
        40, 12, 18, 14, 10, 6, 115, 107, 101, 119, 101, 100, 24, 7, 32, 1, 40, 12, 18, 56, 10, 5,
        115, 116, 97, 116, 101, 24, 8, 32, 1, 40, 14, 50, 41, 46, 104, 101, 108, 105, 117, 109, 46,
        98, 108, 111, 99, 107, 99, 104, 97, 105, 110, 95, 115, 116, 97, 116, 101, 95, 99, 104, 97,
        110, 110, 101, 108, 95, 115, 116, 97, 116, 101, 95, 118, 49, 18, 23, 10, 15, 101, 120, 112,
        105, 114, 101, 95, 97, 116, 95, 98, 108, 111, 99, 107, 24, 9, 32, 1, 40, 4, 18, 17, 10, 9,
        115, 105, 103, 110, 97, 116, 117, 114, 101, 24, 10, 32, 1, 40, 12, 42, 107, 10, 6, 82, 101,
        103, 105, 111, 110, 18, 9, 10, 5, 85, 83, 57, 49, 53, 16, 0, 18, 9, 10, 5, 69, 85, 56, 54,
        56, 16, 1, 18, 9, 10, 5, 69, 85, 52, 51, 51, 16, 2, 18, 9, 10, 5, 67, 78, 52, 55, 48, 16, 3,
        18, 9, 10, 5, 67, 78, 55, 55, 57, 16, 4, 18, 9, 10, 5, 65, 85, 57, 49, 53, 16, 5, 18, 9, 10,
        5, 65, 83, 57, 50, 51, 16, 6, 18, 9, 10, 5, 75, 82, 57, 50, 48, 16, 7, 18, 9, 10, 5, 73, 78,
        56, 54, 53, 16, 8, 42, 57, 10, 33, 98, 108, 111, 99, 107, 99, 104, 97, 105, 110, 95, 115,
        116, 97, 116, 101, 95, 99, 104, 97, 110, 110, 101, 108, 95, 115, 116, 97, 116, 101, 95, 118,
        49, 18, 8, 10, 4, 111, 112, 101, 110, 16, 0, 18, 10, 10, 6, 99, 108, 111, 115, 101, 100, 16,
        1, 98, 6, 112, 114, 111, 116, 111, 51, 10, 135, 4, 10, 19, 104, 101, 108, 105, 117, 109, 47,
        112, 97, 99, 107, 101, 116, 46, 112, 114, 111, 116, 111, 18, 6, 104, 101, 108, 105, 117,
        109, 34, 37, 10, 3, 101, 117, 105, 18, 14, 10, 6, 100, 101, 118, 101, 117, 105, 24, 1, 32,
        1, 40, 4, 18, 14, 10, 6, 97, 112, 112, 101, 117, 105, 24, 2, 32, 1, 40, 4, 34, 168, 2, 10,
        6, 112, 97, 99, 107, 101, 116, 18, 11, 10, 3, 111, 117, 105, 24, 1, 32, 1, 40, 13, 18, 40,
        10, 4, 116, 121, 112, 101, 24, 2, 32, 1, 40, 14, 50, 26, 46, 104, 101, 108, 105, 117, 109,
        46, 112, 97, 99, 107, 101, 116, 46, 112, 97, 99, 107, 101, 116, 95, 116, 121, 112, 101, 18,
        15, 10, 7, 112, 97, 121, 108, 111, 97, 100, 24, 3, 32, 1, 40, 12, 18, 17, 10, 9, 116, 105,
        109, 101, 115, 116, 97, 109, 112, 24, 4, 32, 1, 40, 4, 18, 23, 10, 15, 115, 105, 103, 110,
        97, 108, 95, 115, 116, 114, 101, 110, 103, 116, 104, 24, 5, 32, 1, 40, 2, 18, 17, 10, 9,
        102, 114, 101, 113, 117, 101, 110, 99, 121, 24, 6, 32, 1, 40, 2, 18, 16, 10, 8, 100, 97,
        116, 97, 114, 97, 116, 101, 24, 7, 32, 1, 40, 9, 18, 11, 10, 3, 115, 110, 114, 24, 8, 32, 1,
        40, 2, 18, 44, 10, 7, 114, 111, 117, 116, 105, 110, 103, 24, 9, 32, 1, 40, 11, 50, 27, 46,
        104, 101, 108, 105, 117, 109, 46, 114, 111, 117, 116, 105, 110, 103, 95, 105, 110, 102, 111,
        114, 109, 97, 116, 105, 111, 110, 18, 34, 10, 10, 114, 120, 50, 95, 119, 105, 110, 100, 111,
        119, 24, 10, 32, 1, 40, 11, 50, 14, 46, 104, 101, 108, 105, 117, 109, 46, 119, 105, 110,
        100, 111, 119, 34, 38, 10, 11, 112, 97, 99, 107, 101, 116, 95, 116, 121, 112, 101, 18, 10,
        10, 6, 108, 111, 110, 103, 102, 105, 16, 0, 18, 11, 10, 7, 108, 111, 114, 97, 119, 97, 110,
        16, 1, 34, 76, 10, 19, 114, 111, 117, 116, 105, 110, 103, 95, 105, 110, 102, 111, 114, 109,
        97, 116, 105, 111, 110, 18, 17, 10, 7, 100, 101, 118, 97, 100, 100, 114, 24, 1, 32, 1, 40,
        13, 72, 0, 18, 26, 10, 3, 101, 117, 105, 24, 2, 32, 1, 40, 11, 50, 11, 46, 104, 101, 108,
        105, 117, 109, 46, 101, 117, 105, 72, 0, 66, 6, 10, 4, 100, 97, 116, 97, 34, 64, 10, 6, 119,
        105, 110, 100, 111, 119, 18, 17, 10, 9, 116, 105, 109, 101, 115, 116, 97, 109, 112, 24, 1,
        32, 1, 40, 4, 18, 17, 10, 9, 102, 114, 101, 113, 117, 101, 110, 99, 121, 24, 2, 32, 1, 40,
        2, 18, 16, 10, 8, 100, 97, 116, 97, 114, 97, 116, 101, 24, 3, 32, 1, 40, 9, 98, 6, 112, 114,
        111, 116, 111, 51>>.

descriptor("router") ->
    <<10, 19, 104, 101, 108, 105, 117, 109, 47, 114, 111, 117, 116, 101, 114, 46, 112, 114, 111,
        116, 111, 18, 6, 104, 101, 108, 105, 117, 109, 50, 111, 10, 6, 114, 111, 117, 116, 101, 114,
        18, 101, 10, 5, 114, 111, 117, 116, 101, 18, 43, 46, 104, 101, 108, 105, 117, 109, 46, 98,
        108, 111, 99, 107, 99, 104, 97, 105, 110, 95, 115, 116, 97, 116, 101, 95, 99, 104, 97, 110,
        110, 101, 108, 95, 109, 101, 115, 115, 97, 103, 101, 95, 118, 49, 26, 43, 46, 104, 101, 108,
        105, 117, 109, 46, 98, 108, 111, 99, 107, 99, 104, 97, 105, 110, 95, 115, 116, 97, 116, 101,
        95, 99, 104, 97, 110, 110, 101, 108, 95, 109, 101, 115, 115, 97, 103, 101, 95, 118, 49, 40,
        0, 48, 0, 98, 6, 112, 114, 111, 116, 111, 51>>;
descriptor("blockchain_state_channel_v1") ->
    <<10, 40, 104, 101, 108, 105, 117, 109, 47, 98, 108, 111, 99, 107, 99, 104, 97, 105, 110, 95,
        115, 116, 97, 116, 101, 95, 99, 104, 97, 110, 110, 101, 108, 95, 118, 49, 46, 112, 114, 111,
        116, 111, 18, 6, 104, 101, 108, 105, 117, 109, 34, 85, 10, 34, 98, 108, 111, 99, 107, 99,
        104, 97, 105, 110, 95, 115, 116, 97, 116, 101, 95, 99, 104, 97, 110, 110, 101, 108, 95, 98,
        97, 110, 110, 101, 114, 95, 118, 49, 18, 47, 10, 2, 115, 99, 24, 1, 32, 1, 40, 11, 50, 35,
        46, 104, 101, 108, 105, 117, 109, 46, 98, 108, 111, 99, 107, 99, 104, 97, 105, 110, 95, 115,
        116, 97, 116, 101, 95, 99, 104, 97, 110, 110, 101, 108, 95, 118, 49, 34, 169, 3, 10, 35, 98,
        108, 111, 99, 107, 99, 104, 97, 105, 110, 95, 115, 116, 97, 116, 101, 95, 99, 104, 97, 110,
        110, 101, 108, 95, 109, 101, 115, 115, 97, 103, 101, 95, 118, 49, 18, 64, 10, 8, 114, 101,
        115, 112, 111, 110, 115, 101, 24, 2, 32, 1, 40, 11, 50, 44, 46, 104, 101, 108, 105, 117,
        109, 46, 98, 108, 111, 99, 107, 99, 104, 97, 105, 110, 95, 115, 116, 97, 116, 101, 95, 99,
        104, 97, 110, 110, 101, 108, 95, 114, 101, 115, 112, 111, 110, 115, 101, 95, 118, 49, 72, 0,
        18, 60, 10, 6, 112, 97, 99, 107, 101, 116, 24, 4, 32, 1, 40, 11, 50, 42, 46, 104, 101, 108,
        105, 117, 109, 46, 98, 108, 111, 99, 107, 99, 104, 97, 105, 110, 95, 115, 116, 97, 116, 101,
        95, 99, 104, 97, 110, 110, 101, 108, 95, 112, 97, 99, 107, 101, 116, 95, 118, 49, 72, 0, 18,
        58, 10, 5, 111, 102, 102, 101, 114, 24, 5, 32, 1, 40, 11, 50, 41, 46, 104, 101, 108, 105,
        117, 109, 46, 98, 108, 111, 99, 107, 99, 104, 97, 105, 110, 95, 115, 116, 97, 116, 101, 95,
        99, 104, 97, 110, 110, 101, 108, 95, 111, 102, 102, 101, 114, 95, 118, 49, 72, 0, 18, 64,
        10, 8, 112, 117, 114, 99, 104, 97, 115, 101, 24, 6, 32, 1, 40, 11, 50, 44, 46, 104, 101,
        108, 105, 117, 109, 46, 98, 108, 111, 99, 107, 99, 104, 97, 105, 110, 95, 115, 116, 97, 116,
        101, 95, 99, 104, 97, 110, 110, 101, 108, 95, 112, 117, 114, 99, 104, 97, 115, 101, 95, 118,
        49, 72, 0, 18, 60, 10, 6, 98, 97, 110, 110, 101, 114, 24, 7, 32, 1, 40, 11, 50, 42, 46, 104,
        101, 108, 105, 117, 109, 46, 98, 108, 111, 99, 107, 99, 104, 97, 105, 110, 95, 115, 116, 97,
        116, 101, 95, 99, 104, 97, 110, 110, 101, 108, 95, 98, 97, 110, 110, 101, 114, 95, 118, 49,
        72, 0, 18, 63, 10, 6, 114, 101, 106, 101, 99, 116, 24, 8, 32, 1, 40, 11, 50, 45, 46, 104,
        101, 108, 105, 117, 109, 46, 98, 108, 111, 99, 107, 99, 104, 97, 105, 110, 95, 115, 116, 97,
        116, 101, 95, 99, 104, 97, 110, 110, 101, 108, 95, 114, 101, 106, 101, 99, 116, 105, 111,
        110, 95, 118, 49, 72, 0, 66, 5, 10, 3, 109, 115, 103, 34, 206, 1, 10, 33, 98, 108, 111, 99,
        107, 99, 104, 97, 105, 110, 95, 115, 116, 97, 116, 101, 95, 99, 104, 97, 110, 110, 101, 108,
        95, 111, 102, 102, 101, 114, 95, 118, 49, 18, 44, 10, 7, 114, 111, 117, 116, 105, 110, 103,
        24, 1, 32, 1, 40, 11, 50, 27, 46, 104, 101, 108, 105, 117, 109, 46, 114, 111, 117, 116, 105,
        110, 103, 95, 105, 110, 102, 111, 114, 109, 97, 116, 105, 111, 110, 18, 19, 10, 11, 112, 97,
        99, 107, 101, 116, 95, 104, 97, 115, 104, 24, 2, 32, 1, 40, 12, 18, 20, 10, 12, 112, 97,
        121, 108, 111, 97, 100, 95, 115, 105, 122, 101, 24, 3, 32, 1, 40, 4, 18, 12, 10, 4, 102, 99,
        110, 116, 24, 4, 32, 1, 40, 13, 18, 15, 10, 7, 104, 111, 116, 115, 112, 111, 116, 24, 5, 32,
        1, 40, 12, 18, 17, 10, 9, 115, 105, 103, 110, 97, 116, 117, 114, 101, 24, 6, 32, 1, 40, 12,
        18, 30, 10, 6, 114, 101, 103, 105, 111, 110, 24, 7, 32, 1, 40, 14, 50, 14, 46, 104, 101,
        108, 105, 117, 109, 46, 82, 101, 103, 105, 111, 110, 34, 136, 1, 10, 34, 98, 108, 111, 99,
        107, 99, 104, 97, 105, 110, 95, 115, 116, 97, 116, 101, 95, 99, 104, 97, 110, 110, 101, 108,
        95, 112, 97, 99, 107, 101, 116, 95, 118, 49, 18, 30, 10, 6, 112, 97, 99, 107, 101, 116, 24,
        1, 32, 1, 40, 11, 50, 14, 46, 104, 101, 108, 105, 117, 109, 46, 112, 97, 99, 107, 101, 116,
        18, 15, 10, 7, 104, 111, 116, 115, 112, 111, 116, 24, 2, 32, 1, 40, 12, 18, 17, 10, 9, 115,
        105, 103, 110, 97, 116, 117, 114, 101, 24, 3, 32, 1, 40, 12, 18, 30, 10, 6, 114, 101, 103,
        105, 111, 110, 24, 4, 32, 1, 40, 14, 50, 14, 46, 104, 101, 108, 105, 117, 109, 46, 82, 101,
        103, 105, 111, 110, 34, 157, 1, 10, 36, 98, 108, 111, 99, 107, 99, 104, 97, 105, 110, 95,
        115, 116, 97, 116, 101, 95, 99, 104, 97, 110, 110, 101, 108, 95, 112, 117, 114, 99, 104, 97,
        115, 101, 95, 118, 49, 18, 47, 10, 2, 115, 99, 24, 1, 32, 1, 40, 11, 50, 35, 46, 104, 101,
        108, 105, 117, 109, 46, 98, 108, 111, 99, 107, 99, 104, 97, 105, 110, 95, 115, 116, 97, 116,
        101, 95, 99, 104, 97, 110, 110, 101, 108, 95, 118, 49, 18, 15, 10, 7, 104, 111, 116, 115,
        112, 111, 116, 24, 2, 32, 1, 40, 12, 18, 19, 10, 11, 112, 97, 99, 107, 101, 116, 95, 104,
        97, 115, 104, 24, 3, 32, 1, 40, 12, 18, 30, 10, 6, 114, 101, 103, 105, 111, 110, 24, 4, 32,
        1, 40, 14, 50, 14, 46, 104, 101, 108, 105, 117, 109, 46, 82, 101, 103, 105, 111, 110, 34,
        55, 10, 37, 98, 108, 111, 99, 107, 99, 104, 97, 105, 110, 95, 115, 116, 97, 116, 101, 95,
        99, 104, 97, 110, 110, 101, 108, 95, 114, 101, 106, 101, 99, 116, 105, 111, 110, 95, 118,
        49, 18, 14, 10, 6, 114, 101, 106, 101, 99, 116, 24, 1, 32, 1, 40, 13, 34, 90, 10, 36, 98,
        108, 111, 99, 107, 99, 104, 97, 105, 110, 95, 115, 116, 97, 116, 101, 95, 99, 104, 97, 110,
        110, 101, 108, 95, 114, 101, 115, 112, 111, 110, 115, 101, 95, 118, 49, 18, 16, 10, 8, 97,
        99, 99, 101, 112, 116, 101, 100, 24, 1, 32, 1, 40, 8, 18, 32, 10, 8, 100, 111, 119, 110,
        108, 105, 110, 107, 24, 4, 32, 1, 40, 11, 50, 14, 46, 104, 101, 108, 105, 117, 109, 46, 112,
        97, 99, 107, 101, 116, 34, 101, 10, 35, 98, 108, 111, 99, 107, 99, 104, 97, 105, 110, 95,
        115, 116, 97, 116, 101, 95, 99, 104, 97, 110, 110, 101, 108, 95, 115, 117, 109, 109, 97,
        114, 121, 95, 118, 49, 18, 24, 10, 16, 99, 108, 105, 101, 110, 116, 95, 112, 117, 98, 107,
        101, 121, 98, 105, 110, 24, 1, 32, 1, 40, 12, 18, 19, 10, 11, 110, 117, 109, 95, 112, 97,
        99, 107, 101, 116, 115, 24, 2, 32, 1, 40, 4, 18, 15, 10, 7, 110, 117, 109, 95, 100, 99, 115,
        24, 3, 32, 1, 40, 4, 34, 161, 2, 10, 27, 98, 108, 111, 99, 107, 99, 104, 97, 105, 110, 95,
        115, 116, 97, 116, 101, 95, 99, 104, 97, 110, 110, 101, 108, 95, 118, 49, 18, 10, 10, 2,
        105, 100, 24, 1, 32, 1, 40, 12, 18, 13, 10, 5, 111, 119, 110, 101, 114, 24, 2, 32, 1, 40,
        12, 18, 15, 10, 7, 99, 114, 101, 100, 105, 116, 115, 24, 3, 32, 1, 40, 4, 18, 13, 10, 5,
        110, 111, 110, 99, 101, 24, 4, 32, 1, 40, 4, 18, 62, 10, 9, 115, 117, 109, 109, 97, 114,
        105, 101, 115, 24, 5, 32, 3, 40, 11, 50, 43, 46, 104, 101, 108, 105, 117, 109, 46, 98, 108,
        111, 99, 107, 99, 104, 97, 105, 110, 95, 115, 116, 97, 116, 101, 95, 99, 104, 97, 110, 110,
        101, 108, 95, 115, 117, 109, 109, 97, 114, 121, 95, 118, 49, 18, 17, 10, 9, 114, 111, 111,
        116, 95, 104, 97, 115, 104, 24, 6, 32, 1, 40, 12, 18, 14, 10, 6, 115, 107, 101, 119, 101,
        100, 24, 7, 32, 1, 40, 12, 18, 56, 10, 5, 115, 116, 97, 116, 101, 24, 8, 32, 1, 40, 14, 50,
        41, 46, 104, 101, 108, 105, 117, 109, 46, 98, 108, 111, 99, 107, 99, 104, 97, 105, 110, 95,
        115, 116, 97, 116, 101, 95, 99, 104, 97, 110, 110, 101, 108, 95, 115, 116, 97, 116, 101, 95,
        118, 49, 18, 23, 10, 15, 101, 120, 112, 105, 114, 101, 95, 97, 116, 95, 98, 108, 111, 99,
        107, 24, 9, 32, 1, 40, 4, 18, 17, 10, 9, 115, 105, 103, 110, 97, 116, 117, 114, 101, 24, 10,
        32, 1, 40, 12, 42, 107, 10, 6, 82, 101, 103, 105, 111, 110, 18, 9, 10, 5, 85, 83, 57, 49,
        53, 16, 0, 18, 9, 10, 5, 69, 85, 56, 54, 56, 16, 1, 18, 9, 10, 5, 69, 85, 52, 51, 51, 16, 2,
        18, 9, 10, 5, 67, 78, 52, 55, 48, 16, 3, 18, 9, 10, 5, 67, 78, 55, 55, 57, 16, 4, 18, 9, 10,
        5, 65, 85, 57, 49, 53, 16, 5, 18, 9, 10, 5, 65, 83, 57, 50, 51, 16, 6, 18, 9, 10, 5, 75, 82,
        57, 50, 48, 16, 7, 18, 9, 10, 5, 73, 78, 56, 54, 53, 16, 8, 42, 57, 10, 33, 98, 108, 111,
        99, 107, 99, 104, 97, 105, 110, 95, 115, 116, 97, 116, 101, 95, 99, 104, 97, 110, 110, 101,
        108, 95, 115, 116, 97, 116, 101, 95, 118, 49, 18, 8, 10, 4, 111, 112, 101, 110, 16, 0, 18,
        10, 10, 6, 99, 108, 111, 115, 101, 100, 16, 1, 98, 6, 112, 114, 111, 116, 111, 51>>;
descriptor("packet") ->
    <<10, 19, 104, 101, 108, 105, 117, 109, 47, 112, 97, 99, 107, 101, 116, 46, 112, 114, 111, 116,
        111, 18, 6, 104, 101, 108, 105, 117, 109, 34, 37, 10, 3, 101, 117, 105, 18, 14, 10, 6, 100,
        101, 118, 101, 117, 105, 24, 1, 32, 1, 40, 4, 18, 14, 10, 6, 97, 112, 112, 101, 117, 105,
        24, 2, 32, 1, 40, 4, 34, 168, 2, 10, 6, 112, 97, 99, 107, 101, 116, 18, 11, 10, 3, 111, 117,
        105, 24, 1, 32, 1, 40, 13, 18, 40, 10, 4, 116, 121, 112, 101, 24, 2, 32, 1, 40, 14, 50, 26,
        46, 104, 101, 108, 105, 117, 109, 46, 112, 97, 99, 107, 101, 116, 46, 112, 97, 99, 107, 101,
        116, 95, 116, 121, 112, 101, 18, 15, 10, 7, 112, 97, 121, 108, 111, 97, 100, 24, 3, 32, 1,
        40, 12, 18, 17, 10, 9, 116, 105, 109, 101, 115, 116, 97, 109, 112, 24, 4, 32, 1, 40, 4, 18,
        23, 10, 15, 115, 105, 103, 110, 97, 108, 95, 115, 116, 114, 101, 110, 103, 116, 104, 24, 5,
        32, 1, 40, 2, 18, 17, 10, 9, 102, 114, 101, 113, 117, 101, 110, 99, 121, 24, 6, 32, 1, 40,
        2, 18, 16, 10, 8, 100, 97, 116, 97, 114, 97, 116, 101, 24, 7, 32, 1, 40, 9, 18, 11, 10, 3,
        115, 110, 114, 24, 8, 32, 1, 40, 2, 18, 44, 10, 7, 114, 111, 117, 116, 105, 110, 103, 24, 9,
        32, 1, 40, 11, 50, 27, 46, 104, 101, 108, 105, 117, 109, 46, 114, 111, 117, 116, 105, 110,
        103, 95, 105, 110, 102, 111, 114, 109, 97, 116, 105, 111, 110, 18, 34, 10, 10, 114, 120, 50,
        95, 119, 105, 110, 100, 111, 119, 24, 10, 32, 1, 40, 11, 50, 14, 46, 104, 101, 108, 105,
        117, 109, 46, 119, 105, 110, 100, 111, 119, 34, 38, 10, 11, 112, 97, 99, 107, 101, 116, 95,
        116, 121, 112, 101, 18, 10, 10, 6, 108, 111, 110, 103, 102, 105, 16, 0, 18, 11, 10, 7, 108,
        111, 114, 97, 119, 97, 110, 16, 1, 34, 76, 10, 19, 114, 111, 117, 116, 105, 110, 103, 95,
        105, 110, 102, 111, 114, 109, 97, 116, 105, 111, 110, 18, 17, 10, 7, 100, 101, 118, 97, 100,
        100, 114, 24, 1, 32, 1, 40, 13, 72, 0, 18, 26, 10, 3, 101, 117, 105, 24, 2, 32, 1, 40, 11,
        50, 11, 46, 104, 101, 108, 105, 117, 109, 46, 101, 117, 105, 72, 0, 66, 6, 10, 4, 100, 97,
        116, 97, 34, 64, 10, 6, 119, 105, 110, 100, 111, 119, 18, 17, 10, 9, 116, 105, 109, 101,
        115, 116, 97, 109, 112, 24, 1, 32, 1, 40, 4, 18, 17, 10, 9, 102, 114, 101, 113, 117, 101,
        110, 99, 121, 24, 2, 32, 1, 40, 2, 18, 16, 10, 8, 100, 97, 116, 97, 114, 97, 116, 101, 24,
        3, 32, 1, 40, 9, 98, 6, 112, 114, 111, 116, 111, 51>>;
descriptor(X) ->
    error({gpb_error, {badname, X}}).

gpb_version_as_string() ->
    "4.7.3".

gpb_version_as_list() ->
    [4, 7, 3].
