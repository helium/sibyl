%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.16.0
-module(routes_v1).

-export([encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/3, merge_msgs/4]).
-export([verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

%% enumerated types

-export_type([]).

%% message types
-type 'Empty'() :: #{}.

-type routing_v1() ::
    % = 1, optional, 32 bits
    #{
        oui => non_neg_integer(),
        % = 2, optional
        owner => iodata(),
        % = 3, repeated
        router_addresses => [iodata()],
        % = 4, repeated
        filters => [iodata()],
        % = 5, repeated
        subnets => [iodata()]
    }.

-type routing_v1_response() ::
    % = 1, repeated
    #{
        routes => [routing_v1()],
        % = 2, optional
        signature => iodata(),
        % = 3, optional, 64 bits
        height => non_neg_integer()
    }.

-type routing_v1_update() ::
    % = 1, optional
    #{
        route => routing_v1(),
        % = 2, optional
        signature => iodata(),
        % = 3, optional, 64 bits
        height => non_neg_integer(),
        % = 4, optional
        action => iodata()
    }.

-export_type(['Empty'/0, 'routing_v1'/0, 'routing_v1_response'/0, 'routing_v1_update'/0]).

-spec encode_msg('Empty'() | routing_v1() | routing_v1_response() | routing_v1_update(), atom()) ->
    binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) -> encode_msg(Msg, MsgName, []).

-spec encode_msg(
    'Empty'() | routing_v1() | routing_v1_response() | routing_v1_update(),
    atom(),
    list()
) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
        true -> verify_msg(Msg, MsgName, Opts);
        false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'Empty' -> encode_msg_Empty(id(Msg, TrUserData), TrUserData);
        routing_v1 -> encode_msg_routing_v1(id(Msg, TrUserData), TrUserData);
        routing_v1_response -> encode_msg_routing_v1_response(id(Msg, TrUserData), TrUserData);
        routing_v1_update -> encode_msg_routing_v1_update(id(Msg, TrUserData), TrUserData)
    end.

encode_msg_Empty(_Msg, _TrUserData) -> <<>>.

encode_msg_routing_v1(Msg, TrUserData) -> encode_msg_routing_v1(Msg, <<>>, TrUserData).

encode_msg_routing_v1(#{} = M, Bin, TrUserData) ->
    B1 =
        case M of
            #{oui := F1} ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if
                        TrF1 =:= 0 -> Bin;
                        true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
                    end
                end;
            _ ->
                Bin
        end,
    B2 =
        case M of
            #{owner := F2} ->
                begin
                    TrF2 = id(F2, TrUserData),
                    case iolist_size(TrF2) of
                        0 -> B1;
                        _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
                    end
                end;
            _ ->
                B1
        end,
    B3 =
        case M of
            #{router_addresses := F3} ->
                TrF3 = id(F3, TrUserData),
                if
                    TrF3 == [] -> B2;
                    true -> e_field_routing_v1_router_addresses(TrF3, B2, TrUserData)
                end;
            _ ->
                B2
        end,
    B4 =
        case M of
            #{filters := F4} ->
                TrF4 = id(F4, TrUserData),
                if
                    TrF4 == [] -> B3;
                    true -> e_field_routing_v1_filters(TrF4, B3, TrUserData)
                end;
            _ ->
                B3
        end,
    case M of
        #{subnets := F5} ->
            TrF5 = id(F5, TrUserData),
            if
                TrF5 == [] -> B4;
                true -> e_field_routing_v1_subnets(TrF5, B4, TrUserData)
            end;
        _ ->
            B4
    end.

encode_msg_routing_v1_response(Msg, TrUserData) ->
    encode_msg_routing_v1_response(Msg, <<>>, TrUserData).

encode_msg_routing_v1_response(#{} = M, Bin, TrUserData) ->
    B1 =
        case M of
            #{routes := F1} ->
                TrF1 = id(F1, TrUserData),
                if
                    TrF1 == [] -> Bin;
                    true -> e_field_routing_v1_response_routes(TrF1, Bin, TrUserData)
                end;
            _ ->
                Bin
        end,
    B2 =
        case M of
            #{signature := F2} ->
                begin
                    TrF2 = id(F2, TrUserData),
                    case iolist_size(TrF2) of
                        0 -> B1;
                        _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
                    end
                end;
            _ ->
                B1
        end,
    case M of
        #{height := F3} ->
            begin
                TrF3 = id(F3, TrUserData),
                if
                    TrF3 =:= 0 -> B2;
                    true -> e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
                end
            end;
        _ ->
            B2
    end.

encode_msg_routing_v1_update(Msg, TrUserData) ->
    encode_msg_routing_v1_update(Msg, <<>>, TrUserData).

encode_msg_routing_v1_update(#{} = M, Bin, TrUserData) ->
    B1 =
        case M of
            #{route := F1} ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if
                        TrF1 =:= undefined ->
                            Bin;
                        true ->
                            e_mfield_routing_v1_update_route(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end;
            _ ->
                Bin
        end,
    B2 =
        case M of
            #{signature := F2} ->
                begin
                    TrF2 = id(F2, TrUserData),
                    case iolist_size(TrF2) of
                        0 -> B1;
                        _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
                    end
                end;
            _ ->
                B1
        end,
    B3 =
        case M of
            #{height := F3} ->
                begin
                    TrF3 = id(F3, TrUserData),
                    if
                        TrF3 =:= 0 -> B2;
                        true -> e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
                    end
                end;
            _ ->
                B2
        end,
    case M of
        #{action := F4} ->
            begin
                TrF4 = id(F4, TrUserData),
                case iolist_size(TrF4) of
                    0 -> B3;
                    _ -> e_type_bytes(TrF4, <<B3/binary, 34>>, TrUserData)
                end
            end;
        _ ->
            B3
    end.

e_field_routing_v1_router_addresses([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_type_bytes(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_routing_v1_router_addresses(Rest, Bin3, TrUserData);
e_field_routing_v1_router_addresses([], Bin, _TrUserData) ->
    Bin.

e_field_routing_v1_filters([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 34>>,
    Bin3 = e_type_bytes(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_routing_v1_filters(Rest, Bin3, TrUserData);
e_field_routing_v1_filters([], Bin, _TrUserData) ->
    Bin.

e_field_routing_v1_subnets([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 42>>,
    Bin3 = e_type_bytes(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_routing_v1_subnets(Rest, Bin3, TrUserData);
e_field_routing_v1_subnets([], Bin, _TrUserData) ->
    Bin.

e_mfield_routing_v1_response_routes(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_routing_v1(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_routing_v1_response_routes([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_routing_v1_response_routes(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_routing_v1_response_routes(Rest, Bin3, TrUserData);
e_field_routing_v1_response_routes([], Bin, _TrUserData) ->
    Bin.

e_mfield_routing_v1_update_route(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_routing_v1(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

-compile({nowarn_unused_function, e_type_sint/3}).

e_type_sint(Value, Bin, _TrUserData) when Value >= 0 -> e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) -> e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function, e_type_int32/3}).

e_type_int32(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function, e_type_int64/3}).

e_type_int64(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function, e_type_bool/3}).

e_type_bool(true, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function, e_type_string/3}).

e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function, e_type_bytes/3}).

e_type_bytes(Bytes, Bin, _TrUserData) when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData) when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function, e_type_fixed32/3}).

e_type_fixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function, e_type_sfixed32/3}).

e_type_sfixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function, e_type_fixed64/3}).

e_type_fixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function, e_type_sfixed64/3}).

e_type_sfixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function, e_type_float/3}).

e_type_float(V, Bin, _) when is_number(V) -> <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) -> <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) -> <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) -> <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function, e_type_double/3}).

e_type_double(V, Bin, _) when is_number(V) -> <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) -> <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) -> <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) -> <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function, e_unknown_elems/2}).

e_unknown_elems([Elem | Rest], Bin) ->
    BinR =
        case Elem of
            {varint, FNum, N} ->
                BinF = e_varint(FNum bsl 3, Bin),
                e_varint(N, BinF);
            {length_delimited, FNum, Data} ->
                BinF = e_varint(FNum bsl 3 bor 2, Bin),
                BinL = e_varint(byte_size(Data), BinF),
                <<BinL/binary, Data/binary>>;
            {group, FNum, GroupFields} ->
                Bin1 = e_varint(FNum bsl 3 bor 3, Bin),
                Bin2 = e_unknown_elems(GroupFields, Bin1),
                e_varint(FNum bsl 3 bor 4, Bin2);
            {fixed32, FNum, V} ->
                BinF = e_varint(FNum bsl 3 bor 5, Bin),
                <<BinF/binary, V:32/little>>;
            {fixed64, FNum, V} ->
                BinF = e_varint(FNum bsl 3 bor 1, Bin),
                <<BinF/binary, V:64/little>>
        end,
    e_unknown_elems(Rest, BinR);
e_unknown_elems([], Bin) ->
    Bin.

-compile({nowarn_unused_function, e_varint/3}).

e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function, e_varint/2}).

e_varint(N, Bin) when N =< 127 ->
    <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

decode_msg(Bin, MsgName) when is_binary(Bin) -> decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try
        decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch
        Class:Reason:StackTrace ->
            error({gpb_error, {decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try
        decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch
        Class:Reason ->
            StackTrace = erlang:get_stacktrace(),
            error({gpb_error, {decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit('Empty', Bin, TrUserData) ->
    id(decode_msg_Empty(Bin, TrUserData), TrUserData);
decode_msg_2_doit(routing_v1, Bin, TrUserData) ->
    id(decode_msg_routing_v1(Bin, TrUserData), TrUserData);
decode_msg_2_doit(routing_v1_response, Bin, TrUserData) ->
    id(decode_msg_routing_v1_response(Bin, TrUserData), TrUserData);
decode_msg_2_doit(routing_v1_update, Bin, TrUserData) ->
    id(decode_msg_routing_v1_update(Bin, TrUserData), TrUserData).

decode_msg_Empty(Bin, TrUserData) -> dfp_read_field_def_Empty(Bin, 0, 0, 0, TrUserData).

dfp_read_field_def_Empty(<<>>, 0, 0, _, _) ->
    #{};
dfp_read_field_def_Empty(Other, Z1, Z2, F, TrUserData) ->
    dg_read_field_def_Empty(Other, Z1, Z2, F, TrUserData).

dg_read_field_def_Empty(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when N < 32 - 7 ->
    dg_read_field_def_Empty(Rest, N + 7, X bsl N + Acc, F, TrUserData);
dg_read_field_def_Empty(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
        0 -> skip_varint_Empty(Rest, 0, 0, Key bsr 3, TrUserData);
        1 -> skip_64_Empty(Rest, 0, 0, Key bsr 3, TrUserData);
        2 -> skip_length_delimited_Empty(Rest, 0, 0, Key bsr 3, TrUserData);
        3 -> skip_group_Empty(Rest, 0, 0, Key bsr 3, TrUserData);
        5 -> skip_32_Empty(Rest, 0, 0, Key bsr 3, TrUserData)
    end;
dg_read_field_def_Empty(<<>>, 0, 0, _, _) ->
    #{}.

skip_varint_Empty(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) ->
    skip_varint_Empty(Rest, Z1, Z2, F, TrUserData);
skip_varint_Empty(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) ->
    dfp_read_field_def_Empty(Rest, Z1, Z2, F, TrUserData).

skip_length_delimited_Empty(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when N < 57 ->
    skip_length_delimited_Empty(Rest, N + 7, X bsl N + Acc, F, TrUserData);
skip_length_delimited_Empty(<<0:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Empty(Rest2, 0, 0, F, TrUserData).

skip_group_Empty(Bin, _, Z2, FNum, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Empty(Rest, 0, Z2, FNum, TrUserData).

skip_32_Empty(<<_:32, Rest/binary>>, Z1, Z2, F, TrUserData) ->
    dfp_read_field_def_Empty(Rest, Z1, Z2, F, TrUserData).

skip_64_Empty(<<_:64, Rest/binary>>, Z1, Z2, F, TrUserData) ->
    dfp_read_field_def_Empty(Rest, Z1, Z2, F, TrUserData).

decode_msg_routing_v1(Bin, TrUserData) ->
    dfp_read_field_def_routing_v1(
        Bin,
        0,
        0,
        0,
        id(0, TrUserData),
        id(<<>>, TrUserData),
        id([], TrUserData),
        id([], TrUserData),
        id([], TrUserData),
        TrUserData
    ).

dfp_read_field_def_routing_v1(
    <<8, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    d_field_routing_v1_oui(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_routing_v1(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    d_field_routing_v1_owner(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_routing_v1(
    <<26, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    d_field_routing_v1_router_addresses(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_routing_v1(
    <<34, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    d_field_routing_v1_filters(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_routing_v1(
    <<42, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    d_field_routing_v1_subnets(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_routing_v1(<<>>, 0, 0, _, F@_1, F@_2, R1, R2, R3, TrUserData) ->
    #{
        oui => F@_1,
        owner => F@_2,
        router_addresses => lists_reverse(R1, TrUserData),
        filters => lists_reverse(R2, TrUserData),
        subnets => lists_reverse(R3, TrUserData)
    };
dfp_read_field_def_routing_v1(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dg_read_field_def_routing_v1(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_routing_v1(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 32 - 7 ->
    dg_read_field_def_routing_v1(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
dg_read_field_def_routing_v1(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            d_field_routing_v1_oui(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        18 ->
            d_field_routing_v1_owner(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        26 ->
            d_field_routing_v1_router_addresses(
                Rest,
                0,
                0,
                0,
                F@_1,
                F@_2,
                F@_3,
                F@_4,
                F@_5,
                TrUserData
            );
        34 ->
            d_field_routing_v1_filters(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        42 ->
            d_field_routing_v1_subnets(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_routing_v1(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    );
                1 ->
                    skip_64_routing_v1(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    );
                2 ->
                    skip_length_delimited_routing_v1(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    );
                3 ->
                    skip_group_routing_v1(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    );
                5 ->
                    skip_32_routing_v1(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        F@_5,
                        TrUserData
                    )
            end
    end;
dg_read_field_def_routing_v1(<<>>, 0, 0, _, F@_1, F@_2, R1, R2, R3, TrUserData) ->
    #{
        oui => F@_1,
        owner => F@_2,
        router_addresses => lists_reverse(R1, TrUserData),
        filters => lists_reverse(R2, TrUserData),
        subnets => lists_reverse(R3, TrUserData)
    }.

d_field_routing_v1_oui(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    d_field_routing_v1_oui(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_routing_v1_oui(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_routing_v1(RestF, 0, 0, F, NewFValue, F@_2, F@_3, F@_4, F@_5, TrUserData).

d_field_routing_v1_owner(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    d_field_routing_v1_owner(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
d_field_routing_v1_owner(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    _,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    dfp_read_field_def_routing_v1(RestF, 0, 0, F, F@_1, NewFValue, F@_3, F@_4, F@_5, TrUserData).

d_field_routing_v1_router_addresses(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    d_field_routing_v1_router_addresses(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
d_field_routing_v1_router_addresses(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    Prev,
    F@_4,
    F@_5,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    dfp_read_field_def_routing_v1(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        cons(NewFValue, Prev, TrUserData),
        F@_4,
        F@_5,
        TrUserData
    ).

d_field_routing_v1_filters(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    d_field_routing_v1_filters(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
d_field_routing_v1_filters(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    Prev,
    F@_5,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    dfp_read_field_def_routing_v1(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        cons(NewFValue, Prev, TrUserData),
        F@_5,
        TrUserData
    ).

d_field_routing_v1_subnets(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    d_field_routing_v1_subnets(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
d_field_routing_v1_subnets(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    Prev,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    dfp_read_field_def_routing_v1(
        RestF,
        0,
        0,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        cons(NewFValue, Prev, TrUserData),
        TrUserData
    ).

skip_varint_routing_v1(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    skip_varint_routing_v1(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
skip_varint_routing_v1(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    dfp_read_field_def_routing_v1(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_routing_v1(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) when N < 57 ->
    skip_length_delimited_routing_v1(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        F@_5,
        TrUserData
    );
skip_length_delimited_routing_v1(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    F@_5,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_routing_v1(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_group_routing_v1(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_routing_v1(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_32_routing_v1(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_routing_v1(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_64_routing_v1(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_routing_v1(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

decode_msg_routing_v1_response(Bin, TrUserData) ->
    dfp_read_field_def_routing_v1_response(
        Bin,
        0,
        0,
        0,
        id([], TrUserData),
        id(<<>>, TrUserData),
        id(0, TrUserData),
        TrUserData
    ).

dfp_read_field_def_routing_v1_response(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    d_field_routing_v1_response_routes(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_routing_v1_response(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    d_field_routing_v1_response_signature(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_routing_v1_response(
    <<24, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    d_field_routing_v1_response_height(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_routing_v1_response(<<>>, 0, 0, _, R1, F@_2, F@_3, TrUserData) ->
    S1 = #{signature => F@_2, height => F@_3},
    if
        R1 == '$undef' -> S1;
        true -> S1#{routes => lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_routing_v1_response(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) ->
    dg_read_field_def_routing_v1_response(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_routing_v1_response(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 32 - 7 ->
    dg_read_field_def_routing_v1_response(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
dg_read_field_def_routing_v1_response(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_routing_v1_response_routes(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        18 ->
            d_field_routing_v1_response_signature(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        24 ->
            d_field_routing_v1_response_height(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_routing_v1_response(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                1 ->
                    skip_64_routing_v1_response(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                2 ->
                    skip_length_delimited_routing_v1_response(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                3 ->
                    skip_group_routing_v1_response(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        TrUserData
                    );
                5 ->
                    skip_32_routing_v1_response(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
dg_read_field_def_routing_v1_response(<<>>, 0, 0, _, R1, F@_2, F@_3, TrUserData) ->
    S1 = #{signature => F@_2, height => F@_3},
    if
        R1 == '$undef' -> S1;
        true -> S1#{routes => lists_reverse(R1, TrUserData)}
    end.

d_field_routing_v1_response_routes(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    d_field_routing_v1_response_routes(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_routing_v1_response_routes(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    Prev,
    F@_2,
    F@_3,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id(decode_msg_routing_v1(Bs, TrUserData), TrUserData), Rest2}
    end,
    dfp_read_field_def_routing_v1_response(
        RestF,
        0,
        0,
        F,
        cons(NewFValue, Prev, TrUserData),
        F@_2,
        F@_3,
        TrUserData
    ).

d_field_routing_v1_response_signature(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    d_field_routing_v1_response_signature(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
d_field_routing_v1_response_signature(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    _,
    F@_3,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    dfp_read_field_def_routing_v1_response(RestF, 0, 0, F, F@_1, NewFValue, F@_3, TrUserData).

d_field_routing_v1_response_height(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    d_field_routing_v1_response_height(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_routing_v1_response_height(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_routing_v1_response(RestF, 0, 0, F, F@_1, F@_2, NewFValue, TrUserData).

skip_varint_routing_v1_response(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_routing_v1_response(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
skip_varint_routing_v1_response(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_routing_v1_response(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_routing_v1_response(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) when N < 57 ->
    skip_length_delimited_routing_v1_response(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        TrUserData
    );
skip_length_delimited_routing_v1_response(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_routing_v1_response(Rest2, 0, 0, F, F@_1, F@_2, F@_3, TrUserData).

skip_group_routing_v1_response(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_routing_v1_response(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, TrUserData).

skip_32_routing_v1_response(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_routing_v1_response(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_64_routing_v1_response(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_routing_v1_response(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

decode_msg_routing_v1_update(Bin, TrUserData) ->
    dfp_read_field_def_routing_v1_update(
        Bin,
        0,
        0,
        0,
        id('$undef', TrUserData),
        id(<<>>, TrUserData),
        id(0, TrUserData),
        id(<<>>, TrUserData),
        TrUserData
    ).

dfp_read_field_def_routing_v1_update(
    <<10, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    d_field_routing_v1_update_route(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_routing_v1_update(
    <<18, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    d_field_routing_v1_update_signature(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_routing_v1_update(
    <<24, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    d_field_routing_v1_update_height(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_routing_v1_update(
    <<34, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    d_field_routing_v1_update_action(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_routing_v1_update(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, _) ->
    S1 = #{signature => F@_2, height => F@_3, action => F@_4},
    if
        F@_1 == '$undef' -> S1;
        true -> S1#{route => F@_1}
    end;
dfp_read_field_def_routing_v1_update(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dg_read_field_def_routing_v1_update(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_routing_v1_update(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 32 - 7 ->
    dg_read_field_def_routing_v1_update(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
dg_read_field_def_routing_v1_update(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    _,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_routing_v1_update_route(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        18 ->
            d_field_routing_v1_update_signature(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        24 ->
            d_field_routing_v1_update_height(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        34 ->
            d_field_routing_v1_update_action(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_routing_v1_update(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        TrUserData
                    );
                1 ->
                    skip_64_routing_v1_update(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        TrUserData
                    );
                2 ->
                    skip_length_delimited_routing_v1_update(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        TrUserData
                    );
                3 ->
                    skip_group_routing_v1_update(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        TrUserData
                    );
                5 ->
                    skip_32_routing_v1_update(
                        Rest,
                        0,
                        0,
                        Key bsr 3,
                        F@_1,
                        F@_2,
                        F@_3,
                        F@_4,
                        TrUserData
                    )
            end
    end;
dg_read_field_def_routing_v1_update(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, _) ->
    S1 = #{signature => F@_2, height => F@_3, action => F@_4},
    if
        F@_1 == '$undef' -> S1;
        true -> S1#{route => F@_1}
    end.

d_field_routing_v1_update_route(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 57 ->
    d_field_routing_v1_update_route(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
d_field_routing_v1_update_route(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    Prev,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bs:Len/binary, Rest2/binary>> = Rest,
        {id(decode_msg_routing_v1(Bs, TrUserData), TrUserData), Rest2}
    end,
    dfp_read_field_def_routing_v1_update(
        RestF,
        0,
        0,
        F,
        if
            Prev == '$undef' -> NewFValue;
            true -> merge_msg_routing_v1(Prev, NewFValue, TrUserData)
        end,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    ).

d_field_routing_v1_update_signature(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 57 ->
    d_field_routing_v1_update_signature(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
d_field_routing_v1_update_signature(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    _,
    F@_3,
    F@_4,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    dfp_read_field_def_routing_v1_update(RestF, 0, 0, F, F@_1, NewFValue, F@_3, F@_4, TrUserData).

d_field_routing_v1_update_height(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 57 ->
    d_field_routing_v1_update_height(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
d_field_routing_v1_update_height(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    _,
    F@_4,
    TrUserData
) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_routing_v1_update(RestF, 0, 0, F, F@_1, F@_2, NewFValue, F@_4, TrUserData).

d_field_routing_v1_update_action(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 57 ->
    d_field_routing_v1_update_action(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
d_field_routing_v1_update_action(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    _,
    TrUserData
) ->
    {NewFValue, RestF} = begin
        Len = X bsl N + Acc,
        <<Bytes:Len/binary, Rest2/binary>> = Rest,
        Bytes2 = binary:copy(Bytes),
        {id(Bytes2, TrUserData), Rest2}
    end,
    dfp_read_field_def_routing_v1_update(RestF, 0, 0, F, F@_1, F@_2, F@_3, NewFValue, TrUserData).

skip_varint_routing_v1_update(
    <<1:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    skip_varint_routing_v1_update(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_varint_routing_v1_update(
    <<0:1, _:7, Rest/binary>>,
    Z1,
    Z2,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    dfp_read_field_def_routing_v1_update(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_routing_v1_update(
    <<1:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) when N < 57 ->
    skip_length_delimited_routing_v1_update(
        Rest,
        N + 7,
        X bsl N + Acc,
        F,
        F@_1,
        F@_2,
        F@_3,
        F@_4,
        TrUserData
    );
skip_length_delimited_routing_v1_update(
    <<0:1, X:7, Rest/binary>>,
    N,
    Acc,
    F,
    F@_1,
    F@_2,
    F@_3,
    F@_4,
    TrUserData
) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_routing_v1_update(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_group_routing_v1_update(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_routing_v1_update(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_32_routing_v1_update(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_routing_v1_update(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_64_routing_v1_update(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_routing_v1_update(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum) when N < (32 - 7) ->
    read_gr_b(Tl, N + 7, X bsl N + Acc, NumBytes, TagLen + 1, FieldNum);
read_gr_b(
    <<0:1, X:7, Tl/binary>>,
    N,
    Acc,
    NumBytes,
    TagLen,
    FieldNum
) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        % 4 = group_end
        {FieldNum, 4} ->
            {NumBytes, TagLen1};
        % 0 = varint
        {_, 0} ->
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        % 1 = bits64
        {_, 1} ->
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        % 2 = length_delimited
        {_, 2} ->
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        % 3 = group_start
        {_, 3} ->
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        % 4 = group_end
        {_, 4} ->
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        % 5 = bits32
        {_, 5} ->
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum) when N < (64 - 7) ->
    read_gr_vi(Tl, N + 7, NumBytes + 1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes + 1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) when N < (64 - 7) ->
    read_gr_ld(Tl, N + 7, X bsl N + Acc, NumBytes + 1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) -> merge_msgs(Prev, New, MsgName, []).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'Empty' -> merge_msg_Empty(Prev, New, TrUserData);
        routing_v1 -> merge_msg_routing_v1(Prev, New, TrUserData);
        routing_v1_response -> merge_msg_routing_v1_response(Prev, New, TrUserData);
        routing_v1_update -> merge_msg_routing_v1_update(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function, merge_msg_Empty/3}).

merge_msg_Empty(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function, merge_msg_routing_v1/3}).

merge_msg_routing_v1(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 =
        case {PMsg, NMsg} of
            {_, #{oui := NFoui}} -> S1#{oui => NFoui};
            {#{oui := PFoui}, _} -> S1#{oui => PFoui};
            _ -> S1
        end,
    S3 =
        case {PMsg, NMsg} of
            {_, #{owner := NFowner}} -> S2#{owner => NFowner};
            {#{owner := PFowner}, _} -> S2#{owner => PFowner};
            _ -> S2
        end,
    S4 =
        case {PMsg, NMsg} of
            {#{router_addresses := PFrouter_addresses}, #{router_addresses := NFrouter_addresses}} ->
                S3#{
                    router_addresses => 'erlang_++'(
                        PFrouter_addresses,
                        NFrouter_addresses,
                        TrUserData
                    )
                };
            {_, #{router_addresses := NFrouter_addresses}} ->
                S3#{router_addresses => NFrouter_addresses};
            {#{router_addresses := PFrouter_addresses}, _} ->
                S3#{router_addresses => PFrouter_addresses};
            {_, _} ->
                S3
        end,
    S5 =
        case {PMsg, NMsg} of
            {#{filters := PFfilters}, #{filters := NFfilters}} ->
                S4#{filters => 'erlang_++'(PFfilters, NFfilters, TrUserData)};
            {_, #{filters := NFfilters}} ->
                S4#{filters => NFfilters};
            {#{filters := PFfilters}, _} ->
                S4#{filters => PFfilters};
            {_, _} ->
                S4
        end,
    case {PMsg, NMsg} of
        {#{subnets := PFsubnets}, #{subnets := NFsubnets}} ->
            S5#{subnets => 'erlang_++'(PFsubnets, NFsubnets, TrUserData)};
        {_, #{subnets := NFsubnets}} ->
            S5#{subnets => NFsubnets};
        {#{subnets := PFsubnets}, _} ->
            S5#{subnets => PFsubnets};
        {_, _} ->
            S5
    end.

-compile({nowarn_unused_function, merge_msg_routing_v1_response/3}).

merge_msg_routing_v1_response(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 =
        case {PMsg, NMsg} of
            {#{routes := PFroutes}, #{routes := NFroutes}} ->
                S1#{routes => 'erlang_++'(PFroutes, NFroutes, TrUserData)};
            {_, #{routes := NFroutes}} ->
                S1#{routes => NFroutes};
            {#{routes := PFroutes}, _} ->
                S1#{routes => PFroutes};
            {_, _} ->
                S1
        end,
    S3 =
        case {PMsg, NMsg} of
            {_, #{signature := NFsignature}} -> S2#{signature => NFsignature};
            {#{signature := PFsignature}, _} -> S2#{signature => PFsignature};
            _ -> S2
        end,
    case {PMsg, NMsg} of
        {_, #{height := NFheight}} -> S3#{height => NFheight};
        {#{height := PFheight}, _} -> S3#{height => PFheight};
        _ -> S3
    end.

-compile({nowarn_unused_function, merge_msg_routing_v1_update/3}).

merge_msg_routing_v1_update(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 =
        case {PMsg, NMsg} of
            {#{route := PFroute}, #{route := NFroute}} ->
                S1#{route => merge_msg_routing_v1(PFroute, NFroute, TrUserData)};
            {_, #{route := NFroute}} ->
                S1#{route => NFroute};
            {#{route := PFroute}, _} ->
                S1#{route => PFroute};
            {_, _} ->
                S1
        end,
    S3 =
        case {PMsg, NMsg} of
            {_, #{signature := NFsignature}} -> S2#{signature => NFsignature};
            {#{signature := PFsignature}, _} -> S2#{signature => PFsignature};
            _ -> S2
        end,
    S4 =
        case {PMsg, NMsg} of
            {_, #{height := NFheight}} -> S3#{height => NFheight};
            {#{height := PFheight}, _} -> S3#{height => PFheight};
            _ -> S3
        end,
    case {PMsg, NMsg} of
        {_, #{action := NFaction}} -> S4#{action => NFaction};
        {#{action := PFaction}, _} -> S4#{action => PFaction};
        _ -> S4
    end.

verify_msg(Msg, MsgName) when is_atom(MsgName) -> verify_msg(Msg, MsgName, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'Empty' -> v_msg_Empty(Msg, [MsgName], TrUserData);
        routing_v1 -> v_msg_routing_v1(Msg, [MsgName], TrUserData);
        routing_v1_response -> v_msg_routing_v1_response(Msg, [MsgName], TrUserData);
        routing_v1_update -> v_msg_routing_v1_update(Msg, [MsgName], TrUserData);
        _ -> mk_type_error(not_a_known_message, Msg, [])
    end.

-compile({nowarn_unused_function, v_msg_Empty/3}).

-dialyzer({nowarn_function, v_msg_Empty/3}).

v_msg_Empty(#{} = M, Path, _) ->
    lists:foreach(
        fun(OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path) end,
        maps:keys(M)
    ),
    ok;
v_msg_Empty(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M), 'Empty'}, M, Path);
v_msg_Empty(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Empty'}, X, Path).

-compile({nowarn_unused_function, v_msg_routing_v1/3}).

-dialyzer({nowarn_function, v_msg_routing_v1/3}).

v_msg_routing_v1(#{} = M, Path, TrUserData) ->
    case M of
        #{oui := F1} -> v_type_uint32(F1, [oui | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{owner := F2} -> v_type_bytes(F2, [owner | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{router_addresses := F3} ->
            if
                is_list(F3) ->
                    _ = [v_type_bytes(Elem, [router_addresses | Path], TrUserData) || Elem <- F3],
                    ok;
                true ->
                    mk_type_error({invalid_list_of, bytes}, F3, [router_addresses | Path])
            end;
        _ ->
            ok
    end,
    case M of
        #{filters := F4} ->
            if
                is_list(F4) ->
                    _ = [v_type_bytes(Elem, [filters | Path], TrUserData) || Elem <- F4],
                    ok;
                true ->
                    mk_type_error({invalid_list_of, bytes}, F4, [filters | Path])
            end;
        _ ->
            ok
    end,
    case M of
        #{subnets := F5} ->
            if
                is_list(F5) ->
                    _ = [v_type_bytes(Elem, [subnets | Path], TrUserData) || Elem <- F5],
                    ok;
                true ->
                    mk_type_error({invalid_list_of, bytes}, F5, [subnets | Path])
            end;
        _ ->
            ok
    end,
    lists:foreach(
        fun
            (oui) -> ok;
            (owner) -> ok;
            (router_addresses) -> ok;
            (filters) -> ok;
            (subnets) -> ok;
            (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
        end,
        maps:keys(M)
    ),
    ok;
v_msg_routing_v1(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M), routing_v1}, M, Path);
v_msg_routing_v1(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, routing_v1}, X, Path).

-compile({nowarn_unused_function, v_msg_routing_v1_response/3}).

-dialyzer({nowarn_function, v_msg_routing_v1_response/3}).

v_msg_routing_v1_response(#{} = M, Path, TrUserData) ->
    case M of
        #{routes := F1} ->
            if
                is_list(F1) ->
                    _ = [v_msg_routing_v1(Elem, [routes | Path], TrUserData) || Elem <- F1],
                    ok;
                true ->
                    mk_type_error({invalid_list_of, {msg, routing_v1}}, F1, [routes | Path])
            end;
        _ ->
            ok
    end,
    case M of
        #{signature := F2} -> v_type_bytes(F2, [signature | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{height := F3} -> v_type_uint64(F3, [height | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(
        fun
            (routes) -> ok;
            (signature) -> ok;
            (height) -> ok;
            (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
        end,
        maps:keys(M)
    ),
    ok;
v_msg_routing_v1_response(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M), routing_v1_response}, M, Path);
v_msg_routing_v1_response(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, routing_v1_response}, X, Path).

-compile({nowarn_unused_function, v_msg_routing_v1_update/3}).

-dialyzer({nowarn_function, v_msg_routing_v1_update/3}).

v_msg_routing_v1_update(#{} = M, Path, TrUserData) ->
    case M of
        #{route := F1} -> v_msg_routing_v1(F1, [route | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{signature := F2} -> v_type_bytes(F2, [signature | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{height := F3} -> v_type_uint64(F3, [height | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{action := F4} -> v_type_bytes(F4, [action | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(
        fun
            (route) -> ok;
            (signature) -> ok;
            (height) -> ok;
            (action) -> ok;
            (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
        end,
        maps:keys(M)
    ),
    ok;
v_msg_routing_v1_update(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M), routing_v1_update}, M, Path);
v_msg_routing_v1_update(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, routing_v1_update}, X, Path).

-compile({nowarn_unused_function, v_type_uint32/3}).

-dialyzer({nowarn_function, v_type_uint32/3}).

v_type_uint32(N, _Path, _TrUserData) when 0 =< N, N =< 4294967295 ->
    ok;
v_type_uint32(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, uint32, unsigned, 32}, N, Path);
v_type_uint32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, uint32, unsigned, 32}, X, Path).

-compile({nowarn_unused_function, v_type_uint64/3}).

-dialyzer({nowarn_function, v_type_uint64/3}).

v_type_uint64(N, _Path, _TrUserData) when 0 =< N, N =< 18446744073709551615 ->
    ok;
v_type_uint64(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, uint64, unsigned, 64}, N, Path);
v_type_uint64(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, uint64, unsigned, 64}, X, Path).

-compile({nowarn_unused_function, v_type_bytes/3}).

-dialyzer({nowarn_function, v_type_bytes/3}).

v_type_bytes(B, _Path, _TrUserData) when is_binary(B) -> ok;
v_type_bytes(B, _Path, _TrUserData) when is_list(B) -> ok;
v_type_bytes(X, Path, _TrUserData) -> mk_type_error(bad_binary_value, X, Path).

-compile({nowarn_unused_function, mk_type_error/3}).

-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error, {Error, [{value, ValueSeen}, {path, Path2}]}}).

-compile({nowarn_unused_function, prettify_path/1}).

-dialyzer({nowarn_function, prettify_path/1}).

prettify_path([]) ->
    top_level;
prettify_path(PathR) ->
    list_to_atom(
        lists:append(lists:join(".", lists:map(fun atom_to_list/1, lists:reverse(PathR))))
    ).

-compile({nowarn_unused_function, id/2}).
-compile({inline, id/2}).

id(X, _TrUserData) -> X.

-compile({nowarn_unused_function, v_ok/3}).
-compile({inline, v_ok/3}).

v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function, m_overwrite/3}).
-compile({inline, m_overwrite/3}).

m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function, cons/3}).
-compile({inline, cons/3}).

cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function, lists_reverse/2}).
-compile({inline, lists_reverse/2}).

'lists_reverse'(L, _TrUserData) -> lists:reverse(L).

-compile({nowarn_unused_function, 'erlang_++'/3}).
-compile({inline, 'erlang_++'/3}).

'erlang_++'(A, B, _TrUserData) -> A ++ B.

get_msg_defs() ->
    [
        {{msg, 'Empty'}, []},
        {{msg, routing_v1}, [
            #{
                name => oui,
                fnum => 1,
                rnum => 2,
                type => uint32,
                occurrence => optional,
                opts => []
            },
            #{
                name => owner,
                fnum => 2,
                rnum => 3,
                type => bytes,
                occurrence => optional,
                opts => []
            },
            #{
                name => router_addresses,
                fnum => 3,
                rnum => 4,
                type => bytes,
                occurrence => repeated,
                opts => []
            },
            #{
                name => filters,
                fnum => 4,
                rnum => 5,
                type => bytes,
                occurrence => repeated,
                opts => []
            },
            #{
                name => subnets,
                fnum => 5,
                rnum => 6,
                type => bytes,
                occurrence => repeated,
                opts => []
            }
        ]},
        {{msg, routing_v1_response}, [
            #{
                name => routes,
                fnum => 1,
                rnum => 2,
                type => {msg, routing_v1},
                occurrence => repeated,
                opts => []
            },
            #{
                name => signature,
                fnum => 2,
                rnum => 3,
                type => bytes,
                occurrence => optional,
                opts => []
            },
            #{
                name => height,
                fnum => 3,
                rnum => 4,
                type => uint64,
                occurrence => optional,
                opts => []
            }
        ]},
        {{msg, routing_v1_update}, [
            #{
                name => route,
                fnum => 1,
                rnum => 2,
                type => {msg, routing_v1},
                occurrence => optional,
                opts => []
            },
            #{
                name => signature,
                fnum => 2,
                rnum => 3,
                type => bytes,
                occurrence => optional,
                opts => []
            },
            #{
                name => height,
                fnum => 3,
                rnum => 4,
                type => uint64,
                occurrence => optional,
                opts => []
            },
            #{
                name => action,
                fnum => 4,
                rnum => 5,
                type => bytes,
                occurrence => optional,
                opts => []
            }
        ]}
    ].

get_msg_names() -> ['Empty', routing_v1, routing_v1_response, routing_v1_update].

get_group_names() -> [].

get_msg_or_group_names() -> ['Empty', routing_v1, routing_v1_response, routing_v1_update].

get_enum_names() -> [].

fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
        Fs when is_list(Fs) -> Fs;
        error -> erlang:error({no_such_msg, MsgName})
    end.

-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) -> erlang:error({no_such_enum, EnumName}).

find_msg_def('Empty') ->
    [];
find_msg_def(routing_v1) ->
    [
        #{name => oui, fnum => 1, rnum => 2, type => uint32, occurrence => optional, opts => []},
        #{name => owner, fnum => 2, rnum => 3, type => bytes, occurrence => optional, opts => []},
        #{
            name => router_addresses,
            fnum => 3,
            rnum => 4,
            type => bytes,
            occurrence => repeated,
            opts => []
        },
        #{name => filters, fnum => 4, rnum => 5, type => bytes, occurrence => repeated, opts => []},
        #{name => subnets, fnum => 5, rnum => 6, type => bytes, occurrence => repeated, opts => []}
    ];
find_msg_def(routing_v1_response) ->
    [
        #{
            name => routes,
            fnum => 1,
            rnum => 2,
            type => {msg, routing_v1},
            occurrence => repeated,
            opts => []
        },
        #{
            name => signature,
            fnum => 2,
            rnum => 3,
            type => bytes,
            occurrence => optional,
            opts => []
        },
        #{name => height, fnum => 3, rnum => 4, type => uint64, occurrence => optional, opts => []}
    ];
find_msg_def(routing_v1_update) ->
    [
        #{
            name => route,
            fnum => 1,
            rnum => 2,
            type => {msg, routing_v1},
            occurrence => optional,
            opts => []
        },
        #{
            name => signature,
            fnum => 2,
            rnum => 3,
            type => bytes,
            occurrence => optional,
            opts => []
        },
        #{name => height, fnum => 3, rnum => 4, type => uint64, occurrence => optional, opts => []},
        #{name => action, fnum => 4, rnum => 5, type => bytes, occurrence => optional, opts => []}
    ];
find_msg_def(_) ->
    error.

find_enum_def(_) -> error.

-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) -> erlang:error({no_enum_defs, E, V}).

-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) -> erlang:error({no_enum_defs, E, V}).

get_service_names() -> [routes_v1].

get_service_def(routes_v1) ->
    {{service, routes_v1}, [
        #{
            name => get_routes,
            input => 'Empty',
            output => routing_v1_response,
            input_stream => false,
            output_stream => false,
            opts => []
        },
        #{
            name => stream_route_updates,
            input => 'Empty',
            output => routing_v1_update,
            input_stream => false,
            output_stream => true,
            opts => []
        }
    ]};
get_service_def(_) ->
    error.

get_rpc_names(routes_v1) -> [get_routes, stream_route_updates];
get_rpc_names(_) -> error.

find_rpc_def(routes_v1, RpcName) -> find_rpc_def_routes_v1(RpcName);
find_rpc_def(_, _) -> error.

find_rpc_def_routes_v1(get_routes) ->
    #{
        name => get_routes,
        input => 'Empty',
        output => routing_v1_response,
        input_stream => false,
        output_stream => false,
        opts => []
    };
find_rpc_def_routes_v1(stream_route_updates) ->
    #{
        name => stream_route_updates,
        input => 'Empty',
        output => routing_v1_update,
        input_stream => false,
        output_stream => true,
        opts => []
    };
find_rpc_def_routes_v1(_) ->
    error.

fetch_rpc_def(ServiceName, RpcName) ->
    case find_rpc_def(ServiceName, RpcName) of
        Def when is_map(Def) -> Def;
        error -> erlang:error({no_such_rpc, ServiceName, RpcName})
    end.

%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
fqbin_to_service_name(<<"grpc.routes.v1.routes_v1">>) -> routes_v1;
fqbin_to_service_name(X) -> error({gpb_error, {badservice, X}}).

%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
service_name_to_fqbin(routes_v1) -> <<"grpc.routes.v1.routes_v1">>;
service_name_to_fqbin(X) -> error({gpb_error, {badservice, X}}).

%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
fqbins_to_service_and_rpc_name(<<"grpc.routes.v1.routes_v1">>, <<"get_routes">>) ->
    {routes_v1, get_routes};
fqbins_to_service_and_rpc_name(<<"grpc.routes.v1.routes_v1">>, <<"stream_route_updates">>) ->
    {routes_v1, stream_route_updates};
fqbins_to_service_and_rpc_name(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).

%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
service_and_rpc_name_to_fqbins(routes_v1, get_routes) ->
    {<<"grpc.routes.v1.routes_v1">>, <<"get_routes">>};
service_and_rpc_name_to_fqbins(routes_v1, stream_route_updates) ->
    {<<"grpc.routes.v1.routes_v1">>, <<"stream_route_updates">>};
service_and_rpc_name_to_fqbins(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).

fqbin_to_msg_name(<<"grpc.routes.v1.Empty">>) -> 'Empty';
fqbin_to_msg_name(<<"grpc.routes.v1.routing_v1">>) -> routing_v1;
fqbin_to_msg_name(<<"grpc.routes.v1.routing_v1_response">>) -> routing_v1_response;
fqbin_to_msg_name(<<"grpc.routes.v1.routing_v1_update">>) -> routing_v1_update;
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).

msg_name_to_fqbin('Empty') -> <<"grpc.routes.v1.Empty">>;
msg_name_to_fqbin(routing_v1) -> <<"grpc.routes.v1.routing_v1">>;
msg_name_to_fqbin(routing_v1_response) -> <<"grpc.routes.v1.routing_v1_response">>;
msg_name_to_fqbin(routing_v1_update) -> <<"grpc.routes.v1.routing_v1_update">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).

-spec fqbin_to_enum_name(_) -> no_return().
fqbin_to_enum_name(E) -> error({gpb_error, {badenum, E}}).

-spec enum_name_to_fqbin(_) -> no_return().
enum_name_to_fqbin(E) -> error({gpb_error, {badenum, E}}).

get_package_name() -> 'grpc.routes.v1'.

%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> false.

source_basename() -> "routes_v1.proto".

%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() -> ["routes_v1.proto"].

%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["routes_v1"].

get_msg_containment("routes_v1") -> ['Empty', routing_v1, routing_v1_response, routing_v1_update];
get_msg_containment(P) -> error({gpb_error, {badproto, P}}).

get_pkg_containment("routes_v1") -> undefined;
get_pkg_containment(P) -> error({gpb_error, {badproto, P}}).

get_service_containment("routes_v1") -> [routes_v1];
get_service_containment(P) -> error({gpb_error, {badproto, P}}).

get_rpc_containment("routes_v1") -> [{routes_v1, get_routes}, {routes_v1, stream_route_updates}];
get_rpc_containment(P) -> error({gpb_error, {badproto, P}}).

get_enum_containment("routes_v1") -> [];
get_enum_containment(P) -> error({gpb_error, {badproto, P}}).

get_proto_by_msg_name_as_fqbin(<<"grpc.routes.v1.routing_v1">>) -> "routes_v1";
get_proto_by_msg_name_as_fqbin(<<"grpc.routes.v1.routing_v1_update">>) -> "routes_v1";
get_proto_by_msg_name_as_fqbin(<<"grpc.routes.v1.routing_v1_response">>) -> "routes_v1";
get_proto_by_msg_name_as_fqbin(<<"grpc.routes.v1.Empty">>) -> "routes_v1";
get_proto_by_msg_name_as_fqbin(E) -> error({gpb_error, {badmsg, E}}).

get_proto_by_service_name_as_fqbin(<<"grpc.routes.v1.routes_v1">>) -> "routes_v1";
get_proto_by_service_name_as_fqbin(E) -> error({gpb_error, {badservice, E}}).

-spec get_proto_by_enum_name_as_fqbin(_) -> no_return().
get_proto_by_enum_name_as_fqbin(E) -> error({gpb_error, {badenum, E}}).

-spec get_protos_by_pkg_name_as_fqbin(_) -> no_return().
get_protos_by_pkg_name_as_fqbin(E) -> error({gpb_error, {badpkg, E}}).

gpb_version_as_string() ->
    "4.16.0".

gpb_version_as_list() ->
    [4, 16, 0].
